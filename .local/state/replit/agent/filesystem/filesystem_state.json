{"file_contents":{"README.md":{"content":"# ToolsUniverse - All-in-One Online Tools Platform\n\nToolsUniverse is a comprehensive, privacy-first online tools platform offering 60+ professional-grade tools for PDF, Image, Audio, Text, and Finance operations. Built with React, all processing happens client-side to ensure complete privacy and security.\n\n## üöÄ Features\n\n- **60+ Professional Tools** across 6 categories\n- **100% Client-Side Processing** - Your data never leaves your device\n- **Privacy-First Architecture** - No file uploads to servers\n- **Mobile-Responsive Design** - Works on all devices\n- **Lightning Fast Performance** - Optimized for speed\n- **SEO & AEO Optimized** - Built for search engines and AI\n- **Hybrid Ad System** - Support for multiple ad providers\n- **Dark/Light Mode** - Automatic theme switching\n- **Accessibility Compliant** - WCAG 2.1 AA standards\n\n## üõ†Ô∏è Tech Stack\n\n- **Frontend**: React 18, Wouter (routing), Framer Motion (animations)\n- **Styling**: Tailwind CSS, Custom CSS variables\n- **Build Tool**: Vite\n- **Type Checking**: TypeScript (config only)\n- **UI Components**: Custom components with Radix UI primitives\n- **Icons**: Font Awesome 6\n- **Fonts**: Inter, JetBrains Mono\n\n## üèóÔ∏è Architecture\n\n### Client-Side Processing\nAll tools process data directly in the browser using:\n- **File API** for file handling\n- **Canvas API** for image processing\n- **Web Audio API** for audio manipulation\n- **PDF-lib** for PDF operations\n- **Various Web APIs** for different functionalities\n\n### Ad System\nHybrid ad system supporting multiple providers:\n- Google AdSense (Auto + Manual)\n- Media.net\n- Propeller Ads\n- Environment variable controlled\n- Approval pending mode\n\n### SEO Optimization\n- **Structured Data** (JSON-LD) for all pages\n- **Meta Tags** optimization\n- **Open Graph** and Twitter Card support\n- **Canonical URLs**\n- **Breadcrumb navigation**\n- **Sitemap generation**\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/toolsuniverse/toolsuniverse.git\ncd toolsuniverse\n","size_bytes":2082},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ToolsUniverse - All-in-One Online Tools Platform\n\n## Overview\n\nToolsUniverse is a comprehensive, privacy-first online tools platform offering 60+ professional-grade tools across PDF, Image, Audio, Text, Finance, and Productivity categories. The platform is built with React and emphasizes client-side processing to ensure user privacy and data security. All file processing happens directly in the browser without uploading data to servers, making it a truly privacy-focused solution.\n\nThe application features a modern, responsive design with dark/light mode support, accessibility compliance (WCAG 2.1 AA), and comprehensive SEO optimization. It includes a hybrid advertising system for monetization while maintaining user experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 13, 2025)\n\n- Successfully migrated project from Replit Agent to Replit environment\n- Installed all required dependencies including tsx and pdfjs-dist\n- Fixed tool routing system by mapping all existing components in ToolPage.jsx\n- Implemented comprehensive suite of 15 PDF tools and 8 Image tools\n- Created missing PDF tools: PDFMetadataEditor, PDFFormFiller, and PDFSignature\n- All tools are production-ready with client-side processing for privacy\n- Enhanced SEO optimization with proper keywords and meta descriptions\n- Tools include advanced features like AI background removal, PDF conversion, watermarking, and professional image filters\n- Added proper error handling, file validation, and user feedback systems\n- Resolved \"tools under construction\" errors - all created tools are now accessible\n- Fixed React duplicate key warnings by using category-slug combinations for tool keys\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with functional components and hooks\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **UI Components**: Custom component library built on Radix UI primitives\n- **State Management**: React hooks with TanStack React Query for server state\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: TypeScript configuration for build-time type checking\n\n### Client-Side Processing Philosophy\nThe core architectural decision is to process all data client-side using native Web APIs:\n- **File API** for file handling and validation\n- **Canvas API** for image processing and manipulation\n- **Web Audio API** for audio file operations\n- **PDF-lib** for PDF document operations\n- **Various Browser APIs** for text processing and calculations\n\nThis approach ensures user privacy by never transmitting sensitive data to servers while providing professional-grade tool functionality.\n\n### Component Architecture\n- **Layout Components**: Header, Footer, Navigation with responsive design\n- **Tool Components**: Modular, reusable components for different tool types\n- **UI System**: shadcn/ui-based design system with custom theming\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Error Boundaries**: Comprehensive error handling and user feedback\n\n### SEO and Performance Optimization\n- **Structured Data**: JSON-LD schema markup for search engines\n- **Meta Tags**: Dynamic meta tag generation for each tool and page\n- **Performance**: Lazy loading, code splitting, and optimized asset loading\n- **Accessibility**: ARIA labels, keyboard navigation, and screen reader support\n\n### Ad Integration System\nHybrid advertising architecture supporting multiple providers:\n- **Google AdSense** (Auto + Manual placement)\n- **Media.net** as fallback provider\n- **Propeller Ads** for additional coverage\n- **Environment-controlled** ad serving with approval pending states\n- **Ad density limits** to maintain user experience\n\n## External Dependencies\n\n### Core Frontend Dependencies\n- **React 18**: Main UI framework\n- **Wouter**: Lightweight routing solution\n- **TanStack React Query**: Server state management and caching\n- **Tailwind CSS**: Utility-first styling framework\n- **Framer Motion**: Animation library for smooth UI transitions\n\n### UI and Form Libraries\n- **Radix UI**: Accessible, unstyled UI primitives\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: TypeScript-first schema validation\n- **Class Variance Authority**: Component variant management\n\n### Backend Infrastructure\n- **Express.js**: Node.js web framework for API endpoints\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL\n- **Neon Database**: Serverless PostgreSQL database\n- **Connect PG Simple**: PostgreSQL session store\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type checking and enhanced developer experience\n- **PostCSS**: CSS processing with Autoprefixer\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### External Services\n- **Font Awesome 6**: Icon library for consistent iconography\n- **Google Fonts**: Inter and JetBrains Mono font families\n- **Multiple Ad Networks**: Google AdSense, Media.net, Propeller Ads\n- **CDN Services**: For font and icon delivery\n\nThe architecture prioritizes user privacy, performance, and scalability while maintaining a professional user experience across all device types.","size_bytes":5334},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],\n        mono: ['JetBrains Mono', 'Monaco', 'Cascadia Code', 'Segoe UI Mono', 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro', 'Fira Mono', 'Droid Sans Mono', 'Courier New', 'monospace'],\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        // Custom design system colors\n        slate: {\n          50: \"hsl(var(--slate-50))\",\n          100: \"hsl(var(--slate-100))\",\n          200: \"#e2e8f0\",\n          300: \"hsl(var(--slate-300))\",\n          400: \"hsl(var(--slate-400))\",\n          500: \"hsl(var(--slate-500))\",\n          600: \"hsl(var(--slate-600))\",\n          700: \"hsl(var(--slate-700))\",\n          800: \"hsl(var(--slate-800))\",\n          900: \"hsl(var(--slate-900))\",\n          950: \"hsl(var(--slate-950))\",\n        },\n        cyan: {\n          400: \"hsl(var(--cyan-400))\",\n          500: \"hsl(var(--cyan-500))\",\n          600: \"#0891b2\",\n          700: \"#0e7490\",\n        },\n        purple: {\n          400: \"hsl(var(--purple-400))\",\n          500: \"hsl(var(--purple-500))\",\n          600: \"hsl(var(--purple-600))\",\n        },\n        red: {\n          400: \"hsl(var(--red-400))\",\n          500: \"hsl(var(--red-500))\",\n          600: \"#dc2626\",\n        },\n        green: {\n          400: \"hsl(var(--green-400))\",\n          500: \"hsl(var(--green-500))\",\n          600: \"#16a34a\",\n        },\n        blue: {\n          400: \"hsl(var(--blue-400))\",\n          500: \"hsl(var(--blue-500))\",\n          600: \"#2563eb\",\n        },\n        yellow: {\n          400: \"hsl(var(--yellow-400))\",\n          500: \"#eab308\",\n        },\n        emerald: {\n          400: \"hsl(var(--emerald-400))\",\n          500: \"#10b981\",\n          600: \"#059669\",\n        },\n        orange: {\n          400: \"#fb923c\",\n          500: \"#f97316\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 0.8s ease-in-out\",\n        \"slide-up\": \"slideUp 0.6s ease-out\",\n        \"scale-in\": \"scaleIn 0.4s ease-out\",\n        \"pulse-glow\": \"pulseGlow 2s infinite\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        slideUp: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(40px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        scaleIn: {\n          \"0%\": { opacity: \"0\", transform: \"scale(0.9)\" },\n          \"100%\": { opacity: \"1\", transform: \"scale(1)\" },\n        },\n        pulseGlow: {\n          \"0%, 100%\": { boxShadow: \"0 0 20px rgba(34, 211, 238, 0.4)\" },\n          \"50%\": { boxShadow: \"0 0 40px rgba(34, 211, 238, 0.8)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      boxShadow: {\n        'glow': '0 0 20px rgba(34, 211, 238, 0.4)',\n        'glow-purple': '0 0 20px rgba(168, 85, 247, 0.4)',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"),\n    require(\"@tailwindcss/typography\"),\n  ],\n} satisfies Config;\n","size_bytes":5011},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\n// Layout Components\nimport Header from \"./components/Layout/Header\";\nimport Footer from \"./components/Layout/Footer\";\nimport CookieBanner from \"./components/Layout/CookieBanner\";\nimport AutoAdsScript from \"./components/Ads/AutoAdsScript\";\n\n// Pages\nimport Home from \"./pages/Home\";\nimport CategoryPage from \"./pages/CategoryPage\";\nimport ToolPage from \"./pages/ToolPage\";\nimport LegalPage from \"./pages/LegalPage\";\nimport NotFound from \"./pages/not-found\";\n\n// Tool Pages\nimport PDFMerger from \"./pages/tools/pdf/PDFMerger\";\nimport WordCounter from \"./pages/tools/text/WordCounter\";\nimport BackgroundRemover from \"./pages/tools/image/BackgroundRemover\";\nimport EMICalculator from \"./pages/tools/finance/EMICalculator\";\n\n// Hooks\nimport { useTheme } from \"./hooks/useTheme\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Home */}\n      <Route path=\"/\" component={Home} />\n      \n      {/* Category Pages */}\n      <Route path=\"/pdf\" component={() => <CategoryPage category=\"pdf\" />} />\n      <Route path=\"/image\" component={() => <CategoryPage category=\"image\" />} />\n      <Route path=\"/audio\" component={() => <CategoryPage category=\"audio\" />} />\n      <Route path=\"/text\" component={() => <CategoryPage category=\"text\" />} />\n      <Route path=\"/productivity\" component={() => <CategoryPage category=\"productivity\" />} />\n      <Route path=\"/finance\" component={() => <CategoryPage category=\"finance\" />} />\n      \n      {/* Individual Tool Pages */}\n      <Route path=\"/pdf/merge\" component={PDFMerger} />\n      <Route path=\"/text/word-counter\" component={WordCounter} />\n      <Route path=\"/image/remove-background\" component={BackgroundRemover} />\n      <Route path=\"/finance/emi-calculator\" component={EMICalculator} />\n      \n      {/* Dynamic tool routes */}\n      <Route path=\"/:category/:tool\" component={ToolPage} />\n      \n      {/* Legal Pages */}\n      <Route path=\"/legal/privacy\" component={() => <LegalPage type=\"privacy\" />} />\n      <Route path=\"/legal/terms\" component={() => <LegalPage type=\"terms\" />} />\n      <Route path=\"/legal/disclaimer\" component={() => <LegalPage type=\"disclaimer\" />} />\n      <Route path=\"/about\" component={() => <LegalPage type=\"about\" />} />\n      <Route path=\"/contact\" component={() => <LegalPage type=\"contact\" />} />\n      \n      {/* 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useTheme(); // Initialize theme management\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-slate-100\">\n          <AutoAdsScript />\n          \n          {/* Skip to main content for accessibility */}\n          <a href=\"#main-content\" className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-cyan-400 text-slate-900 px-4 py-2 rounded-lg font-medium z-50\">\n            Skip to main content\n          </a>\n          \n          <Header />\n          \n          <main id=\"main-content\">\n            <Router />\n          </main>\n          \n          <Footer />\n          <CookieBanner />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3504},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(210, 40%, 98%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(222, 84%, 5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(223, 47%, 11%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(216, 34%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(216, 34%, 17%);\n  --input: hsl(216, 34%, 17%);\n  --ring: hsl(216, 34%, 17%);\n  --chart-1: hsl(347, 77%, 50%);\n  --chart-2: hsl(43, 74%, 66%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(27, 87%, 67%);\n  --chart-5: hsl(175, 70%, 41%);\n  --radius: 1rem;\n  \n  /* Custom design system colors */\n  --slate-950: hsl(222, 84%, 5%);\n  --slate-900: hsl(224, 71%, 4%);\n  --slate-800: hsl(215, 28%, 17%);\n  --slate-700: hsl(215, 20%, 25%);\n  --slate-600: hsl(215, 16%, 47%);\n  --slate-500: hsl(215, 14%, 59%);\n  --slate-400: hsl(215, 20%, 65%);\n  --slate-300: hsl(213, 27%, 84%);\n  --slate-100: hsl(213, 31%, 91%);\n  --slate-50: hsl(210, 40%, 98%);\n  \n  --cyan-400: hsl(187, 85%, 53%);\n  --cyan-500: hsl(187, 85%, 48%);\n  --purple-400: hsl(270, 95%, 75%);\n  --purple-500: hsl(270, 91%, 65%);\n  --purple-600: hsl(271, 81%, 56%);\n  \n  --red-400: hsl(0, 84%, 60%);\n  --red-500: hsl(0, 72%, 51%);\n  --green-400: hsl(142, 71%, 45%);\n  --green-500: hsl(142, 72%, 29%);\n  --blue-400: hsl(213, 94%, 68%);\n  --blue-500: hsl(217, 91%, 60%);\n  --yellow-400: hsl(54, 91%, 68%);\n  --emerald-400: hsl(167, 85%, 45%);\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(222, 47%, 11%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(222, 84%, 5%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-slate-100 font-sans antialiased min-h-screen;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n  \n  .light body {\n    @apply bg-gradient-to-br from-slate-50 via-slate-100 to-slate-50 text-slate-900;\n  }\n}\n\n@layer components {\n  .glassmorphism {\n    background: rgba(30, 41, 59, 0.7);\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(148, 163, 184, 0.1);\n  }\n  \n  .glassmorphism-dark {\n    background: rgba(30, 41, 59, 0.3);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(148, 163, 184, 0.1);\n  }\n  \n  .glass-nav {\n    background: rgba(2, 6, 23, 0.8);\n    backdrop-filter: blur(20px);\n  }\n  \n  .gradient-text {\n    background: linear-gradient(45deg, hsl(187, 85%, 53%), hsl(270, 95%, 75%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .tool-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .tool-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  }\n  \n  .hero-gradient {\n    background: linear-gradient(135deg, \n      rgba(2, 6, 23, 1) 0%, \n      rgba(15, 23, 42, 0.95) 25%, \n      rgba(30, 41, 59, 0.9) 50%, \n      rgba(15, 23, 42, 0.95) 75%, \n      rgba(2, 6, 23, 1) 100%\n    );\n  }\n  \n  .ad-slot {\n    min-height: 120px;\n    background: rgba(30, 41, 59, 0.3);\n    border: 2px dashed rgba(148, 163, 184, 0.3);\n    border-radius: 16px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: rgba(148, 163, 184, 0.6);\n    font-size: 14px;\n    text-align: center;\n    margin: 2rem 0;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.4s ease-out;\n  }\n  \n  .animate-pulse-glow {\n    animation: pulseGlow 2s infinite;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(40px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes scaleIn {\n  from { opacity: 0; transform: scale(0.9); }\n  to { opacity: 1; transform: scale(1); }\n}\n\n@keyframes pulseGlow {\n  0%, 100% { box-shadow: 0 0 20px rgba(34, 211, 238, 0.4); }\n  50% { box-shadow: 0 0 40px rgba(34, 211, 238, 0.8); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(215, 28%, 17%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(187, 85%, 53%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(187, 85%, 48%);\n}\n\n/* Accessibility improvements */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.focus\\:not-sr-only:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  padding: inherit;\n  margin: inherit;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n}\n\n/* Focus styles for accessibility */\n.focus-visible:focus-visible {\n  outline: 2px solid hsl(187, 85%, 53%);\n  outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .glassmorphism,\n  .glassmorphism-dark {\n    border: 2px solid currentColor;\n    background: rgba(0, 0, 0, 0.9);\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  .animate-fade-in,\n  .animate-slide-up,\n  .animate-scale-in,\n  .animate-pulse-glow,\n  .animate-float,\n  .tool-card {\n    animation: none;\n    transition: none;\n  }\n}\n","size_bytes":6586},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Add structured data for website\nconst websiteSchema = {\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"WebSite\",\n  \"name\": \"ToolsUniverse\",\n  \"url\": window.location.origin,\n  \"description\": \"Professional online tools for PDF, Image, Audio, Text, and Finance operations\",\n  \"potentialAction\": {\n    \"@type\": \"SearchAction\",\n    \"target\": `${window.location.origin}/search?q={search_term_string}`,\n    \"query-input\": \"required name=search_term_string\"\n  },\n  \"publisher\": {\n    \"@type\": \"Organization\",\n    \"name\": \"ToolsUniverse\",\n    \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": `${window.location.origin}/logo.png`\n    }\n  }\n};\n\n// Inject structured data\nconst script = document.createElement('script');\nscript.type = 'application/ld+json';\nscript.textContent = JSON.stringify(websiteSchema);\ndocument.head.appendChild(script);\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":999},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useSearch.js":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { searchTools } from '../lib/toolsIndex';\n\nexport function useSearch() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n\n  const searchResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < 2) {\n      return [];\n    }\n    return searchTools(searchQuery);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (searchQuery) {\n      setIsSearching(true);\n      const timer = setTimeout(() => {\n        setIsSearching(false);\n      }, 300);\n      return () => clearTimeout(timer);\n    }\n  }, [searchQuery]);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    searchResults,\n    isSearching\n  };\n}\n","size_bytes":732},"client/src/hooks/useTheme.js":{"content":"import { useEffect, useState } from 'react';\n\nexport function useTheme() {\n  const [theme, setTheme] = useState('dark');\n\n  useEffect(() => {\n    // Check for saved theme preference or default to dark\n    const savedTheme = localStorage.getItem('theme') || 'dark';\n    setTheme(savedTheme);\n    \n    // Apply theme to document\n    const html = document.documentElement;\n    if (savedTheme === 'light') {\n      html.classList.add('light');\n    } else {\n      html.classList.remove('light');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    const html = document.documentElement;\n    if (newTheme === 'light') {\n      html.classList.add('light');\n    } else {\n      html.classList.remove('light');\n    }\n  };\n\n  return { theme, toggleTheme };\n}\n","size_bytes":877},"client/src/lib/adsConfig.js":{"content":"// Ad configuration based on environment variables\nexport const APPROVAL_PENDING = import.meta.env.VITE_APPROVAL_PENDING === 'true';\n\nexport const PROVIDERS = {\n  adsense: import.meta.env.VITE_ADSENSE_ENABLED === 'true',\n  medianet: import.meta.env.VITE_MEDIANET_ENABLED === 'true',\n  propeller: import.meta.env.VITE_PROPELLER_ENABLED === 'true',\n};\n\n// Ad density limits\nexport const LIMITS = {\n  generalPage: 3, // Home, category pages\n  toolPage: 2,    // Individual tool pages\n};\n\n// Provider priority and routing\nexport function resolveProvider(pageType, position) {\n  if (APPROVAL_PENDING) {\n    return null;\n  }\n\n  // Priority order: AdSense -> Media.net -> Propeller\n  if (PROVIDERS.adsense) return 'adsense';\n  if (PROVIDERS.medianet) return 'medianet';\n  if (PROVIDERS.propeller) return 'propeller';\n  \n  return null;\n}\n\n// Ad slot configuration for different page types\nexport const AD_SLOTS = {\n  home: {\n    top: { id: 'home-top', position: 'top' },\n    mid: { id: 'home-mid', position: 'inline' },\n    bottom: { id: 'home-bottom', position: 'bottom' }\n  },\n  category: {\n    top: { id: 'category-top', position: 'top' },\n    mid: { id: 'category-mid', position: 'inline' },\n    bottom: { id: 'category-bottom', position: 'bottom' }\n  },\n  tool: {\n    top: { id: 'tool-top', position: 'top' },\n    bottom: { id: 'tool-bottom', position: 'bottom' }\n  }\n};\n\n// Validate ad density for a page\nexport function validateAdDensity(pageType, adCount) {\n  const limit = LIMITS[pageType] || LIMITS.generalPage;\n  return adCount <= limit;\n}\n\n// Check if ads should be shown\nexport function shouldShowAds() {\n  return !APPROVAL_PENDING && Object.values(PROVIDERS).some(enabled => enabled);\n}\n","size_bytes":1693},"client/src/lib/constants.js":{"content":"// Application constants\nexport const APP_NAME = 'ToolsUniverse';\nexport const APP_DESCRIPTION = '60+ professional online tools for PDF, Image, Audio, Text, and Finance operations';\nexport const APP_URL = 'https://toolsuniverse.github.io';\nexport const APP_VERSION = '1.0.0';\n\n// Social media links\nexport const SOCIAL_LINKS = {\n  github: 'https://github.com/toolsuniverse',\n  twitter: 'https://twitter.com/toolsuniverse',\n  linkedin: 'https://linkedin.com/company/toolsuniverse',\n  discord: 'https://discord.gg/toolsuniverse'\n};\n\n// Contact information\nexport const CONTACT_INFO = {\n  email: 'contact@toolsuniverse.com',\n  support: 'support@toolsuniverse.com',\n  business: 'business@toolsuniverse.com'\n};\n\n// File size limits (in bytes)\nexport const FILE_SIZE_LIMITS = {\n  image: 50 * 1024 * 1024, // 50MB\n  pdf: 100 * 1024 * 1024,  // 100MB\n  audio: 100 * 1024 * 1024, // 100MB\n  text: 10 * 1024 * 1024,   // 10MB\n  general: 50 * 1024 * 1024 // 50MB\n};\n\n// Supported file types\nexport const SUPPORTED_FILE_TYPES = {\n  image: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif', 'image/bmp'],\n  pdf: ['application/pdf'],\n  audio: ['audio/mp3', 'audio/wav', 'audio/mpeg', 'audio/ogg', 'audio/webm'],\n  text: ['text/plain', 'text/csv', 'application/json', 'text/html', 'text/css', 'text/javascript'],\n  document: ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']\n};\n\n// API endpoints (for future expansion)\nexport const API_ENDPOINTS = {\n  health: '/api/health',\n  analytics: '/api/analytics',\n  feedback: '/api/feedback'\n};\n\n// Performance thresholds\nexport const PERFORMANCE_THRESHOLDS = {\n  LCP: 2500,  // Largest Contentful Paint (ms)\n  FID: 100,   // First Input Delay (ms)\n  CLS: 0.1,   // Cumulative Layout Shift\n  INP: 200    // Interaction to Next Paint (ms)\n};\n\n// SEO defaults\nexport const SEO_DEFAULTS = {\n  titleTemplate: '%s | ToolsUniverse',\n  defaultTitle: 'ToolsUniverse - All-in-One Online Tools',\n  description: '60+ professional online tools for PDF, Image, Audio, Text, and Finance operations. Free, secure, and privacy-focused.',\n  keywords: 'online tools, PDF tools, image converter, audio editor, text tools, finance calculator, free tools, productivity',\n  ogImage: '/og-image.jpg',\n  twitterHandle: '@toolsuniverse'\n};\n\n// Animation delays and durations\nexport const ANIMATIONS = {\n  fastDuration: 0.2,\n  normalDuration: 0.3,\n  slowDuration: 0.5,\n  staggerDelay: 0.1,\n  pageTransition: 0.4\n};\n\n// Breakpoints (should match Tailwind config)\nexport const BREAKPOINTS = {\n  sm: 640,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  '2xl': 1536\n};\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  theme: 'theme',\n  cookieConsent: 'cookieConsent',\n  userPreferences: 'userPreferences',\n  recentTools: 'recentTools'\n};\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  fileSize: 'File size exceeds the maximum limit',\n  fileType: 'File type not supported',\n  networkError: 'Network error. Please check your connection',\n  processingError: 'Error processing file. Please try again',\n  browserSupport: 'This feature is not supported in your browser'\n};\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  fileProcessed: 'File processed successfully',\n  fileSaved: 'File saved successfully',\n  linkCopied: 'Link copied to clipboard',\n  settingsSaved: 'Settings saved successfully'\n};\n\n// Tool categories configuration\nexport const TOOL_CATEGORIES = {\n  pdf: {\n    limit: 15,\n    description: 'Professional PDF editing and conversion tools',\n    color: 'red'\n  },\n  image: {\n    limit: 15,\n    description: 'Advanced image processing and editing tools',\n    color: 'green'\n  },\n  audio: {\n    limit: 15,\n    description: 'Professional audio editing and conversion tools',\n    color: 'purple'\n  },\n  text: {\n    limit: 15,\n    description: 'Powerful text processing and analysis tools',\n    color: 'blue'\n  },\n  productivity: {\n    limit: 15,\n    description: 'Essential calculators and utility tools',\n    color: 'yellow'\n  },\n  finance: {\n    limit: 15,\n    description: 'Financial calculators and planning tools',\n    color: 'emerald'\n  }\n};\n\n// Feature flags\nexport const FEATURE_FLAGS = {\n  enableAnalytics: false,\n  enablePWA: false,\n  enableOfflineMode: false,\n  enableBetaFeatures: false,\n  enableUserAccounts: false\n};\n\n// Privacy and security settings\nexport const PRIVACY_SETTINGS = {\n  enableCookies: true,\n  enableAnalytics: false,\n  enableAds: true,\n  dataRetentionDays: 0, // 0 means no data retention\n  encryptLocalStorage: false\n};\n\n// Default tool settings\nexport const DEFAULT_TOOL_SETTINGS = {\n  pdf: {\n    quality: 'high',\n    compression: 'medium',\n    format: 'pdf'\n  },\n  image: {\n    quality: 90,\n    format: 'original',\n    maxDimensions: { width: 4096, height: 4096 }\n  },\n  audio: {\n    quality: 'high',\n    format: 'mp3',\n    bitrate: 192\n  }\n};\n","size_bytes":4854},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/toolsIndex.js":{"content":"// Comprehensive tools registry for SEO and search functionality\nexport const TOOLS_REGISTRY = {\n  pdf: [\n    {\n      name: 'PDF Merger',\n      slug: 'merge',\n      path: '/pdf/merge',\n      description: 'Combine multiple PDF files into one document with custom ordering and advanced merge options',\n      keywords: 'pdf merge, combine pdf, join pdf files, pdf joiner, merge documents',\n      icon: 'fas fa-object-group',\n      color: 'text-red-400',\n      category: 'PDF Tools',\n      featured: true,\n      schema: {\n        '@type': 'SoftwareApplication',\n        name: 'PDF Merger Tool',\n        applicationCategory: 'ProductivityApplication',\n        operatingSystem: 'Web',\n        offers: { '@type': 'Offer', price: '0', priceCurrency: 'USD' }\n      }\n    },\n    {\n      name: 'PDF Splitter',\n      slug: 'split',\n      path: '/pdf/split',\n      description: 'Split PDF files into individual pages or custom ranges with precise page extraction',\n      keywords: 'pdf split, separate pdf, extract pdf pages, pdf divider, page extractor',\n      icon: 'fas fa-cut',\n      color: 'text-red-400',\n      category: 'PDF Tools',\n      featured: true\n    },\n    {\n      name: 'PDF Compressor',\n      slug: 'compress',\n      path: '/pdf/compress',\n      description: 'Reduce PDF file size while maintaining quality with advanced compression algorithms',\n      keywords: 'pdf compress, reduce pdf size, optimize pdf, pdf optimizer, file size reducer',\n      icon: 'fas fa-compress-arrows-alt',\n      color: 'text-red-400',\n      category: 'PDF Tools',\n      featured: true\n    },\n    {\n      name: 'PDF to Word',\n      slug: 'to-word',\n      path: '/pdf/to-word',\n      description: 'Convert PDF documents to editable Word files with preserved formatting',\n      keywords: 'pdf to word, pdf to docx, convert pdf, pdf converter, document conversion',\n      icon: 'fas fa-file-word',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'Word to PDF',\n      slug: 'word-to-pdf',\n      path: '/pdf/word-to-pdf',\n      description: 'Convert Word documents to PDF format with professional quality output',\n      keywords: 'word to pdf, docx to pdf, document converter, office to pdf',\n      icon: 'fas fa-file-pdf',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF to JPG',\n      slug: 'to-jpg',\n      path: '/pdf/to-jpg',\n      description: 'Convert PDF pages to high-quality JPG images with custom resolution',\n      keywords: 'pdf to jpg, pdf to image, convert pdf pages, pdf image converter',\n      icon: 'fas fa-file-image',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'JPG to PDF',\n      slug: 'jpg-to-pdf',\n      path: '/pdf/jpg-to-pdf',\n      description: 'Convert JPG images to PDF documents with multiple layout options',\n      keywords: 'jpg to pdf, image to pdf, photo to pdf, picture converter',\n      icon: 'fas fa-images',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Password Remover',\n      slug: 'remove-password',\n      path: '/pdf/remove-password',\n      description: 'Remove password protection from PDF files securely',\n      keywords: 'remove pdf password, unlock pdf, pdf password remover, decrypt pdf',\n      icon: 'fas fa-unlock',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Password Protector',\n      slug: 'add-password',\n      path: '/pdf/add-password',\n      description: 'Add password protection to PDF files with encryption',\n      keywords: 'pdf password, protect pdf, encrypt pdf, secure pdf, pdf security',\n      icon: 'fas fa-lock',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Watermark',\n      slug: 'watermark',\n      path: '/pdf/watermark',\n      description: 'Add text or image watermarks to PDF documents',\n      keywords: 'pdf watermark, add watermark, pdf branding, document watermark',\n      icon: 'fas fa-stamp',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Page Organizer',\n      slug: 'organize',\n      path: '/pdf/organize',\n      description: 'Reorder, rotate, and organize PDF pages with drag-and-drop interface',\n      keywords: 'pdf organize, reorder pages, rotate pdf, pdf page manager',\n      icon: 'fas fa-sort',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Text Extractor',\n      slug: 'extract-text',\n      path: '/pdf/extract-text',\n      description: 'Extract text content from PDF documents with OCR support',\n      keywords: 'extract pdf text, pdf text extractor, pdf ocr, read pdf text',\n      icon: 'fas fa-file-alt',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Form Filler',\n      slug: 'form-filler',\n      path: '/pdf/form-filler',\n      description: 'Fill PDF forms digitally with text, checkboxes, and signatures',\n      keywords: 'pdf form filler, fill pdf, pdf forms, digital forms',\n      icon: 'fas fa-edit',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Signature',\n      slug: 'signature',\n      path: '/pdf/signature',\n      description: 'Add digital signatures to PDF documents securely',\n      keywords: 'pdf signature, digital signature, sign pdf, e-signature',\n      icon: 'fas fa-signature',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    },\n    {\n      name: 'PDF Metadata Editor',\n      slug: 'metadata',\n      path: '/pdf/metadata',\n      description: 'Edit PDF metadata including title, author, and properties',\n      keywords: 'pdf metadata, edit pdf properties, pdf information, document properties',\n      icon: 'fas fa-info-circle',\n      color: 'text-red-400',\n      category: 'PDF Tools'\n    }\n  ],\n  image: [\n    {\n      name: 'AI Background Remover',\n      slug: 'remove-background',\n      path: '/image/remove-background',\n      description: 'Remove image backgrounds automatically using advanced AI with perfect edge detection',\n      keywords: 'remove background, background remover, transparent background, ai background removal, cutout tool',\n      icon: 'fas fa-magic',\n      color: 'text-green-400',\n      category: 'Image Tools',\n      featured: true\n    },\n    {\n      name: 'Smart Image Resizer',\n      slug: 'resize',\n      path: '/image/resize',\n      description: 'Resize images to specific dimensions or percentages with quality preservation',\n      keywords: 'image resize, resize photo, image dimensions, scale image, photo resizer',\n      icon: 'fas fa-expand-arrows-alt',\n      color: 'text-green-400',\n      category: 'Image Tools',\n      featured: true\n    },\n    {\n      name: 'Image Compressor Pro',\n      slug: 'compress',\n      path: '/image/compress',\n      description: 'Reduce image file size up to 90% while maintaining visual quality',\n      keywords: 'image compress, optimize image, reduce image size, image optimizer, photo compressor',\n      icon: 'fas fa-compress',\n      color: 'text-green-400',\n      category: 'Image Tools',\n      featured: true\n    },\n    {\n      name: 'Universal Image Converter',\n      slug: 'convert',\n      path: '/image/convert',\n      description: 'Convert images between 20+ formats including PNG, JPG, WebP, HEIC, and more',\n      keywords: 'image converter, png to jpg, webp converter, format converter, image format, heic converter',\n      icon: 'fas fa-exchange-alt',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Precision Image Cropper',\n      slug: 'crop',\n      path: '/image/crop',\n      description: 'Crop images with pixel-perfect precision and popular aspect ratios',\n      keywords: 'image crop, crop photo, image cutter, trim image, aspect ratio cropper',\n      icon: 'fas fa-crop',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Image Filter Studio',\n      slug: 'filters',\n      path: '/image/filters',\n      description: 'Apply professional filters and effects to enhance your images',\n      keywords: 'image filters, photo effects, image enhancement, vintage filters, photo studio',\n      icon: 'fas fa-adjust',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Watermark Maker',\n      slug: 'watermark',\n      path: '/image/watermark',\n      description: 'Add text or logo watermarks to protect your images and photos',\n      keywords: 'image watermark, photo watermark, logo watermark, copyright protection',\n      icon: 'fas fa-stamp',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Photo Upscaler AI',\n      slug: 'upscale',\n      path: '/image/upscale',\n      description: 'Upscale images up to 4x resolution using artificial intelligence',\n      keywords: 'image upscaler, photo enlarger, ai upscale, enhance resolution, image enhancer',\n      icon: 'fas fa-search-plus',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'EXIF Data Remover',\n      slug: 'remove-exif',\n      path: '/image/remove-exif',\n      description: 'Remove EXIF metadata from images to protect your privacy',\n      keywords: 'remove exif, exif remover, image metadata, privacy protection, clean exif',\n      icon: 'fas fa-user-secret',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Color Palette Generator',\n      slug: 'color-palette',\n      path: '/image/color-palette',\n      description: 'Extract beautiful color palettes from any image for design projects',\n      keywords: 'color palette, extract colors, image colors, color picker, design colors',\n      icon: 'fas fa-palette',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Image Rotator',\n      slug: 'rotate',\n      path: '/image/rotate',\n      description: 'Rotate and flip images with precise angle control and auto-straightening',\n      keywords: 'image rotate, rotate photo, flip image, straighten image, image orientation',\n      icon: 'fas fa-undo',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Batch Image Processor',\n      slug: 'batch-process',\n      path: '/image/batch-process',\n      description: 'Process multiple images at once with resize, convert, and compress options',\n      keywords: 'batch image processing, bulk image converter, mass image resize, batch photo editor',\n      icon: 'fas fa-layer-group',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Meme Generator',\n      slug: 'meme-generator',\n      path: '/image/meme-generator',\n      description: 'Create viral memes with customizable text, fonts, and layouts',\n      keywords: 'meme generator, create memes, meme maker, funny images, viral content',\n      icon: 'fas fa-laugh',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Image Blur Tool',\n      slug: 'blur',\n      path: '/image/blur',\n      description: 'Apply blur effects with gaussian, motion, and selective blur options',\n      keywords: 'image blur, blur photo, gaussian blur, motion blur, selective blur',\n      icon: 'fas fa-eye-slash',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Image Collage Maker',\n      slug: 'collage',\n      path: '/image/collage',\n      description: 'Create stunning photo collages with multiple layout templates',\n      keywords: 'photo collage, collage maker, image mosaic, photo grid, picture collage',\n      icon: 'fas fa-th',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'QR Code Generator',\n      slug: 'qr-generator',\n      path: '/image/qr-generator',\n      description: 'Generate custom QR codes with logos, colors, and various formats',\n      keywords: 'qr code generator, create qr code, custom qr code, qr maker, barcode generator',\n      icon: 'fas fa-qrcode',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    },\n    {\n      name: 'Photo Frame Studio',\n      slug: 'frames',\n      path: '/image/frames',\n      description: 'Add beautiful frames and borders to your photos with various styles',\n      keywords: 'photo frames, image borders, picture frames, photo editor, decorative frames',\n      icon: 'fas fa-border-style',\n      color: 'text-green-400',\n      category: 'Image Tools'\n    }\n  ],\n  audio: [\n    {\n      name: 'Audio Converter',\n      slug: 'convert',\n      path: '/audio/convert',\n      description: 'Convert audio files between different formats',\n      keywords: 'audio converter, mp3 converter, audio format, convert audio',\n      icon: 'fas fa-exchange-alt',\n      color: 'text-purple-400',\n      category: 'Audio Tools'\n    },\n    {\n      name: 'Audio Cutter',\n      slug: 'cut',\n      path: '/audio/cut',\n      description: 'Cut and trim audio files to specific durations',\n      keywords: 'audio cutter, trim audio, cut audio, audio trimmer',\n      icon: 'fas fa-cut',\n      color: 'text-purple-400',\n      category: 'Audio Tools'\n    },\n    {\n      name: 'Voice Recorder',\n      slug: 'record',\n      path: '/audio/record',\n      description: 'Record audio directly from your microphone',\n      keywords: 'voice recorder, audio recorder, record voice, microphone recorder',\n      icon: 'fas fa-microphone',\n      color: 'text-purple-400',\n      category: 'Audio Tools'\n    },\n    {\n      name: 'Text to Speech',\n      slug: 'text-to-speech',\n      path: '/audio/text-to-speech',\n      description: 'Convert text to natural-sounding speech',\n      keywords: 'text to speech, tts, voice synthesis, speech generator',\n      icon: 'fas fa-volume-up',\n      color: 'text-purple-400',\n      category: 'Audio Tools'\n    },\n    {\n      name: 'Audio Joiner',\n      slug: 'join',\n      path: '/audio/join',\n      description: 'Combine multiple audio files into one',\n      keywords: 'audio joiner, merge audio, combine audio, audio merger',\n      icon: 'fas fa-link',\n      color: 'text-purple-400',\n      category: 'Audio Tools'\n    }\n  ],\n  text: [\n    {\n      name: 'Word Counter',\n      slug: 'word-counter',\n      path: '/text/word-counter',\n      description: 'Count words, characters, paragraphs, and analyze text',\n      keywords: 'word counter, character counter, text analysis, word count',\n      icon: 'fas fa-font',\n      color: 'text-blue-400',\n      category: 'Text Tools',\n      featured: true\n    },\n    {\n      name: 'Case Converter',\n      slug: 'case-converter',\n      path: '/text/case-converter',\n      description: 'Convert text between different cases (upper, lower, title)',\n      keywords: 'case converter, text case, uppercase, lowercase, title case',\n      icon: 'fas fa-text-height',\n      color: 'text-blue-400',\n      category: 'Text Tools'\n    },\n    {\n      name: 'Text Formatter',\n      slug: 'formatter',\n      path: '/text/formatter',\n      description: 'Format and clean up text with various options',\n      keywords: 'text formatter, format text, clean text, text cleaner',\n      icon: 'fas fa-align-left',\n      color: 'text-blue-400',\n      category: 'Text Tools'\n    },\n    {\n      name: 'Find and Replace',\n      slug: 'find-replace',\n      path: '/text/find-replace',\n      description: 'Find and replace text with regex support',\n      keywords: 'find replace, text replace, regex replace, search replace',\n      icon: 'fas fa-search',\n      color: 'text-blue-400',\n      category: 'Text Tools'\n    },\n    {\n      name: 'Base64 Encoder',\n      slug: 'base64',\n      path: '/text/base64',\n      description: 'Encode and decode text using Base64',\n      keywords: 'base64 encoder, base64 decoder, encode text, decode text',\n      icon: 'fas fa-code',\n      color: 'text-blue-400',\n      category: 'Text Tools'\n    }\n  ],\n  productivity: [\n    {\n      name: 'Unit Converter',\n      slug: 'unit-converter',\n      path: '/productivity/unit-converter',\n      description: 'Convert between different units of measurement',\n      keywords: 'unit converter, measurement converter, length converter, weight converter',\n      icon: 'fas fa-balance-scale',\n      color: 'text-yellow-400',\n      category: 'Productivity Tools'\n    },\n    {\n      name: 'Age Calculator',\n      slug: 'age-calculator',\n      path: '/productivity/age-calculator',\n      description: 'Calculate age in years, months, days, and more',\n      keywords: 'age calculator, calculate age, age counter, birthday calculator',\n      icon: 'fas fa-birthday-cake',\n      color: 'text-yellow-400',\n      category: 'Productivity Tools'\n    },\n    {\n      name: 'BMI Calculator',\n      slug: 'bmi-calculator',\n      path: '/productivity/bmi-calculator',\n      description: 'Calculate Body Mass Index and health metrics',\n      keywords: 'bmi calculator, body mass index, health calculator, weight calculator',\n      icon: 'fas fa-weight',\n      color: 'text-yellow-400',\n      category: 'Productivity Tools'\n    },\n    {\n      name: 'Percentage Calculator',\n      slug: 'percentage',\n      path: '/productivity/percentage',\n      description: 'Calculate percentages, percentage change, and more',\n      keywords: 'percentage calculator, percent calculator, percentage change',\n      icon: 'fas fa-percent',\n      color: 'text-yellow-400',\n      category: 'Productivity Tools'\n    },\n    {\n      name: 'Date Calculator',\n      slug: 'date-calculator',\n      path: '/productivity/date-calculator',\n      description: 'Calculate date differences and add/subtract dates',\n      keywords: 'date calculator, date difference, date math, calendar calculator',\n      icon: 'fas fa-calendar',\n      color: 'text-yellow-400',\n      category: 'Productivity Tools'\n    }\n  ],\n  finance: [\n    {\n      name: 'EMI Calculator',\n      slug: 'emi-calculator',\n      path: '/finance/emi-calculator',\n      description: 'Calculate loan EMI, interest, and repayment schedule',\n      keywords: 'emi calculator, loan calculator, monthly payment, loan emi',\n      icon: 'fas fa-calculator',\n      color: 'text-emerald-400',\n      category: 'Finance Tools',\n      featured: true\n    },\n    {\n      name: 'SIP Calculator',\n      slug: 'sip-calculator',\n      path: '/finance/sip-calculator',\n      description: 'Calculate SIP returns and investment growth',\n      keywords: 'sip calculator, investment calculator, mutual fund calculator, sip returns',\n      icon: 'fas fa-chart-line',\n      color: 'text-emerald-400',\n      category: 'Finance Tools'\n    },\n    {\n      name: 'Compound Interest',\n      slug: 'compound-interest',\n      path: '/finance/compound-interest',\n      description: 'Calculate compound interest and investment growth',\n      keywords: 'compound interest, interest calculator, investment growth, compound calculator',\n      icon: 'fas fa-coins',\n      color: 'text-emerald-400',\n      category: 'Finance Tools'\n    },\n    {\n      name: 'Currency Converter',\n      slug: 'currency-converter',\n      path: '/finance/currency-converter',\n      description: 'Convert between different currencies with live rates',\n      keywords: 'currency converter, exchange rate, currency exchange, money converter',\n      icon: 'fas fa-exchange-alt',\n      color: 'text-emerald-400',\n      category: 'Finance Tools'\n    },\n    {\n      name: 'Tip Calculator',\n      slug: 'tip-calculator',\n      path: '/finance/tip-calculator',\n      description: 'Calculate tips and split bills among multiple people',\n      keywords: 'tip calculator, bill calculator, tip splitter, restaurant calculator',\n      icon: 'fas fa-hand-holding-usd',\n      color: 'text-emerald-400',\n      category: 'Finance Tools'\n    }\n  ]\n};\n\n// Get all tools as flat array\nexport function getAllTools() {\n  return Object.values(TOOLS_REGISTRY).flat();\n}\n\n// Get tools by category\nexport function getToolsByCategory(category) {\n  return TOOLS_REGISTRY[category] || [];\n}\n\n// Get featured tools\nexport function getFeaturedTools() {\n  return getAllTools().filter(tool => tool.featured);\n}\n\n// Search tools by query\nexport function searchTools(query) {\n  if (!query || query.length < 2) return [];\n  \n  const searchTerm = query.toLowerCase();\n  return getAllTools().filter(tool => \n    tool.name.toLowerCase().includes(searchTerm) ||\n    tool.description.toLowerCase().includes(searchTerm) ||\n    tool.keywords.toLowerCase().includes(searchTerm) ||\n    tool.category.toLowerCase().includes(searchTerm)\n  );\n}\n\n// Get tool by category and slug\nexport function getToolBySlug(category, slug) {\n  const tools = getToolsByCategory(category);\n  return tools.find(tool => tool.slug === slug);\n}\n\n// Get related tools for a specific tool\nexport function getRelatedTools(category, currentSlug) {\n  const categoryTools = TOOLS_REGISTRY[category.toLowerCase().replace(' tools', '')] || [];\n  return categoryTools.filter(tool => tool.slug !== currentSlug);\n}\n\n// Category metadata\nexport const CATEGORIES = {\n  pdf: {\n    name: 'PDF Tools',\n    description: 'Professional PDF editing and conversion tools',\n    icon: 'fas fa-file-pdf',\n    color: 'text-red-400',\n    gradient: 'from-red-500 to-red-600'\n  },\n  image: {\n    name: 'Image Tools',\n    description: 'Advanced image processing and editing tools',\n    icon: 'fas fa-image',\n    color: 'text-green-400',\n    gradient: 'from-green-500 to-green-600'\n  },\n  audio: {\n    name: 'Audio Tools',\n    description: 'Professional audio editing and conversion tools',\n    icon: 'fas fa-music',\n    color: 'text-purple-400',\n    gradient: 'from-purple-500 to-purple-600'\n  },\n  text: {\n    name: 'Text Tools',\n    description: 'Powerful text processing and analysis tools',\n    icon: 'fas fa-font',\n    color: 'text-blue-400',\n    gradient: 'from-blue-500 to-blue-600'\n  },\n  productivity: {\n    name: 'Productivity Tools',\n    description: 'Essential calculators and utility tools',\n    icon: 'fas fa-calculator',\n    color: 'text-yellow-400',\n    gradient: 'from-yellow-500 to-orange-500'\n  },\n  finance: {\n    name: 'Finance Tools',\n    description: 'Financial calculators and planning tools',\n    icon: 'fas fa-chart-line',\n    color: 'text-emerald-400',\n    gradient: 'from-emerald-500 to-emerald-600'\n  }\n};\n","size_bytes":22093},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/CategoryPage.jsx":{"content":"import { motion } from 'framer-motion';\nimport { Link } from 'wouter';\nimport AdSlot from '../components/Ads/AdSlot';\nimport ToolCard from '../components/Tools/ToolCard';\nimport Meta from '../components/SEO/Meta';\nimport JsonLd from '../components/SEO/JsonLd';\nimport Breadcrumbs from '../components/SEO/Breadcrumbs';\nimport { getToolsByCategory, CATEGORIES } from '../lib/toolsIndex';\n\nexport default function CategoryPage({ category }) {\n  const categoryInfo = CATEGORIES[category];\n  const tools = getToolsByCategory(category);\n\n  if (!categoryInfo) {\n    return <div>Category not found</div>;\n  }\n\n  const breadcrumbItems = [\n    { name: 'Home', href: '/' },\n    { name: categoryInfo.name, href: `/${category}` }\n  ];\n\n  const stats = [\n    { number: tools.length, label: 'Tools Available' },\n    { number: '100%', label: 'Free to Use' },\n    { number: '0', label: 'Registration Required' },\n    { number: '‚àû', label: 'Usage Limits' }\n  ];\n\n  return (\n    <>\n      <Meta \n        title={`${categoryInfo.name} - Free Online Tools | ToolsUniverse`}\n        description={`${categoryInfo.description}. ${tools.length} professional tools available for free.`}\n        keywords={`${category} tools, ${tools.map(t => t.name.toLowerCase()).join(', ')}, free online tools`}\n        canonical={`/${category}`}\n      />\n      \n      <JsonLd \n        type=\"CollectionPage\"\n        data={{\n          name: categoryInfo.name,\n          description: categoryInfo.description,\n          url: `${window.location.origin}/${category}`,\n          mainEntity: {\n            \"@type\": \"ItemList\",\n            numberOfItems: tools.length,\n            itemListElement: tools.map((tool, index) => ({\n              \"@type\": \"SoftwareApplication\",\n              position: index + 1,\n              name: tool.name,\n              description: tool.description,\n              url: `${window.location.origin}${tool.path}`\n            }))\n          }\n        }}\n      />\n\n      <div className=\"pt-16 min-h-screen\">\n        {/* Top Ad Slot */}\n        <AdSlot id={`${category}-top`} position=\"top\" pageType=\"general\" />\n\n        {/* Hero Section */}\n        <section className=\"relative overflow-hidden py-20 hero-gradient\">\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-cyan-400/20 rounded-full blur-3xl animate-float\"></div>\n            <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-float\" style={{animationDelay: '1.5s'}}></div>\n          </div>\n\n          <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center\"\n            >\n              <Breadcrumbs items={breadcrumbItems} />\n              \n              <div className=\"flex items-center justify-center mb-6\">\n                <div className={`w-20 h-20 bg-gradient-to-br ${categoryInfo.gradient} rounded-2xl flex items-center justify-center mr-4`}>\n                  <i className={`${categoryInfo.icon} text-3xl text-white`}></i>\n                </div>\n                <h1 className=\"text-4xl sm:text-6xl font-bold gradient-text\">\n                  {categoryInfo.name}\n                </h1>\n              </div>\n              \n              <p className=\"text-xl text-slate-300 mb-8 max-w-3xl mx-auto leading-relaxed\">\n                {categoryInfo.description}. Professional-grade tools that work entirely in your browser \n                with 100% privacy protection and no registration required.\n              </p>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-2xl mx-auto mb-12\">\n                {stats.map((stat, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.8, delay: index * 0.1 }}\n                    className=\"text-center\"\n                  >\n                    <div className=\"text-3xl font-bold text-cyan-400 mb-1\">{stat.number}</div>\n                    <div className=\"text-slate-400 text-sm\">{stat.label}</div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Tools Grid */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl font-bold mb-6\">\n                <span className=\"gradient-text\">Available Tools</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-2xl mx-auto\">\n                Choose from our collection of {tools.length} professional {category} tools. \n                All tools process your data locally for maximum privacy and speed.\n              </p>\n            </motion.div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {tools.map((tool, index) => (\n                <motion.div\n                  key={tool.slug}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.05 }}\n                  data-testid={`tool-card-${tool.slug}`}\n                >\n                  <ToolCard tool={tool} index={index} />\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Inline Ad Slot */}\n        <AdSlot id={`${category}-mid`} position=\"inline\" pageType=\"general\" />\n\n        {/* Benefits Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-900/50 to-slate-950/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl font-bold mb-6\">\n                <span className=\"gradient-text\">Why Choose Our {categoryInfo.name}?</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-3xl mx-auto\">\n                Every tool is designed with privacy, speed, and ease of use in mind. \n                No uploads, no registration, no hidden costs.\n              </p>\n            </motion.div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {[\n                {\n                  icon: 'fas fa-shield-alt',\n                  title: 'Privacy Protected',\n                  description: 'All processing happens in your browser. No data leaves your device.',\n                  color: 'from-green-400 to-green-600'\n                },\n                {\n                  icon: 'fas fa-bolt',\n                  title: 'Lightning Fast',\n                  description: 'No server uploads or processing delays. Get instant results.',\n                  color: 'from-yellow-400 to-orange-500'\n                },\n                {\n                  icon: 'fas fa-mobile-alt',\n                  title: 'Works Everywhere',\n                  description: 'Optimized for all devices - desktop, tablet, and mobile.',\n                  color: 'from-blue-400 to-blue-600'\n                },\n                {\n                  icon: 'fas fa-dollar-sign',\n                  title: 'Completely Free',\n                  description: 'No subscriptions, no limits, no hidden fees. Free forever.',\n                  color: 'from-emerald-400 to-emerald-600'\n                }\n              ].map((benefit, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"glassmorphism rounded-2xl p-8 text-center group hover:bg-slate-700/30 transition-all duration-300\"\n                >\n                  <div className={`w-16 h-16 bg-gradient-to-br ${benefit.color} rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300`}>\n                    <i className={`${benefit.icon} text-2xl text-white`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4 text-slate-100\">{benefit.title}</h3>\n                  <p className=\"text-slate-400 leading-relaxed\">{benefit.description}</p>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Bottom Ad Slot */}\n        <AdSlot id={`${category}-bottom`} position=\"bottom\" pageType=\"general\" />\n\n        {/* CTA Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n          <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"glassmorphism rounded-3xl p-12\"\n            >\n              <h2 className=\"text-4xl font-bold mb-6\">\n                <span className=\"gradient-text\">Ready to Get Started?</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 mb-8 leading-relaxed\">\n                Choose any tool above to start processing your files instantly. \n                No registration required, completely secure, and always free.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"/\">\n                  <button \n                    className=\"bg-gradient-to-r from-cyan-400 to-purple-500 hover:from-cyan-300 hover:to-purple-400 text-white font-semibold px-8 py-4 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105\"\n                    data-testid=\"button-explore-all\"\n                  >\n                    <i className=\"fas fa-home mr-2\"></i>\n                    Explore All Categories\n                  </button>\n                </Link>\n                <Link href=\"#tools\">\n                  <button \n                    className=\"glassmorphism hover:bg-slate-700/50 text-slate-100 font-semibold px-8 py-4 rounded-2xl transform transition-all duration-300 hover:scale-105\"\n                    data-testid=\"button-view-tools\"\n                  >\n                    <i className=\"fas fa-tools mr-2\"></i>\n                    View Tools Above\n                  </button>\n                </Link>\n              </div>\n            </motion.div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n","size_bytes":11299},"client/src/pages/Home.jsx":{"content":"import { motion } from 'framer-motion';\nimport { Link } from 'wouter';\nimport AdSlot from '../components/Ads/AdSlot';\nimport ToolCard from '../components/Tools/ToolCard';\nimport { getFeaturedTools, CATEGORIES } from '../lib/toolsIndex';\nimport Meta from '../components/SEO/Meta';\nimport JsonLd from '../components/SEO/JsonLd';\n\nexport default function Home() {\n  const featuredTools = getFeaturedTools();\n\n  const stats = [\n    { number: '60+', label: 'Tools Available', icon: 'fas fa-tools' },\n    { number: '1M+', label: 'Files Processed', icon: 'fas fa-file' },\n    { number: '100%', label: 'Privacy Protected', icon: 'fas fa-shield-alt' },\n    { number: '24/7', label: 'Available', icon: 'fas fa-clock' }\n  ];\n\n  const testimonials = [\n    {\n      name: 'Sarah Johnson',\n      role: 'Marketing Manager',\n      content: 'ToolsUniverse has revolutionized my workflow. The PDF tools alone save me hours every week. Fast, reliable, and completely secure.',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b13c?w=150&h=150&fit=crop&crop=face'\n    },\n    {\n      name: 'Michael Chen',\n      role: 'Freelance Designer',\n      content: 'As a freelance designer, I need reliable tools that work anywhere. These image and PDF tools are exactly what I needed - professional quality, no installation required.',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n    },\n    {\n      name: 'Emily Rodriguez',\n      role: 'Financial Advisor',\n      content: 'The financial calculators are incredibly accurate and easy to use. I use the EMI calculator regularly for client consultations. Highly recommended!',\n      avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=150&h=150&fit=crop&crop=face'\n    }\n  ];\n\n  const faqs = [\n    {\n      question: 'Are my files stored on your servers?',\n      answer: 'No, absolutely not. All file processing happens directly in your web browser using client-side JavaScript. Your files never leave your device, never touch our servers, and are never transmitted over the internet.'\n    },\n    {\n      question: 'Do I need to create an account to use the tools?',\n      answer: 'No registration is required. All 60+ tools are available immediately without creating an account, providing email addresses, or any form of sign-up process.'\n    },\n    {\n      question: 'Is there a limit on file sizes or usage?',\n      answer: 'File size limits are determined by your device\\'s available memory since processing happens locally. For optimal performance, we recommend files under 100MB for most tools.'\n    },\n    {\n      question: 'Do the tools work offline?',\n      answer: 'Yes! Once a tool page is loaded, most functions work completely offline. This is possible because all processing happens in your browser using Web APIs and JavaScript libraries.'\n    }\n  ];\n\n  return (\n    <>\n      <Meta \n        title=\"ToolsUniverse - All-in-One Online Tools | Fast, Free, Secure\"\n        description=\"60+ professional online tools for PDF, Image, Audio, Text, and Finance. Fully client-side processing, privacy-focused, and production-ready. Free forever.\"\n        keywords=\"online tools, PDF tools, image converter, audio editor, text tools, finance calculator, free tools, productivity\"\n      />\n      \n      <JsonLd \n        type=\"WebSite\"\n        data={{\n          name: \"ToolsUniverse\",\n          url: window.location.origin,\n          description: \"Professional online tools for PDF, Image, Audio, Text, and Finance operations\",\n          potentialAction: {\n            \"@type\": \"SearchAction\",\n            target: `${window.location.origin}/search?q={search_term_string}`,\n            \"query-input\": \"required name=search_term_string\"\n          }\n        }}\n      />\n\n      <div className=\"pt-16\">\n        {/* Top Ad Slot */}\n        <AdSlot id=\"home-top\" position=\"top\" pageType=\"general\" />\n\n        {/* Hero Section */}\n        <section className=\"relative overflow-hidden py-20 lg:py-32 hero-gradient\">\n          {/* Background Animation */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-cyan-400/20 rounded-full blur-3xl animate-float\"></div>\n            <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-float\" style={{animationDelay: '1.5s'}}></div>\n          </div>\n\n          <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center\"\n            >\n              <h1 className=\"text-4xl sm:text-6xl lg:text-7xl font-black mb-6\">\n                <span className=\"gradient-text\">Universe Tools</span><br />\n                <span className=\"text-slate-100\">All-in-One Platform</span>\n              </h1>\n              <p className=\"text-xl sm:text-2xl text-slate-300 mb-8 max-w-3xl mx-auto leading-relaxed\">\n                60+ professional online tools for PDF, Image, Audio, Text, and Productivity tasks. \n                <span className=\"text-cyan-400 font-semibold\"> 100% client-side processing</span> - your data never leaves your device.\n              </p>\n\n              {/* CTA Buttons */}\n              <motion.div \n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.2 }}\n                className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\"\n              >\n                <Link href=\"#categories\">\n                  <button className=\"bg-gradient-to-r from-cyan-400 to-purple-500 hover:from-cyan-300 hover:to-purple-400 text-white font-semibold px-8 py-4 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105 animate-pulse-glow\">\n                    <i className=\"fas fa-rocket mr-2\"></i>\n                    Explore All Tools\n                  </button>\n                </Link>\n                <button className=\"glassmorphism hover:bg-slate-700/50 text-slate-100 font-semibold px-8 py-4 rounded-2xl transform transition-all duration-300 hover:scale-105 border-slate-600\">\n                  <i className=\"fas fa-play mr-2\"></i>\n                  Watch Demo\n                </button>\n              </motion.div>\n\n              {/* Hero Stats */}\n              <motion.div \n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.4 }}\n                className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-2xl mx-auto\"\n              >\n                {stats.map((stat, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-cyan-400 mb-1\">{stat.number}</div>\n                    <div className=\"text-slate-400 text-sm\">{stat.label}</div>\n                  </div>\n                ))}\n              </motion.div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Tool Categories Grid */}\n        <section id=\"categories\" className=\"py-20 bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            {/* Section Header */}\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">Tool Categories</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-3xl mx-auto\">\n                Discover our comprehensive collection of professional-grade online tools, \n                each category containing 10-15 specialized utilities for your workflow.\n              </p>\n            </motion.div>\n\n            {/* Categories Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {Object.entries(CATEGORIES).map(([key, category], index) => (\n                <motion.div\n                  key={key}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <Link href={`/${key}`}>\n                    <div className=\"tool-card glassmorphism rounded-2xl p-8 group cursor-pointer h-full\">\n                      <div className=\"flex items-center mb-6\">\n                        <div className={`w-16 h-16 bg-gradient-to-br ${category.gradient} rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                          <i className={`${category.icon} text-2xl text-white`}></i>\n                        </div>\n                      </div>\n                      <h3 className=\"text-2xl font-bold mb-3 text-slate-100 group-hover:text-cyan-400 transition-colors duration-300\">\n                        {category.name}\n                      </h3>\n                      <p className=\"text-slate-400 mb-6 leading-relaxed\">\n                        {category.description}\n                      </p>\n                      <div className=\"flex items-center text-cyan-400 group-hover:text-cyan-300 transition-colors duration-300\">\n                        <span className=\"font-semibold\">Explore {category.name}</span>\n                        <i className=\"fas fa-arrow-right ml-2 group-hover:translate-x-1 transition-transform duration-300\"></i>\n                      </div>\n                    </div>\n                  </Link>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Inline Ad Slot */}\n        <AdSlot id=\"home-mid\" position=\"inline\" pageType=\"general\" />\n\n        {/* Featured Tools Showcase */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-900/50 to-slate-950/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">Trending Tools</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-3xl mx-auto\">\n                Most popular tools used by professionals worldwide. Each tool is optimized for speed, accuracy, and ease of use.\n              </p>\n            </motion.div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {featuredTools.map((tool, index) => (\n                <motion.div\n                  key={`${tool.category.toLowerCase().replace(' tools', '')}-${tool.slug}`}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <ToolCard tool={tool} />\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Benefits Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">Why Choose Universe Tools?</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-3xl mx-auto\">\n                Built with cutting-edge technology and user privacy in mind. Every tool is optimized for performance, security, and ease of use.\n              </p>\n            </motion.div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[\n                {\n                  icon: 'fas fa-shield-alt',\n                  title: '100% Privacy',\n                  description: 'All processing happens in your browser. Your files and data never leave your device, ensuring complete privacy and security.',\n                  color: 'from-cyan-400 to-cyan-600'\n                },\n                {\n                  icon: 'fas fa-bolt',\n                  title: 'Lightning Fast',\n                  description: 'Optimized algorithms and client-side processing ensure instant results without waiting for server responses or uploads.',\n                  color: 'from-purple-400 to-purple-600'\n                },\n                {\n                  icon: 'fas fa-dollar-sign',\n                  title: 'Forever Free',\n                  description: 'All tools are completely free to use with no hidden fees, registration requirements, or usage limits.',\n                  color: 'from-green-400 to-green-600'\n                },\n                {\n                  icon: 'fas fa-mobile-alt',\n                  title: 'Mobile Optimized',\n                  description: 'Responsive design ensures all tools work perfectly on mobile devices, tablets, and desktops.',\n                  color: 'from-yellow-400 to-orange-500'\n                },\n                {\n                  icon: 'fas fa-user-shield',\n                  title: 'No Registration',\n                  description: 'Start using any tool immediately without creating accounts, providing personal information, or email verification.',\n                  color: 'from-red-400 to-red-600'\n                },\n                {\n                  icon: 'fas fa-code',\n                  title: 'Open Source',\n                  description: 'Built with transparency in mind. Source code is available for review, ensuring trust and continuous improvement.',\n                  color: 'from-blue-400 to-blue-600'\n                }\n              ].map((benefit, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"glassmorphism rounded-2xl p-8 text-center group hover:bg-slate-700/30 transition-all duration-300\"\n                >\n                  <div className={`w-16 h-16 bg-gradient-to-br ${benefit.color} rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300`}>\n                    <i className={`${benefit.icon} text-2xl text-white`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4 text-slate-100\">{benefit.title}</h3>\n                  <p className=\"text-slate-400 leading-relaxed\">{benefit.description}</p>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Testimonials Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-900/50 to-slate-950/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">What Users Say</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 max-w-3xl mx-auto\">\n                Trusted by professionals, students, and creators worldwide for their daily workflow optimization.\n              </p>\n            </motion.div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {testimonials.map((testimonial, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"glassmorphism rounded-2xl p-8 hover:bg-slate-700/30 transition-all duration-300\"\n                >\n                  <div className=\"flex items-center mb-6\">\n                    <img \n                      src={testimonial.avatar} \n                      alt={testimonial.name}\n                      className=\"w-12 h-12 rounded-full mr-4 object-cover\"\n                    />\n                    <div>\n                      <h4 className=\"font-semibold text-slate-100\">{testimonial.name}</h4>\n                      <p className=\"text-slate-400 text-sm\">{testimonial.role}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-slate-300 leading-relaxed mb-4\">\"{testimonial.content}\"</p>\n                  <div className=\"flex text-yellow-400\">\n                    {[...Array(5)].map((_, i) => (\n                      <i key={i} className=\"fas fa-star\"></i>\n                    ))}\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* FAQ Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"text-center mb-16\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">Frequently Asked Questions</span>\n              </h2>\n              <p className=\"text-xl text-slate-400\">\n                Everything you need to know about Universe Tools and our privacy-first approach.\n              </p>\n            </motion.div>\n\n            <div className=\"space-y-6\">\n              {faqs.map((faq, index) => (\n                <motion.details\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"glassmorphism p-6 rounded-2xl group\"\n                >\n                  <summary className=\"font-semibold text-slate-100 cursor-pointer list-none flex items-center justify-between text-lg\">\n                    <span>{faq.question}</span>\n                    <i className=\"fas fa-chevron-down text-slate-400 group-open:rotate-180 transition-transform duration-300\"></i>\n                  </summary>\n                  <div className=\"mt-6 text-slate-400 leading-relaxed\">\n                    <p>{faq.answer}</p>\n                  </div>\n                </motion.details>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Bottom Ad Slot */}\n        <AdSlot id=\"home-bottom\" position=\"bottom\" pageType=\"general\" />\n\n        {/* CTA Section */}\n        <section className=\"py-20 bg-gradient-to-b from-slate-900/50 to-slate-950/50\">\n          <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"glassmorphism rounded-3xl p-12\"\n            >\n              <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n                <span className=\"gradient-text\">Ready to Get Started?</span>\n              </h2>\n              <p className=\"text-xl text-slate-400 mb-8 leading-relaxed\">\n                Join thousands of professionals who trust Universe Tools for their daily workflow. \n                Start using any of our 60+ tools right now - no registration required.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"#categories\">\n                  <button className=\"bg-gradient-to-r from-cyan-400 to-purple-500 hover:from-cyan-300 hover:to-purple-400 text-white font-semibold px-8 py-4 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105\">\n                    <i className=\"fas fa-tools mr-2\"></i>\n                    Browse All Tools\n                  </button>\n                </Link>\n                <Link href=\"/pdf\">\n                  <button className=\"glassmorphism hover:bg-slate-700/50 text-slate-100 font-semibold px-8 py-4 rounded-2xl transform transition-all duration-300 hover:scale-105\">\n                    <i className=\"fas fa-bookmark mr-2\"></i>\n                    View Categories\n                  </button>\n                </Link>\n              </div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* JSON-LD for FAQs */}\n        <JsonLd \n          type=\"FAQPage\"\n          data={{\n            mainEntity: faqs.map(faq => ({\n              \"@type\": \"Question\",\n              name: faq.question,\n              acceptedAnswer: {\n                \"@type\": \"Answer\",\n                text: faq.answer\n              }\n            }))\n          }}\n        />\n      </div>\n    </>\n  );\n}\n","size_bytes":22117},"client/src/pages/LegalPage.jsx":{"content":"import { motion } from 'framer-motion';\nimport Meta from '../components/SEO/Meta';\nimport Breadcrumbs from '../components/SEO/Breadcrumbs';\n\nconst LEGAL_CONTENT = {\n  privacy: {\n    title: 'Privacy Policy',\n    lastUpdated: 'January 2024',\n    content: [\n      {\n        section: 'Information We Collect',\n        content: 'ToolsUniverse operates on a privacy-first principle. All file processing happens directly in your browser using client-side JavaScript. We do not collect, store, or have access to any files you process through our tools.'\n      },\n      {\n        section: 'Local Processing',\n        content: 'All tools on our platform process your data locally in your web browser. This means your files never leave your device, never touch our servers, and are never transmitted over the internet. This ensures complete privacy and security for your sensitive documents.'\n      },\n      {\n        section: 'Analytics and Cookies',\n        content: 'We may use analytics tools to understand how our website is used. This helps us improve our services. You can opt out of analytics tracking through our cookie consent banner. We also use cookies for essential website functionality and to remember your preferences.'\n      },\n      {\n        section: 'Third-Party Services',\n        content: 'Our website may include advertisements from third-party providers like Google AdSense. These services may use cookies and tracking technologies. Please refer to their respective privacy policies for more information about their data practices.'\n      },\n      {\n        section: 'Contact Information',\n        content: 'If you have any questions about this Privacy Policy, please contact us through our contact page. We are committed to addressing any privacy concerns promptly and transparently.'\n      }\n    ]\n  },\n  terms: {\n    title: 'Terms of Service',\n    lastUpdated: 'January 2024',\n    content: [\n      {\n        section: 'Acceptance of Terms',\n        content: 'By accessing and using ToolsUniverse, you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.'\n      },\n      {\n        section: 'Use License',\n        content: 'Permission is granted to temporarily use ToolsUniverse for personal and commercial purposes. This is the grant of a license, not a transfer of title. You may not modify or copy the materials, use the materials for any commercial purpose without written consent, or attempt to decompile or reverse engineer any software contained on the website.'\n      },\n      {\n        section: 'Service Availability',\n        content: 'We strive to keep ToolsUniverse available 24/7, but we do not guarantee uninterrupted access. We may modify or discontinue the service at any time without notice. We are not liable for any interruption of service or loss of data.'\n      },\n      {\n        section: 'User Responsibilities',\n        content: 'You are responsible for ensuring that your use of our tools complies with applicable laws and regulations. You must not use our services for any illegal or unauthorized purpose, or in a way that could damage, disable, or impair the service.'\n      },\n      {\n        section: 'Limitation of Liability',\n        content: 'ToolsUniverse and its suppliers will not be liable for any damages arising from the use or inability to use the materials on this website, even if we have been notified orally or in writing of the possibility of such damage. Some jurisdictions do not allow limitations on implied warranties or limitations of liability for consequential damages.'\n      }\n    ]\n  },\n  disclaimer: {\n    title: 'Disclaimer',\n    lastUpdated: 'January 2024',\n    content: [\n      {\n        section: 'General Disclaimer',\n        content: 'The information on ToolsUniverse is provided on an \"as is\" basis. To the fullest extent permitted by law, this Company excludes all representations, warranties, conditions and terms whether express or implied.'\n      },\n      {\n        section: 'Tool Accuracy',\n        content: 'While we strive to ensure the accuracy and reliability of our tools, we do not warrant that the tools will meet your specific requirements or that the operation of the tools will be uninterrupted or error-free. You use the tools at your own risk.'\n      },\n      {\n        section: 'File Processing',\n        content: 'All file processing happens locally in your browser. We are not responsible for any data loss, corruption, or security issues that may occur during the use of our tools. Always keep backups of important files.'\n      },\n      {\n        section: 'External Links',\n        content: 'Our website may contain links to external websites. We have no control over the content of these sites and accept no responsibility for them or for any loss or damage that may arise from your use of them.'\n      }\n    ]\n  },\n  about: {\n    title: 'About ToolsUniverse',\n    lastUpdated: 'January 2024',\n    content: [\n      {\n        section: 'Our Mission',\n        content: 'ToolsUniverse was created with a simple mission: to provide professional-grade online tools that respect user privacy and work seamlessly across all devices. We believe that powerful tools should be accessible to everyone, without compromising on security or requiring complex installations.'\n      },\n      {\n        section: 'Privacy-First Approach',\n        content: 'Unlike many online tools that require file uploads to remote servers, all our tools process data directly in your web browser. This means your files never leave your device, ensuring complete privacy and security. This approach also makes our tools faster and more reliable.'\n      },\n      {\n        section: 'Technology',\n        content: 'Our tools are built using modern web technologies including advanced JavaScript libraries, WebAssembly, and Web APIs. This allows us to provide desktop-quality functionality directly in your browser, with no downloads or installations required.'\n      },\n      {\n        section: 'Open Source',\n        content: 'We believe in transparency and community-driven development. Much of our codebase is open source, allowing developers to contribute improvements and ensuring that our tools remain trustworthy and secure.'\n      },\n      {\n        section: 'Continuous Improvement',\n        content: 'We regularly update and improve our tools based on user feedback and technological advances. Our goal is to provide the best possible experience while maintaining our commitment to privacy and ease of use.'\n      }\n    ]\n  },\n  contact: {\n    title: 'Contact Us',\n    lastUpdated: 'January 2024',\n    content: [\n      {\n        section: 'Get in Touch',\n        content: 'We would love to hear from you! Whether you have questions about our tools, suggestions for improvements, or need technical support, we are here to help.'\n      },\n      {\n        section: 'Support',\n        content: 'For technical support or questions about using our tools, please check our FAQ section first. If you cannot find the answer you are looking for, feel free to reach out to us directly.'\n      },\n      {\n        section: 'Feature Requests',\n        content: 'Have an idea for a new tool or feature? We welcome suggestions from our community. Many of our tools have been developed based on user requests, and we are always looking for ways to improve our platform.'\n      },\n      {\n        section: 'Business Inquiries',\n        content: 'For business partnerships, advertising opportunities, or other commercial inquiries, please contact us through the appropriate channels. We are open to collaborations that align with our mission of providing accessible, privacy-focused tools.'\n      },\n      {\n        section: 'Bug Reports',\n        content: 'If you encounter any issues or bugs while using our tools, please report them to us with as much detail as possible. Include information about your browser, operating system, and the specific steps that led to the issue.'\n      }\n    ]\n  }\n};\n\nexport default function LegalPage({ type }) {\n  const content = LEGAL_CONTENT[type];\n  \n  if (!content) {\n    return <div>Page not found</div>;\n  }\n\n  const breadcrumbItems = [\n    { name: 'Home', href: '/' },\n    { name: content.title, href: `/${type === 'about' || type === 'contact' ? type : `legal/${type}`}` }\n  ];\n\n  return (\n    <>\n      <Meta \n        title={`${content.title} | ToolsUniverse`}\n        description={`${content.title} for ToolsUniverse - Learn about our policies and practices.`}\n        canonical={`/${type === 'about' || type === 'contact' ? type : `legal/${type}`}`}\n      />\n\n      <div className=\"pt-16 min-h-screen bg-gradient-to-b from-slate-950/50 to-slate-900/50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"glassmorphism rounded-3xl p-8 md:p-12\"\n          >\n            <Breadcrumbs items={breadcrumbItems} />\n            \n            <header className=\"mb-12\">\n              <h1 className=\"text-4xl md:text-5xl font-bold gradient-text mb-4\">\n                {content.title}\n              </h1>\n              <p className=\"text-slate-400\">\n                Last updated: {content.lastUpdated}\n              </p>\n            </header>\n\n            <div className=\"prose prose-slate max-w-none\">\n              {content.content.map((section, index) => (\n                <motion.section\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  className=\"mb-8\"\n                >\n                  <h2 className=\"text-2xl font-semibold text-slate-100 mb-4\">\n                    {section.section}\n                  </h2>\n                  <p className=\"text-slate-300 leading-relaxed\">\n                    {section.content}\n                  </p>\n                </motion.section>\n              ))}\n            </div>\n\n            {type === 'contact' && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.5 }}\n                className=\"mt-12 p-8 glassmorphism rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold text-slate-100 mb-6\">Contact Information</h3>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-envelope text-cyan-400 text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-slate-100\">Email</div>\n                      <div className=\"text-slate-400\">contact@toolsuniverse.com</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fab fa-github text-cyan-400 text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-slate-100\">GitHub</div>\n                      <div className=\"text-slate-400\">github.com/toolsuniverse</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fab fa-twitter text-cyan-400 text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-slate-100\">Twitter</div>\n                      <div className=\"text-slate-400\">@toolsuniverse</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-clock text-cyan-400 text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-slate-100\">Response Time</div>\n                      <div className=\"text-slate-400\">Within 24 hours</div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n              className=\"mt-12 text-center\"\n            >\n              <button \n                onClick={() => window.history.back()}\n                className=\"bg-cyan-600 hover:bg-cyan-700 text-white px-8 py-4 rounded-2xl font-semibold transition-colors\"\n                data-testid=\"button-go-back\"\n              >\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Go Back\n              </button>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":12892},"client/src/pages/ToolPage.jsx":{"content":"import { useParams } from 'wouter';\nimport { getToolBySlug } from '../lib/toolsIndex';\nimport NotFound from './not-found';\n\n// PDF Tools\nimport PDFMerger from './tools/pdf/PDFMerger';\nimport PDFSplitter from './tools/pdf/PDFSplitter';\nimport PDFCompressor from './tools/pdf/PDFCompressor';\nimport PDFToWord from './tools/pdf/PDFToWord';\nimport WordToPDF from './tools/pdf/WordToPDF';\nimport PDFToJPG from './tools/pdf/PDFToJPG';\nimport JPGToPDF from './tools/pdf/JPGToPDF';\nimport PDFPasswordRemover from './tools/pdf/PDFPasswordRemover';\nimport PDFPasswordProtector from './tools/pdf/PDFPasswordProtector';\nimport PDFWatermark from './tools/pdf/PDFWatermark';\nimport PDFPageOrganizer from './tools/pdf/PDFPageOrganizer';\nimport PDFTextExtractor from './tools/pdf/PDFTextExtractor';\nimport PDFMetadataEditor from './tools/pdf/PDFMetadataEditor';\nimport PDFFormFiller from './tools/pdf/PDFFormFiller';\nimport PDFSignature from './tools/pdf/PDFSignature';\n\n// Image Tools\nimport BackgroundRemover from './tools/image/BackgroundRemover';\nimport ImageResizer from './tools/image/ImageResizer';\nimport ImageCompressor from './tools/image/ImageCompressor';\nimport ImageConverter from './tools/image/ImageConverter';\nimport ImageCropper from './tools/image/ImageCropper';\nimport ImageFilters from './tools/image/ImageFilters';\nimport ImageWatermark from './tools/image/ImageWatermark';\nimport ImageUpscaler from './tools/image/ImageUpscaler';\nimport PhotoFrameStudio from './tools/image/PhotoFrameStudio';\nimport ImageExifRemover from './tools/image/ImageExifRemover';\nimport ImageBlurTool from './tools/image/ImageBlurTool';\nimport ImageCollageMaker from './tools/image/ImageCollageMaker';\nimport QRCodeGenerator from './tools/image/QRCodeGenerator';\nimport BatchImageProcessor from './tools/image/BatchImageProcessor';\n\n// Text Tools\nimport WordCounter from './tools/text/WordCounter';\nimport CaseConverter from './tools/text/CaseConverter';\n\n// Audio Tools\nimport AudioConverter from './tools/audio/AudioConverter';\n\n// Finance Tools\nimport EMICalculator from './tools/finance/EMICalculator';\n\n// Tool component mapping\nconst TOOL_COMPONENTS = {\n  // PDF Tools\n  'pdf/merge': PDFMerger,\n  'pdf/split': PDFSplitter,\n  'pdf/compress': PDFCompressor,\n  'pdf/to-word': PDFToWord,\n  'pdf/word-to-pdf': WordToPDF,\n  'pdf/to-jpg': PDFToJPG,\n  'pdf/jpg-to-pdf': JPGToPDF,\n  'pdf/remove-password': PDFPasswordRemover,\n  'pdf/add-password': PDFPasswordProtector,\n  'pdf/watermark': PDFWatermark,\n  'pdf/organize': PDFPageOrganizer,\n  'pdf/extract-text': PDFTextExtractor,\n  'pdf/metadata': PDFMetadataEditor,\n  'pdf/form-filler': PDFFormFiller,\n  'pdf/signature': PDFSignature,\n  \n  // Image Tools\n  'image/remove-background': BackgroundRemover,\n  'image/resize': ImageResizer,\n  'image/compress': ImageCompressor,\n  'image/convert': ImageConverter,\n  'image/crop': ImageCropper,\n  'image/filters': ImageFilters,\n  'image/watermark': ImageWatermark,\n  'image/upscale': ImageUpscaler,\n  'image/frames': PhotoFrameStudio,\n  'image/remove-exif': ImageExifRemover,\n  'image/blur': ImageBlurTool,\n  'image/collage': ImageCollageMaker,\n  'image/qr-generator': QRCodeGenerator,\n  'image/batch-process': BatchImageProcessor,\n  \n  // Text Tools\n  'text/word-counter': WordCounter,\n  'text/case-converter': CaseConverter,\n  \n  // Audio Tools\n  'audio/convert': AudioConverter,\n  \n  // Finance Tools\n  'finance/emi-calculator': EMICalculator,\n};\n\nexport default function ToolPage() {\n  const params = useParams();\n  const { category, tool: toolSlug } = params;\n  \n  const tool = getToolBySlug(category, toolSlug);\n  \n  if (!tool) {\n    return <NotFound />;\n  }\n\n  const toolKey = `${category}/${toolSlug}`;\n  const ToolComponent = TOOL_COMPONENTS[toolKey];\n  \n  if (!ToolComponent) {\n    return (\n      <div className=\"pt-16 min-h-screen flex items-center justify-center\">\n        <div className=\"glassmorphism rounded-2xl p-12 text-center max-w-2xl mx-4\">\n          <i className=\"fas fa-tools text-6xl text-slate-400 mb-6\"></i>\n          <h1 className=\"text-3xl font-bold text-slate-100 mb-4\">Tool Under Development</h1>\n          <p className=\"text-slate-400 mb-8\">\n            The <strong>{tool.name}</strong> tool is currently being developed and will be available soon.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button \n              onClick={() => window.history.back()}\n              className=\"bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-xl transition-colors\"\n              data-testid=\"button-go-back\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Go Back\n            </button>\n            <a \n              href={`/${category}`}\n              className=\"glassmorphism hover:bg-slate-700/50 text-slate-100 px-6 py-3 rounded-xl transition-colors inline-flex items-center\"\n              data-testid=\"link-category\"\n            >\n              <i className=\"fas fa-th-large mr-2\"></i>\n              View All {category.charAt(0).toUpperCase() + category.slice(1)} Tools\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return <ToolComponent />;\n}\n","size_bytes":5171},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/fileProcessing.js":{"content":"import { FILE_SIZE_LIMITS, SUPPORTED_FILE_TYPES, ERROR_MESSAGES } from '../lib/constants';\n\n/**\n * Validate file before processing\n * @param {File} file - File object to validate\n * @param {string} category - File category (image, pdf, audio, etc.)\n * @returns {Object} - Validation result\n */\nexport function validateFile(file, category = 'general') {\n  const errors = [];\n  \n  if (!file) {\n    errors.push('No file selected');\n    return { isValid: false, errors };\n  }\n  \n  // Check file size\n  const sizeLimit = FILE_SIZE_LIMITS[category] || FILE_SIZE_LIMITS.general;\n  if (file.size > sizeLimit) {\n    errors.push(`${ERROR_MESSAGES.fileSize}. Maximum allowed: ${formatFileSize(sizeLimit)}`);\n  }\n  \n  // Check file type\n  const allowedTypes = SUPPORTED_FILE_TYPES[category];\n  if (allowedTypes && !allowedTypes.includes(file.type)) {\n    errors.push(`${ERROR_MESSAGES.fileType}. Supported formats: ${allowedTypes.join(', ')}`);\n  }\n  \n  // Check if file is empty\n  if (file.size === 0) {\n    errors.push('File is empty');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    fileInfo: {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      lastModified: file.lastModified\n    }\n  };\n}\n\n/**\n * Format file size for display\n * @param {number} bytes - File size in bytes\n * @returns {string} - Formatted file size\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Read file as data URL\n * @param {File} file - File to read\n * @returns {Promise<string>} - Data URL\n */\nexport function readFileAsDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => resolve(e.target.result);\n    reader.onerror = (e) => reject(new Error('Failed to read file'));\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Read file as array buffer\n * @param {File} file - File to read\n * @returns {Promise<ArrayBuffer>} - Array buffer\n */\nexport function readFileAsArrayBuffer(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => resolve(e.target.result);\n    reader.onerror = (e) => reject(new Error('Failed to read file'));\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\n * Read file as text\n * @param {File} file - File to read\n * @param {string} encoding - Text encoding (default: UTF-8)\n * @returns {Promise<string>} - File content as text\n */\nexport function readFileAsText(file, encoding = 'UTF-8') {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => resolve(e.target.result);\n    reader.onerror = (e) => reject(new Error('Failed to read file'));\n    reader.readAsText(file, encoding);\n  });\n}\n\n/**\n * Download blob as file\n * @param {Blob} blob - Blob to download\n * @param {string} filename - Download filename\n */\nexport function downloadBlob(blob, filename) {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Convert image to different format\n * @param {File} file - Image file\n * @param {string} format - Target format (jpeg, png, webp)\n * @param {number} quality - Image quality (0-1)\n * @returns {Promise<Blob>} - Converted image blob\n */\nexport function convertImageFormat(file, format = 'jpeg', quality = 0.9) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Handle PNG transparency for JPEG conversion\n      if (format === 'jpeg') {\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n      \n      ctx.drawImage(img, 0, 0);\n      \n      canvas.toBlob(\n        (blob) => resolve(blob),\n        `image/${format}`,\n        quality\n      );\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Resize image\n * @param {File} file - Image file\n * @param {Object} dimensions - Target dimensions {width, height}\n * @param {boolean} maintainAspectRatio - Whether to maintain aspect ratio\n * @returns {Promise<Blob>} - Resized image blob\n */\nexport function resizeImage(file, dimensions, maintainAspectRatio = true) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      let { width, height } = dimensions;\n      \n      if (maintainAspectRatio) {\n        const aspectRatio = img.width / img.height;\n        \n        if (width && !height) {\n          height = width / aspectRatio;\n        } else if (height && !width) {\n          width = height * aspectRatio;\n        } else if (width && height) {\n          const targetAspectRatio = width / height;\n          if (aspectRatio > targetAspectRatio) {\n            height = width / aspectRatio;\n          } else {\n            width = height * aspectRatio;\n          }\n        }\n      }\n      \n      canvas.width = width || img.width;\n      canvas.height = height || img.height;\n      \n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      \n      canvas.toBlob((blob) => resolve(blob));\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Compress image\n * @param {File} file - Image file\n * @param {number} quality - Compression quality (0-1)\n * @param {number} maxWidth - Maximum width\n * @param {number} maxHeight - Maximum height\n * @returns {Promise<Blob>} - Compressed image blob\n */\nexport function compressImage(file, quality = 0.8, maxWidth = 1920, maxHeight = 1080) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      // Calculate new dimensions\n      let { width, height } = img;\n      \n      if (width > maxWidth || height > maxHeight) {\n        const aspectRatio = width / height;\n        \n        if (width > height) {\n          width = maxWidth;\n          height = width / aspectRatio;\n        } else {\n          height = maxHeight;\n          width = height * aspectRatio;\n        }\n      }\n      \n      canvas.width = width;\n      canvas.height = height;\n      \n      ctx.drawImage(img, 0, 0, width, height);\n      \n      canvas.toBlob(\n        (blob) => resolve(blob),\n        file.type,\n        quality\n      );\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Extract text from image using OCR (placeholder for future implementation)\n * @param {File} file - Image file\n * @returns {Promise<string>} - Extracted text\n */\nexport async function extractTextFromImage(file) {\n  // Placeholder for OCR implementation\n  // Would use libraries like Tesseract.js\n  throw new Error('OCR functionality not implemented yet');\n}\n\n/**\n * Create image thumbnail\n * @param {File} file - Image file\n * @param {number} size - Thumbnail size (square)\n * @returns {Promise<Blob>} - Thumbnail blob\n */\nexport function createImageThumbnail(file, size = 150) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      canvas.width = size;\n      canvas.height = size;\n      \n      // Calculate crop area to maintain aspect ratio\n      const sourceSize = Math.min(img.width, img.height);\n      const sourceX = (img.width - sourceSize) / 2;\n      const sourceY = (img.height - sourceSize) / 2;\n      \n      ctx.drawImage(\n        img,\n        sourceX, sourceY, sourceSize, sourceSize,\n        0, 0, size, size\n      );\n      \n      canvas.toBlob((blob) => resolve(blob));\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Get image metadata\n * @param {File} file - Image file\n * @returns {Promise<Object>} - Image metadata\n */\nexport function getImageMetadata(file) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    img.onload = () => {\n      resolve({\n        width: img.width,\n        height: img.height,\n        aspectRatio: img.width / img.height,\n        size: file.size,\n        type: file.type,\n        name: file.name,\n        lastModified: new Date(file.lastModified)\n      });\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Check browser support for file operations\n * @returns {Object} - Browser support information\n */\nexport function checkBrowserSupport() {\n  return {\n    fileAPI: !!(window.File && window.FileReader && window.FileList && window.Blob),\n    canvas: !!document.createElement('canvas').getContext,\n    webGL: !!document.createElement('canvas').getContext('webgl'),\n    webWorkers: !!window.Worker,\n    webAssembly: !!window.WebAssembly,\n    mediaRecorder: !!window.MediaRecorder,\n    speechSynthesis: !!window.speechSynthesis,\n    speechRecognition: !!(window.SpeechRecognition || window.webkitSpeechRecognition)\n  };\n}\n\n/**\n * Generate unique filename\n * @param {string} originalName - Original filename\n * @param {string} suffix - Suffix to add\n * @param {string} extension - New extension (optional)\n * @returns {string} - Unique filename\n */\nexport function generateUniqueFilename(originalName, suffix = '', extension = null) {\n  const timestamp = Date.now();\n  const baseName = originalName.split('.').slice(0, -1).join('.');\n  const originalExtension = originalName.split('.').pop();\n  const finalExtension = extension || originalExtension;\n  \n  return `${baseName}${suffix ? '_' + suffix : ''}_${timestamp}.${finalExtension}`;\n}\n","size_bytes":10342},"client/src/utils/seo.js":{"content":"import { SEO_DEFAULTS } from '../lib/constants';\n\n/**\n * Generate SEO-optimized title\n * @param {string} title - Page title\n * @param {boolean} useTemplate - Whether to use title template\n * @returns {string} - Formatted title\n */\nexport function generateTitle(title, useTemplate = true) {\n  if (!title) return SEO_DEFAULTS.defaultTitle;\n  \n  if (useTemplate && !title.includes('ToolsUniverse')) {\n    return SEO_DEFAULTS.titleTemplate.replace('%s', title);\n  }\n  \n  return title;\n}\n\n/**\n * Generate meta description\n * @param {string} description - Custom description\n * @param {string} fallback - Fallback description\n * @returns {string} - Optimized description\n */\nexport function generateDescription(description, fallback = SEO_DEFAULTS.description) {\n  if (!description) return fallback;\n  \n  // Ensure description is within optimal length (150-160 characters)\n  if (description.length > 160) {\n    return description.substring(0, 157) + '...';\n  }\n  \n  return description;\n}\n\n/**\n * Generate keywords string\n * @param {string|Array} keywords - Keywords array or string\n * @param {Array} additionalKeywords - Additional keywords to append\n * @returns {string} - Comma-separated keywords\n */\nexport function generateKeywords(keywords, additionalKeywords = []) {\n  let keywordArray = [];\n  \n  if (Array.isArray(keywords)) {\n    keywordArray = keywords;\n  } else if (typeof keywords === 'string') {\n    keywordArray = keywords.split(',').map(k => k.trim());\n  }\n  \n  // Add additional keywords\n  keywordArray = [...keywordArray, ...additionalKeywords];\n  \n  // Remove duplicates and filter empty strings\n  keywordArray = [...new Set(keywordArray)].filter(k => k.length > 0);\n  \n  // Limit to 10-15 keywords for optimal SEO\n  return keywordArray.slice(0, 15).join(', ');\n}\n\n/**\n * Generate canonical URL\n * @param {string} path - Page path\n * @param {string} baseUrl - Base URL\n * @returns {string} - Canonical URL\n */\nexport function generateCanonicalUrl(path, baseUrl = window.location.origin) {\n  // Remove leading slash if present\n  const cleanPath = path.startsWith('/') ? path.slice(1) : path;\n  \n  // Ensure base URL doesn't end with slash\n  const cleanBaseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;\n  \n  return cleanPath ? `${cleanBaseUrl}/${cleanPath}` : cleanBaseUrl;\n}\n\n/**\n * Generate Open Graph image URL\n * @param {string} imagePath - Custom image path\n * @param {string} fallback - Fallback image\n * @returns {string} - Complete image URL\n */\nexport function generateOgImage(imagePath, fallback = SEO_DEFAULTS.ogImage) {\n  if (!imagePath) return fallback;\n  \n  // If it's already a complete URL, return as is\n  if (imagePath.startsWith('http')) {\n    return imagePath;\n  }\n  \n  // Generate complete URL\n  return `${window.location.origin}${imagePath.startsWith('/') ? '' : '/'}${imagePath}`;\n}\n\n/**\n * Generate structured data for tools\n * @param {Object} tool - Tool information\n * @param {string} category - Tool category\n * @returns {Object} - Structured data object\n */\nexport function generateToolStructuredData(tool, category) {\n  const baseUrl = window.location.origin;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'SoftwareApplication',\n    'name': tool.name,\n    'description': tool.description,\n    'url': `${baseUrl}${tool.path}`,\n    'applicationCategory': 'ProductivityApplication',\n    'operatingSystem': 'Web',\n    'offers': {\n      '@type': 'Offer',\n      'price': '0',\n      'priceCurrency': 'USD'\n    },\n    'featureList': tool.keywords ? tool.keywords.split(', ') : [],\n    'provider': {\n      '@type': 'Organization',\n      'name': 'ToolsUniverse',\n      'url': baseUrl\n    },\n    'softwareVersion': '1.0.0',\n    'datePublished': '2024-01-01',\n    'dateModified': new Date().toISOString().split('T')[0],\n    'inLanguage': 'en',\n    'isAccessibleForFree': true\n  };\n}\n\n/**\n * Generate structured data for categories\n * @param {string} categoryName - Category name\n * @param {Array} tools - Array of tools in category\n * @returns {Object} - Structured data object\n */\nexport function generateCategoryStructuredData(categoryName, tools) {\n  const baseUrl = window.location.origin;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    'name': categoryName,\n    'url': `${baseUrl}/${categoryName.toLowerCase()}`,\n    'mainEntity': {\n      '@type': 'ItemList',\n      'numberOfItems': tools.length,\n      'itemListElement': tools.map((tool, index) => ({\n        '@type': 'SoftwareApplication',\n        'position': index + 1,\n        'name': tool.name,\n        'description': tool.description,\n        'url': `${baseUrl}${tool.path}`\n      }))\n    }\n  };\n}\n\n/**\n * Generate FAQ structured data\n * @param {Array} faqs - Array of FAQ objects with question and answer\n * @returns {Object} - FAQ structured data\n */\nexport function generateFAQStructuredData(faqs) {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    'mainEntity': faqs.map(faq => ({\n      '@type': 'Question',\n      'name': faq.question,\n      'acceptedAnswer': {\n        '@type': 'Answer',\n        'text': faq.answer\n      }\n    }))\n  };\n}\n\n/**\n * Generate breadcrumb structured data\n * @param {Array} breadcrumbs - Array of breadcrumb objects\n * @returns {Object} - Breadcrumb structured data\n */\nexport function generateBreadcrumbStructuredData(breadcrumbs) {\n  const baseUrl = window.location.origin;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    'itemListElement': breadcrumbs.map((crumb, index) => ({\n      '@type': 'ListItem',\n      'position': index + 1,\n      'name': crumb.name,\n      'item': `${baseUrl}${crumb.href}`\n    }))\n  };\n}\n\n/**\n * Extract and optimize meta tags from content\n * @param {string} content - HTML content or text\n * @returns {Object} - Extracted meta information\n */\nexport function extractMetaFromContent(content) {\n  // Extract first sentence or paragraph for description\n  const sentences = content.split(/[.!?]+/);\n  const firstSentence = sentences[0]?.trim();\n  \n  // Extract keywords from content (basic implementation)\n  const words = content.toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 3)\n    .slice(0, 10);\n  \n  const uniqueWords = [...new Set(words)];\n  \n  return {\n    description: generateDescription(firstSentence),\n    keywords: uniqueWords.join(', '),\n    wordCount: content.split(/\\s+/).length\n  };\n}\n\n/**\n * Validate and optimize URL for SEO\n * @param {string} url - URL to validate\n * @returns {Object} - Validation result and optimized URL\n */\nexport function validateAndOptimizeUrl(url) {\n  const errors = [];\n  let optimizedUrl = url;\n  \n  // Check URL length (should be under 255 characters)\n  if (url.length > 255) {\n    errors.push('URL too long (>255 characters)');\n  }\n  \n  // Check for special characters that should be encoded\n  const specialChars = /[^a-zA-Z0-9\\-._~:/?#[\\]@!$&'()*+,;=%]/g;\n  if (specialChars.test(url)) {\n    optimizedUrl = encodeURI(url);\n  }\n  \n  // Check for consecutive slashes\n  optimizedUrl = optimizedUrl.replace(/\\/+/g, '/');\n  \n  // Ensure lowercase (except for query parameters)\n  const [path, query] = optimizedUrl.split('?');\n  optimizedUrl = path.toLowerCase() + (query ? `?${query}` : '');\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    optimized: optimizedUrl,\n    improvements: optimizedUrl !== url ? ['URL optimized for SEO'] : []\n  };\n}\n\n/**\n * Generate social media sharing URLs\n * @param {Object} pageData - Page data including title, description, and URL\n * @returns {Object} - Social media sharing URLs\n */\nexport function generateSocialSharingUrls(pageData) {\n  const { title, description, url, hashtags = [] } = pageData;\n  const encodedTitle = encodeURIComponent(title);\n  const encodedDescription = encodeURIComponent(description);\n  const encodedUrl = encodeURIComponent(url);\n  const encodedHashtags = hashtags.map(tag => encodeURIComponent(tag)).join(',');\n  \n  return {\n    twitter: `https://twitter.com/intent/tweet?text=${encodedTitle}&url=${encodedUrl}&hashtags=${encodedHashtags}`,\n    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,\n    linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`,\n    whatsapp: `https://wa.me/?text=${encodedTitle}%20${encodedUrl}`,\n    telegram: `https://t.me/share/url?url=${encodedUrl}&text=${encodedTitle}`,\n    reddit: `https://reddit.com/submit?url=${encodedUrl}&title=${encodedTitle}`\n  };\n}\n","size_bytes":8491},"client/src/components/Ads/AdSlot.jsx":{"content":"import { useEffect, useRef } from 'react';\nimport { APPROVAL_PENDING, resolveProvider } from '../../lib/adsConfig';\n\nexport default function AdSlot({ id, position, variant = 'default', pageType = 'general' }) {\n  const adRef = useRef(null);\n  const initialized = useRef(false);\n\n  useEffect(() => {\n    if (APPROVAL_PENDING) {\n      return;\n    }\n\n    const provider = resolveProvider(pageType, position);\n    if (!provider || initialized.current) {\n      return;\n    }\n\n    const loadAd = async () => {\n      try {\n        if (provider === 'adsense') {\n          await loadAdSenseAd();\n        } else if (provider === 'medianet') {\n          await loadMediaNetAd();\n        } else if (provider === 'propeller') {\n          await loadPropellerAd();\n        }\n        initialized.current = true;\n      } catch (error) {\n        console.error('Failed to load ad:', error);\n      }\n    };\n\n    loadAd();\n  }, [id, position, pageType]);\n\n  const loadAdSenseAd = async () => {\n    if (!window.adsbygoogle) {\n      return;\n    }\n\n    const adElement = adRef.current;\n    if (!adElement) return;\n\n    try {\n      (window.adsbygoogle = window.adsbygoogle || []).push({});\n    } catch (error) {\n      console.error('AdSense error:', error);\n    }\n  };\n\n  const loadMediaNetAd = async () => {\n    // Media.net implementation\n    if (!window._mNHandle) {\n      // Load Media.net script if not already loaded\n      const script = document.createElement('script');\n      script.src = 'https://contextual.media.net/dmedianet.js';\n      script.async = true;\n      document.head.appendChild(script);\n    }\n    // Media.net ad initialization would go here\n  };\n\n  const loadPropellerAd = async () => {\n    // Propeller Ads implementation\n    // Propeller ad initialization would go here\n  };\n\n  // Don't render if approval is pending\n  if (APPROVAL_PENDING) {\n    return null;\n  }\n\n  const getAdDimensions = () => {\n    switch (position) {\n      case 'top':\n      case 'bottom':\n        return { width: '728', height: '90' };\n      case 'inline':\n        return { width: '970', height: '250' };\n      case 'sidebar':\n        return { width: '300', height: '250' };\n      default:\n        return { width: '728', height: '90' };\n    }\n  };\n\n  const dimensions = getAdDimensions();\n  const provider = resolveProvider('general', position);\n\n  if (!provider) {\n    return null;\n  }\n\n  return (\n    <div className=\"ad-slot-container my-8\" data-ad-position={position}>\n      <div className=\"text-center text-xs text-slate-500 mb-2\">Advertisement</div>\n      <div \n        className=\"mx-auto flex items-center justify-center\"\n        style={{ \n          maxWidth: `${dimensions.width}px`,\n          minHeight: `${dimensions.height}px`\n        }}\n      >\n        {provider === 'adsense' && (\n          <ins\n            ref={adRef}\n            className=\"adsbygoogle\"\n            style={{\n              display: 'inline-block',\n              width: `${dimensions.width}px`,\n              height: `${dimensions.height}px`\n            }}\n            data-ad-client={import.meta.env.VITE_ADSENSE_CLIENT}\n            data-ad-slot={import.meta.env[`VITE_ADSENSE_SLOT_${position.toUpperCase()}`]}\n            data-ad-format=\"auto\"\n            data-full-width-responsive=\"true\"\n          />\n        )}\n        \n        {provider === 'medianet' && (\n          <div\n            ref={adRef}\n            id={`media-net-${id}`}\n            className=\"media-net-ad\"\n            style={{\n              width: `${dimensions.width}px`,\n              height: `${dimensions.height}px`\n            }}\n          />\n        )}\n        \n        {provider === 'propeller' && (\n          <div\n            ref={adRef}\n            id={`propeller-${id}`}\n            className=\"propeller-ad\"\n            style={{\n              width: `${dimensions.width}px`,\n              height: `${dimensions.height}px`\n            }}\n          />\n        )}\n        \n        {/* Fallback for when no ads load */}\n        {!provider && (\n          <div \n            className=\"glassmorphism-dark rounded-xl flex items-center justify-center text-slate-500 text-sm\"\n            style={{\n              width: `${dimensions.width}px`,\n              height: `${dimensions.height}px`\n            }}\n          >\n            <div className=\"text-center\">\n              <i className=\"fas fa-ad text-2xl mb-2\"></i>\n              <div>Advertisement Space</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4460},"client/src/components/Ads/AutoAdsScript.jsx":{"content":"import { useEffect } from 'react';\n\nexport default function AutoAdsScript() {\n  useEffect(() => {\n    const enabled = import.meta.env.VITE_ADSENSE_ENABLED === 'true';\n    const pending = import.meta.env.VITE_APPROVAL_PENDING === 'true';\n    const client = import.meta.env.VITE_ADSENSE_CLIENT || '';\n\n    if (!enabled || pending || !client) {\n      return;\n    }\n\n    // Load AdSense script\n    const script = document.createElement('script');\n    script.async = true;\n    script.crossOrigin = 'anonymous';\n    script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${client}`;\n    \n    script.onload = () => {\n      console.log('AdSense Auto Ads loaded');\n    };\n\n    script.onerror = () => {\n      console.error('Failed to load AdSense Auto Ads');\n    };\n\n    document.head.appendChild(script);\n\n    return () => {\n      // Cleanup script on unmount\n      if (document.head.contains(script)) {\n        document.head.removeChild(script);\n      }\n    };\n  }, []);\n\n  return null;\n}\n","size_bytes":1010},"client/src/components/Layout/CookieBanner.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\n\nexport default function CookieBanner() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isClosing, setIsClosing] = useState(false);\n\n  useEffect(() => {\n    // Check if user has already made a choice\n    const consent = localStorage.getItem('cookieConsent');\n    if (!consent) {\n      // Show banner after a short delay\n      setTimeout(() => setIsVisible(true), 2000);\n    }\n  }, []);\n\n  const handleAccept = () => {\n    localStorage.setItem('cookieConsent', 'accepted');\n    // Initialize analytics and ad scripts here\n    console.log('Cookies accepted - Initialize tracking');\n    closeBanner();\n  };\n\n  const handleDecline = () => {\n    localStorage.setItem('cookieConsent', 'declined');\n    console.log('Cookies declined - Disable tracking');\n    closeBanner();\n  };\n\n  const closeBanner = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsVisible(false);\n      setIsClosing(false);\n    }, 300);\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div \n      className={`fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:max-w-md glassmorphism-dark rounded-2xl p-6 z-50 transition-all duration-300 ${\n        isClosing ? 'transform translate-y-full opacity-0' : 'animate-slide-up'\n      }`}\n      role=\"banner\"\n      aria-label=\"Cookie consent\"\n    >\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"flex-shrink-0\">\n          <i className=\"fas fa-cookie-bite text-yellow-400 text-2xl\"></i>\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-slate-100 mb-2\">Cookie Consent</h3>\n          <p className=\"text-sm text-slate-300 mb-4 leading-relaxed\">\n            We use cookies to enhance your experience and show relevant ads. By continuing, you agree to our \n            <Link href=\"/legal/privacy\" className=\"text-cyan-400 hover:text-cyan-300 ml-1\">\n              Privacy Policy\n            </Link>.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <button\n              onClick={handleAccept}\n              className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-400/50\"\n            >\n              Accept All\n            </button>\n            <button\n              onClick={handleDecline}\n              className=\"bg-slate-700 hover:bg-slate-600 text-slate-300 px-4 py-2 rounded-lg text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-slate-500/50\"\n            >\n              Essential Only\n            </button>\n          </div>\n        </div>\n        <button\n          onClick={closeBanner}\n          className=\"flex-shrink-0 text-slate-400 hover:text-white transition-colors p-1\"\n          aria-label=\"Close banner\"\n        >\n          <i className=\"fas fa-times\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2989},"client/src/components/Layout/Footer.jsx":{"content":"import { Link } from 'wouter';\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n  \n  const footerSections = [\n    {\n      title: 'Tool Categories',\n      links: [\n        { name: 'PDF Tools', href: '/pdf' },\n        { name: 'Image Tools', href: '/image' },\n        { name: 'Audio Tools', href: '/audio' },\n        { name: 'Text Tools', href: '/text' },\n        { name: 'Productivity', href: '/productivity' },\n        { name: 'Finance Tools', href: '/finance' }\n      ]\n    },\n    {\n      title: 'Popular Tools',\n      links: [\n        { name: 'PDF Merger', href: '/pdf/merge' },\n        { name: 'Background Remover', href: '/image/remove-background' },\n        { name: 'Word Counter', href: '/text/word-counter' },\n        { name: 'EMI Calculator', href: '/finance/emi-calculator' },\n        { name: 'Audio Converter', href: '/audio/convert' },\n        { name: 'Image Resizer', href: '/image/resize' }\n      ]\n    },\n    {\n      title: 'Resources',\n      links: [\n        { name: 'Getting Started', href: '/getting-started' },\n        { name: 'API Documentation', href: '/api-docs' },\n        { name: 'Tutorials', href: '/tutorials' },\n        { name: 'Blog', href: '/blog' },\n        { name: 'Changelog', href: '/changelog' },\n        { name: 'Status Page', href: '/status' }\n      ]\n    },\n    {\n      title: 'Legal',\n      links: [\n        { name: 'Privacy Policy', href: '/legal/privacy' },\n        { name: 'Terms of Service', href: '/legal/terms' },\n        { name: 'Cookie Policy', href: '/legal/cookies' },\n        { name: 'Disclaimer', href: '/legal/disclaimer' },\n        { name: 'Contact', href: '/contact' },\n        { name: 'About Us', href: '/about' }\n      ]\n    }\n  ];\n\n  const socialLinks = [\n    { name: 'GitHub', icon: 'fab fa-github', href: 'https://github.com/toolsuniverse' },\n    { name: 'Twitter', icon: 'fab fa-twitter', href: 'https://twitter.com/toolsuniverse' },\n    { name: 'LinkedIn', icon: 'fab fa-linkedin', href: 'https://linkedin.com/company/toolsuniverse' },\n    { name: 'Discord', icon: 'fab fa-discord', href: 'https://discord.gg/toolsuniverse' }\n  ];\n\n  return (\n    <footer className=\"bg-gradient-to-b from-slate-900 to-slate-950 border-t border-slate-800 py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8 mb-12\">\n          {/* Brand Column */}\n          <div className=\"lg:col-span-1\">\n            <Link href=\"/\" className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center shadow-lg\">\n                <i className=\"fas fa-tools text-white text-lg\"></i>\n              </div>\n              <span className=\"text-xl font-bold gradient-text\">ToolsUniverse</span>\n            </Link>\n            <p className=\"text-slate-400 leading-relaxed mb-6 text-sm\">\n              The ultimate collection of professional online tools for PDF, Image, Audio, Text, and Finance operations. \n              Privacy-first, lightning-fast, and forever free.\n            </p>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social) => (\n                <a\n                  key={social.name}\n                  href={social.href}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"w-10 h-10 glassmorphism-dark rounded-lg flex items-center justify-center hover:bg-slate-700/50 transition-colors duration-200\"\n                  aria-label={social.name}\n                >\n                  <i className={`${social.icon} text-slate-400 hover:text-cyan-400 transition-colors`}></i>\n                </a>\n              ))}\n            </div>\n          </div>\n\n          {/* Footer Sections */}\n          {footerSections.map((section) => (\n            <div key={section.title}>\n              <h4 className=\"text-slate-100 font-semibold mb-6\">{section.title}</h4>\n              <ul className=\"space-y-3\">\n                {section.links.map((link) => (\n                  <li key={link.name}>\n                    <Link \n                      href={link.href} \n                      className=\"text-slate-400 hover:text-cyan-400 transition-colors duration-200 text-sm\"\n                    >\n                      {link.name}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Footer Bottom */}\n        <div className=\"border-t border-slate-800 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <div className=\"text-slate-400 text-sm\">\n              ¬© {currentYear} ToolsUniverse. All rights reserved. Made with ‚ù§Ô∏è for productivity.\n            </div>\n            <div className=\"text-slate-400 text-sm flex items-center space-x-4\">\n              <span>Last updated: January 2024</span>\n              <span className=\"hidden md:inline\">‚Ä¢</span>\n              <span>Version 1.0</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5189},"client/src/components/Layout/Header.jsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useSearch } from '../../hooks/useSearch';\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const { searchQuery, setSearchQuery, searchResults, isSearching } = useSearch();\n  const searchRef = useRef(null);\n\n  const toggleTheme = () => {\n    const html = document.documentElement;\n    const isLight = html.classList.contains('light');\n    \n    if (isLight) {\n      html.classList.remove('light');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      html.classList.add('light');\n      localStorage.setItem('theme', 'light');\n    }\n  };\n\n  // Close search when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (searchRef.current && !searchRef.current.contains(event.target)) {\n        setIsSearchOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const navigation = [\n    { name: 'Home', href: '/' },\n    { \n      name: 'Tools', \n      href: '#',\n      submenu: [\n        { name: 'PDF Tools', href: '/pdf', icon: 'fas fa-file-pdf', color: 'text-red-400' },\n        { name: 'Image Tools', href: '/image', icon: 'fas fa-image', color: 'text-green-400' },\n        { name: 'Audio Tools', href: '/audio', icon: 'fas fa-music', color: 'text-purple-400' },\n        { name: 'Text Tools', href: '/text', icon: 'fas fa-font', color: 'text-blue-400' },\n        { name: 'Productivity', href: '/productivity', icon: 'fas fa-calculator', color: 'text-yellow-400' },\n        { name: 'Finance', href: '/finance', icon: 'fas fa-chart-line', color: 'text-emerald-400' }\n      ]\n    },\n    { name: 'About', href: '/about' },\n    { name: 'Contact', href: '/contact' }\n  ];\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-40 glass-nav border-b border-slate-700/50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center shadow-lg\">\n              <i className=\"fas fa-tools text-white text-lg\"></i>\n            </div>\n            <span className=\"text-xl font-bold gradient-text\">ToolsUniverse</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\" aria-label=\"Main navigation\">\n            {navigation.map((item) => (\n              <div key={item.name} className=\"relative group\">\n                {item.submenu ? (\n                  <>\n                    <button className=\"text-slate-300 hover:text-cyan-400 transition-colors duration-200 font-medium flex items-center space-x-1\">\n                      <span>{item.name}</span>\n                      <i className=\"fas fa-chevron-down text-xs\"></i>\n                    </button>\n                    {/* Dropdown */}\n                    <div className=\"absolute top-full left-0 mt-2 w-64 glassmorphism-dark rounded-2xl shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 p-2\">\n                      {item.submenu.map((subItem) => (\n                        <Link \n                          key={subItem.name}\n                          href={subItem.href} \n                          className=\"flex items-center space-x-3 px-4 py-3 hover:bg-slate-700/50 rounded-xl transition-colors\"\n                        >\n                          <i className={`${subItem.icon} ${subItem.color}`}></i>\n                          <span className=\"text-slate-300 hover:text-white\">{subItem.name}</span>\n                        </Link>\n                      ))}\n                    </div>\n                  </>\n                ) : (\n                  <Link \n                    href={item.href} \n                    className={`transition-colors duration-200 font-medium ${\n                      location === item.href \n                        ? 'text-cyan-400' \n                        : 'text-slate-300 hover:text-cyan-400'\n                    }`}\n                  >\n                    {item.name}\n                  </Link>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Search & Theme Toggle */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Search */}\n            <div className=\"relative\" ref={searchRef}>\n              <button \n                onClick={() => setIsSearchOpen(!isSearchOpen)}\n                className=\"p-2 text-slate-300 hover:text-cyan-400 transition-colors duration-200 md:hidden\"\n                aria-label=\"Toggle search\"\n              >\n                <i className=\"fas fa-search text-lg\"></i>\n              </button>\n              \n              <div className={`${isSearchOpen ? 'block' : 'hidden'} md:block absolute md:relative top-full md:top-auto right-0 md:right-auto mt-2 md:mt-0 w-80 md:w-64`}>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search tools...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full bg-slate-800/90 border border-slate-600 rounded-xl px-4 py-2 pl-10 text-slate-100 placeholder-slate-400 focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all\"\n                />\n                <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\"></i>\n                \n                {/* Search Results */}\n                {searchQuery && searchResults.length > 0 && (\n                  <div className=\"absolute top-full left-0 right-0 mt-2 glassmorphism-dark rounded-xl shadow-xl max-h-80 overflow-y-auto p-2\">\n                    {searchResults.map((tool) => (\n                      <Link\n                        key={tool.slug}\n                        href={tool.path}\n                        className=\"flex items-center space-x-3 px-4 py-3 hover:bg-slate-700/50 rounded-lg transition-colors\"\n                        onClick={() => {\n                          setIsSearchOpen(false);\n                          setSearchQuery('');\n                        }}\n                      >\n                        <i className={`${tool.icon} ${tool.color} text-lg`}></i>\n                        <div>\n                          <div className=\"font-medium text-slate-100\">{tool.name}</div>\n                          <div className=\"text-xs text-slate-400\">{tool.category}</div>\n                        </div>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n                \n                {searchQuery && searchResults.length === 0 && !isSearching && (\n                  <div className=\"absolute top-full left-0 right-0 mt-2 glassmorphism-dark rounded-xl shadow-xl p-4 text-center\">\n                    <div className=\"text-slate-400\">No tools found</div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Theme Toggle */}\n            <button \n              onClick={toggleTheme}\n              className=\"p-2 text-slate-300 hover:text-cyan-400 transition-colors duration-200\"\n              aria-label=\"Toggle theme\"\n            >\n              <i className=\"fas fa-moon text-lg\"></i>\n            </button>\n\n            {/* Mobile Menu Button */}\n            <button \n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"md:hidden p-2 text-slate-300 hover:text-cyan-400 transition-colors duration-200\"\n              aria-label=\"Toggle menu\"\n            >\n              <i className={`fas ${isMenuOpen ? 'fa-times' : 'fa-bars'} text-lg`}></i>\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden glassmorphism-dark rounded-2xl m-4 p-4\">\n            <nav className=\"space-y-3\">\n              {navigation.map((item) => (\n                <div key={item.name}>\n                  {item.submenu ? (\n                    <>\n                      <div className=\"font-medium text-slate-300 px-3 py-2\">{item.name}</div>\n                      <div className=\"ml-4 space-y-2\">\n                        {item.submenu.map((subItem) => (\n                          <Link\n                            key={subItem.name}\n                            href={subItem.href}\n                            className=\"flex items-center space-x-3 px-3 py-2 text-slate-300 hover:text-cyan-400 hover:bg-slate-700/50 rounded-lg transition-colors\"\n                            onClick={() => setIsMenuOpen(false)}\n                          >\n                            <i className={`${subItem.icon} ${subItem.color}`}></i>\n                            <span>{subItem.name}</span>\n                          </Link>\n                        ))}\n                      </div>\n                    </>\n                  ) : (\n                    <Link\n                      href={item.href}\n                      className=\"block px-3 py-2 text-slate-300 hover:text-cyan-400 hover:bg-slate-700/50 rounded-lg transition-colors\"\n                      onClick={() => setIsMenuOpen(false)}\n                    >\n                      {item.name}\n                    </Link>\n                  )}\n                </div>\n              ))}\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":9816},"client/src/components/SEO/Breadcrumbs.jsx":{"content":"import { Link } from 'wouter';\n\nexport default function Breadcrumbs({ items }) {\n  return (\n    <nav className=\"flex text-sm text-slate-400 mb-4\" aria-label=\"Breadcrumb\">\n      {items.map((item, index) => (\n        <div key={index} className=\"flex items-center\">\n          {index > 0 && (\n            <i className=\"fas fa-chevron-right text-xs mx-2\"></i>\n          )}\n          {index === items.length - 1 ? (\n            <span className=\"text-slate-300\" aria-current=\"page\">{item.name}</span>\n          ) : (\n            <Link \n              href={item.href} \n              className=\"hover:text-cyan-400 transition-colors duration-200\"\n            >\n              {item.name}\n            </Link>\n          )}\n        </div>\n      ))}\n    </nav>\n  );\n}\n","size_bytes":754},"client/src/components/SEO/JsonLd.jsx":{"content":"import { useEffect } from 'react';\n\nexport default function JsonLd({ type, data }) {\n  useEffect(() => {\n    const structuredData = {\n      '@context': 'https://schema.org',\n      '@type': type,\n      ...data\n    };\n\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.textContent = JSON.stringify(structuredData);\n    script.id = `jsonld-${type}`;\n\n    // Remove existing script with same ID\n    const existing = document.getElementById(script.id);\n    if (existing) {\n      document.head.removeChild(existing);\n    }\n\n    document.head.appendChild(script);\n\n    return () => {\n      const scriptToRemove = document.getElementById(script.id);\n      if (scriptToRemove && document.head.contains(scriptToRemove)) {\n        document.head.removeChild(scriptToRemove);\n      }\n    };\n  }, [type, data]);\n\n  return null;\n}\n","size_bytes":871},"client/src/components/SEO/Meta.jsx":{"content":"import { useEffect } from 'react';\n\nexport default function Meta({ \n  title, \n  description, \n  keywords, \n  canonical, \n  ogImage,\n  ogType = 'website' \n}) {\n  useEffect(() => {\n    // Update document title\n    if (title) {\n      document.title = title;\n    }\n\n    // Update meta tags\n    const updateMeta = (name, content) => {\n      if (!content) return;\n      \n      let meta = document.querySelector(`meta[name=\"${name}\"]`);\n      if (!meta) {\n        meta = document.createElement('meta');\n        meta.name = name;\n        document.head.appendChild(meta);\n      }\n      meta.content = content;\n    };\n\n    const updateProperty = (property, content) => {\n      if (!content) return;\n      \n      let meta = document.querySelector(`meta[property=\"${property}\"]`);\n      if (!meta) {\n        meta = document.createElement('meta');\n        meta.setAttribute('property', property);\n        document.head.appendChild(meta);\n      }\n      meta.content = content;\n    };\n\n    // Basic meta tags\n    updateMeta('description', description);\n    updateMeta('keywords', keywords);\n\n    // Open Graph tags\n    updateProperty('og:title', title);\n    updateProperty('og:description', description);\n    updateProperty('og:type', ogType);\n    updateProperty('og:url', canonical ? `${window.location.origin}${canonical}` : window.location.href);\n    \n    if (ogImage) {\n      updateProperty('og:image', ogImage);\n    }\n\n    // Twitter Card tags\n    updateMeta('twitter:card', 'summary_large_image');\n    updateMeta('twitter:title', title);\n    updateMeta('twitter:description', description);\n    \n    if (ogImage) {\n      updateMeta('twitter:image', ogImage);\n    }\n\n    // Canonical URL\n    if (canonical) {\n      let link = document.querySelector('link[rel=\"canonical\"]');\n      if (!link) {\n        link = document.createElement('link');\n        link.rel = 'canonical';\n        document.head.appendChild(link);\n      }\n      link.href = `${window.location.origin}${canonical}`;\n    }\n  }, [title, description, keywords, canonical, ogImage, ogType]);\n\n  return null;\n}\n","size_bytes":2060},"client/src/components/Tools/ToolCard.jsx":{"content":"import { Link } from 'wouter';\nimport { motion } from 'framer-motion';\n\nexport default function ToolCard({ tool, index = 0 }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: index * 0.1 }}\n      whileHover={{ y: -5, scale: 1.02 }}\n      className=\"tool-card glassmorphism rounded-2xl p-6 cursor-pointer group\"\n    >\n      <Link href={tool.path}>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`w-12 h-12 bg-gradient-to-br ${tool.color.replace('text-', 'from-').replace('-400', '-500')} to-${tool.color.split('-')[1]}-600 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n            <i className={`${tool.icon} text-white text-xl`}></i>\n          </div>\n          {tool.featured && (\n            <span className=\"text-xs bg-cyan-500/20 text-cyan-400 px-2 py-1 rounded-full\">\n              Popular\n            </span>\n          )}\n        </div>\n        \n        <h3 className=\"font-semibold mb-2 text-slate-100 group-hover:text-cyan-400 transition-colors duration-300\">\n          {tool.name}\n        </h3>\n        \n        <p className=\"text-sm text-slate-400 mb-4 leading-relaxed\">\n          {tool.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs text-slate-500\">{tool.category}</span>\n          <i className=\"fas fa-arrow-right text-slate-400 group-hover:text-cyan-400 group-hover:translate-x-1 transition-all duration-300\"></i>\n        </div>\n      </Link>\n    </motion.div>\n  );\n}\n","size_bytes":1661},"client/src/components/Tools/ToolShell.jsx":{"content":"import { motion } from 'framer-motion';\nimport AdSlot from '../Ads/AdSlot';\nimport Meta from '../SEO/Meta';\nimport JsonLd from '../SEO/JsonLd';\nimport { getRelatedTools } from '../../lib/toolsIndex';\nimport { Link } from 'wouter';\n\nexport default function ToolShell({ \n  tool, \n  children, \n  faqs = [], \n  howToSteps = [], \n  benefits = [], \n  useCases = [] \n}) {\n  const relatedTools = getRelatedTools(tool.category, tool.slug);\n\n  const defaultFaqs = [\n    {\n      question: `Is the ${tool.name} tool free to use?`,\n      answer: 'Yes, this tool is completely free to use with no registration required. All processing happens in your browser for complete privacy.'\n    },\n    {\n      question: 'Is my data secure when using this tool?',\n      answer: 'Absolutely. All file processing happens directly in your browser using client-side JavaScript. Your files never leave your device or get uploaded to any servers.'\n    },\n    {\n      question: 'What file formats are supported?',\n      answer: `This tool supports all standard formats for ${tool.category.toLowerCase()}. The specific formats depend on your browser's capabilities.`\n    },\n    {\n      question: 'Are there any file size limits?',\n      answer: 'File size limits depend on your device\\'s available memory since processing happens locally. For optimal performance, we recommend files under 100MB.'\n    }\n  ];\n\n  const finalFaqs = faqs.length > 0 ? faqs : defaultFaqs;\n\n  return (\n    <>\n      <Meta \n        title={`${tool.name} - Free Online Tool | ToolsUniverse`}\n        description={tool.description}\n        keywords={tool.keywords}\n      />\n      \n      <JsonLd \n        type=\"SoftwareApplication\"\n        data={{\n          name: tool.name,\n          description: tool.description,\n          applicationCategory: \"ProductivityApplication\",\n          operatingSystem: \"Web\",\n          offers: {\n            \"@type\": \"Offer\",\n            price: \"0\",\n            priceCurrency: \"USD\"\n          },\n          featureList: benefits.length > 0 ? benefits : [\n            \"Free to use\",\n            \"No registration required\", \n            \"Privacy-focused\",\n            \"Works offline\"\n          ]\n        }}\n      />\n\n      <JsonLd \n        type=\"FAQPage\"\n        data={{\n          mainEntity: finalFaqs.map(faq => ({\n            \"@type\": \"Question\",\n            name: faq.question,\n            acceptedAnswer: {\n              \"@type\": \"Answer\",\n              text: faq.answer\n            }\n          }))\n        }}\n      />\n\n      <div className=\"pt-16 min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n        {/* Breadcrumbs */}\n        <div className=\"bg-slate-900/50 border-b border-slate-700\">\n          <div className=\"container mx-auto px-4 py-3\">\n            <nav className=\"flex items-center space-x-2 text-sm text-slate-400\">\n              <Link href=\"/\" className=\"hover:text-cyan-400 transition-colors\">\n                <i className=\"fas fa-home mr-1\"></i>\n                Home\n              </Link>\n              <i className=\"fas fa-chevron-right\"></i>\n              <Link href={`/${tool.category.toLowerCase().replace(' tools', '')}`} className=\"hover:text-cyan-400 transition-colors\">\n                {tool.category}\n              </Link>\n              <i className=\"fas fa-chevron-right\"></i>\n              <span className=\"text-slate-300\">{tool.name}</span>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Tool Header */}\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center mb-8\"\n          >\n            <div className={`w-20 h-20 bg-gradient-to-br ${tool.color.replace('text-', 'from-').replace('-400', '-500')} to-${tool.color.split('-')[1]}-600 rounded-2xl flex items-center justify-center mx-auto mb-6`}>\n              <i className={`${tool.icon} text-3xl text-white`}></i>\n            </div>\n            <h1 className=\"text-4xl lg:text-5xl font-bold text-slate-100 mb-4\">\n              {tool.name}\n            </h1>\n            <p className=\"text-xl text-slate-400 max-w-3xl mx-auto leading-relaxed\">\n              {tool.description}\n            </p>\n          </motion.div>\n\n          {/* Top Ad Slot */}\n          <AdSlot id={`${tool.slug}-top`} position=\"top\" pageType=\"tool\" />\n\n          {/* Main Tool Content */}\n          <div className=\"max-w-6xl mx-auto\">\n            {children}\n          </div>\n\n          {/* How It Works Section */}\n          {howToSteps.length > 0 && (\n            <motion.section \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"mt-16\"\n            >\n              <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n                <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                  <i className=\"fas fa-list-ol mr-3 text-cyan-400\"></i>\n                  How to Use {tool.name}\n                </h2>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {howToSteps.map((step, index) => (\n                    <div key={index} className=\"flex items-start space-x-4\">\n                      <div className=\"w-8 h-8 bg-cyan-600 rounded-full flex items-center justify-center text-white font-bold text-sm flex-shrink-0\">\n                        {index + 1}\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-slate-100 mb-2\">{step.title}</h3>\n                        <p className=\"text-slate-400 text-sm\">{step.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </motion.section>\n          )}\n\n          {/* Benefits Section */}\n          {benefits.length > 0 && (\n            <motion.section \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"mt-12\"\n            >\n              <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n                <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                  <i className=\"fas fa-star mr-3 text-yellow-400\"></i>\n                  Why Use {tool.name}?\n                </h2>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {benefits.map((benefit, index) => (\n                    <div key={index} className=\"flex items-center space-x-3\">\n                      <i className=\"fas fa-check-circle text-green-400\"></i>\n                      <span className=\"text-slate-300\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </motion.section>\n          )}\n\n          {/* Use Cases Section */}\n          {useCases.length > 0 && (\n            <motion.section \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"mt-12\"\n            >\n              <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n                <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                  <i className=\"fas fa-lightbulb mr-3 text-purple-400\"></i>\n                  Common Use Cases\n                </h2>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {useCases.map((useCase, index) => (\n                    <div key={index} className=\"glassmorphism rounded-xl p-4 border-slate-600\">\n                      <p className=\"text-slate-300\">{useCase}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </motion.section>\n          )}\n\n          {/* Bottom Ad Slot */}\n          <AdSlot id={`${tool.slug}-bottom`} position=\"bottom\" pageType=\"tool\" />\n\n          {/* FAQ Section */}\n          <motion.section \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"mt-12\"\n          >\n            <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n              <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                <i className=\"fas fa-question-circle mr-3 text-blue-400\"></i>\n                Frequently Asked Questions\n              </h2>\n              <div className=\"space-y-6\">\n                {finalFaqs.map((faq, index) => (\n                  <div key={index} className=\"border-b border-slate-700 pb-4 last:border-b-0\">\n                    <h3 className=\"font-semibold text-slate-100 mb-2\">{faq.question}</h3>\n                    <p className=\"text-slate-400\">{faq.answer}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </motion.section>\n\n          {/* Related Tools */}\n          {relatedTools.length > 0 && (\n            <motion.section \n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"mt-12\"\n            >\n              <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n                <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                  <i className=\"fas fa-tools mr-3 text-orange-400\"></i>\n                  Related Tools\n                </h2>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {relatedTools.slice(0, 6).map((relatedTool, index) => (\n                    <Link key={index} href={relatedTool.path}>\n                      <div className=\"glassmorphism rounded-xl p-4 border-slate-600 hover:border-cyan-500 transition-all duration-300 group cursor-pointer\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-10 h-10 bg-gradient-to-br ${relatedTool.color.replace('text-', 'from-').replace('-400', '-500')} to-${relatedTool.color.split('-')[1]}-600 rounded-lg flex items-center justify-center`}>\n                            <i className={`${relatedTool.icon} text-white`}></i>\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-slate-100 group-hover:text-cyan-400 transition-colors\">\n                              {relatedTool.name}\n                            </h3>\n                            <p className=\"text-sm text-slate-400\">{relatedTool.category}</p>\n                          </div>\n                          <i className=\"fas fa-arrow-right text-slate-400 group-hover:text-cyan-400 group-hover:translate-x-1 transition-all duration-300\"></i>\n                        </div>\n                      </div>\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            </motion.section>\n          )}\n\n          {/* Keywords Section */}\n          <motion.section \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"mt-12\"\n          >\n            <div className=\"glassmorphism rounded-2xl p-8 border-slate-700\">\n              <h2 className=\"text-2xl font-bold text-slate-100 mb-6 flex items-center\">\n                <i className=\"fas fa-tags mr-3 text-pink-400\"></i>\n                Related Keywords\n              </h2>\n              <div className=\"flex flex-wrap gap-2\">\n                {tool.keywords.split(', ').map((keyword, index) => (\n                  <span \n                    key={index}\n                    className=\"px-3 py-1 bg-slate-800 text-slate-300 rounded-full text-sm border border-slate-600\"\n                  >\n                    {keyword}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </motion.section>\n\n          {/* Last Updated */}\n          <div className=\"text-center mt-8 text-slate-500 text-sm\">\n            Last updated: {new Date().toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":12648},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/tools/finance/EMICalculator.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function EMICalculator() {\n  const tool = getToolBySlug('finance', 'emi-calculator');\n  const [inputs, setInputs] = useState({\n    loanAmount: 1000000,\n    interestRate: 8.5,\n    loanTenure: 20,\n    tenureType: 'years' // 'years' or 'months'\n  });\n  \n  const [results, setResults] = useState({\n    emi: 0,\n    totalAmount: 0,\n    totalInterest: 0,\n    monthlyBreakdown: []\n  });\n\n  useEffect(() => {\n    calculateEMI();\n  }, [inputs]);\n\n  const calculateEMI = () => {\n    const { loanAmount, interestRate, loanTenure, tenureType } = inputs;\n    \n    if (!loanAmount || !interestRate || !loanTenure) {\n      setResults({ emi: 0, totalAmount: 0, totalInterest: 0, monthlyBreakdown: [] });\n      return;\n    }\n\n    const principal = parseFloat(loanAmount);\n    const monthlyRate = parseFloat(interestRate) / 12 / 100;\n    const totalMonths = tenureType === 'years' ? parseInt(loanTenure) * 12 : parseInt(loanTenure);\n\n    // EMI calculation using formula: EMI = P √ó r √ó (1 + r)^n / ((1 + r)^n - 1)\n    const emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, totalMonths)) / \n                (Math.pow(1 + monthlyRate, totalMonths) - 1);\n    \n    const totalAmount = emi * totalMonths;\n    const totalInterest = totalAmount - principal;\n\n    // Generate monthly breakdown for first year\n    const monthlyBreakdown = [];\n    let outstandingPrincipal = principal;\n    \n    for (let month = 1; month <= Math.min(12, totalMonths); month++) {\n      const interestPayment = outstandingPrincipal * monthlyRate;\n      const principalPayment = emi - interestPayment;\n      outstandingPrincipal -= principalPayment;\n      \n      monthlyBreakdown.push({\n        month,\n        emi: emi,\n        principal: principalPayment,\n        interest: interestPayment,\n        balance: outstandingPrincipal\n      });\n    }\n\n    setResults({\n      emi: Math.round(emi),\n      totalAmount: Math.round(totalAmount),\n      totalInterest: Math.round(totalInterest),\n      monthlyBreakdown\n    });\n  };\n\n  const handleInputChange = (field, value) => {\n    setInputs(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatNumber = (num) => {\n    return new Intl.NumberFormat('en-IN').format(Math.round(num));\n  };\n\n  const resetCalculator = () => {\n    setInputs({\n      loanAmount: 1000000,\n      interestRate: 8.5,\n      loanTenure: 20,\n      tenureType: 'years'\n    });\n  };\n\n  return (\n    <ToolShell tool={tool} category=\"finance\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Loan Details</h2>\n          \n          <div className=\"space-y-6\">\n            {/* Loan Amount */}\n            <div className=\"glassmorphism p-6 rounded-xl\">\n              <label className=\"block text-slate-100 font-medium mb-3\">\n                <i className=\"fas fa-rupee-sign text-emerald-400 mr-2\"></i>\n                Loan Amount\n              </label>\n              <input\n                type=\"number\"\n                value={inputs.loanAmount}\n                onChange={(e) => handleInputChange('loanAmount', e.target.value)}\n                className=\"w-full bg-slate-800 border border-slate-600 rounded-lg px-4 py-3 text-slate-100 focus:border-emerald-400 focus:ring-2 focus:ring-emerald-400/20 transition-all\"\n                data-testid=\"input-loan-amount\"\n              />\n              <div className=\"mt-2 text-sm text-slate-400\">\n                Amount: {formatCurrency(inputs.loanAmount || 0)}\n              </div>\n              <div className=\"mt-3\">\n                <input\n                  type=\"range\"\n                  min=\"100000\"\n                  max=\"10000000\"\n                  step=\"100000\"\n                  value={inputs.loanAmount}\n                  onChange={(e) => handleInputChange('loanAmount', e.target.value)}\n                  className=\"w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer\"\n                />\n                <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\n                  <span>‚Çπ1L</span>\n                  <span>‚Çπ1Cr</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Interest Rate */}\n            <div className=\"glassmorphism p-6 rounded-xl\">\n              <label className=\"block text-slate-100 font-medium mb-3\">\n                <i className=\"fas fa-percentage text-blue-400 mr-2\"></i>\n                Annual Interest Rate\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.1\"\n                value={inputs.interestRate}\n                onChange={(e) => handleInputChange('interestRate', e.target.value)}\n                className=\"w-full bg-slate-800 border border-slate-600 rounded-lg px-4 py-3 text-slate-100 focus:border-emerald-400 focus:ring-2 focus:ring-emerald-400/20 transition-all\"\n                data-testid=\"input-interest-rate\"\n              />\n              <div className=\"mt-2 text-sm text-slate-400\">\n                Rate: {inputs.interestRate}% per annum\n              </div>\n              <div className=\"mt-3\">\n                <input\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"20\"\n                  step=\"0.1\"\n                  value={inputs.interestRate}\n                  onChange={(e) => handleInputChange('interestRate', e.target.value)}\n                  className=\"w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer\"\n                />\n                <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\n                  <span>1%</span>\n                  <span>20%</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Loan Tenure */}\n            <div className=\"glassmorphism p-6 rounded-xl\">\n              <label className=\"block text-slate-100 font-medium mb-3\">\n                <i className=\"fas fa-calendar text-purple-400 mr-2\"></i>\n                Loan Tenure\n              </label>\n              <div className=\"flex space-x-3 mb-3\">\n                <input\n                  type=\"number\"\n                  value={inputs.loanTenure}\n                  onChange={(e) => handleInputChange('loanTenure', e.target.value)}\n                  className=\"flex-1 bg-slate-800 border border-slate-600 rounded-lg px-4 py-3 text-slate-100 focus:border-emerald-400 focus:ring-2 focus:ring-emerald-400/20 transition-all\"\n                  data-testid=\"input-loan-tenure\"\n                />\n                <select\n                  value={inputs.tenureType}\n                  onChange={(e) => handleInputChange('tenureType', e.target.value)}\n                  className=\"bg-slate-800 border border-slate-600 rounded-lg px-4 py-3 text-slate-100 focus:border-emerald-400 focus:ring-2 focus:ring-emerald-400/20 transition-all\"\n                  data-testid=\"select-tenure-type\"\n                >\n                  <option value=\"years\">Years</option>\n                  <option value=\"months\">Months</option>\n                </select>\n              </div>\n              <div className=\"mt-2 text-sm text-slate-400\">\n                Duration: {inputs.loanTenure} {inputs.tenureType} \n                {inputs.tenureType === 'years' && ` (${inputs.loanTenure * 12} months)`}\n              </div>\n              <div className=\"mt-3\">\n                <input\n                  type=\"range\"\n                  min={inputs.tenureType === 'years' ? '1' : '12'}\n                  max={inputs.tenureType === 'years' ? '30' : '360'}\n                  step=\"1\"\n                  value={inputs.loanTenure}\n                  onChange={(e) => handleInputChange('loanTenure', e.target.value)}\n                  className=\"w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer\"\n                />\n                <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\n                  <span>{inputs.tenureType === 'years' ? '1Y' : '1M'}</span>\n                  <span>{inputs.tenureType === 'years' ? '30Y' : '30Y'}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={resetCalculator}\n                className=\"flex-1 glassmorphism hover:bg-slate-700/50 text-slate-300 py-3 rounded-xl transition-colors\"\n                data-testid=\"button-reset\"\n              >\n                <i className=\"fas fa-redo mr-2\"></i>\n                Reset\n              </button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Results Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">EMI Calculation Results</h2>\n          \n          {/* Primary Results */}\n          <div className=\"grid gap-4\">\n            <div className=\"glassmorphism p-6 rounded-xl text-center bg-gradient-to-r from-emerald-500/10 to-emerald-600/10 border-emerald-500/20\">\n              <div className=\"text-sm text-slate-400 mb-2\">Monthly EMI</div>\n              <div className=\"text-3xl font-bold text-emerald-400\" data-testid=\"result-emi\">\n                {formatCurrency(results.emi)}\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"glassmorphism p-4 rounded-xl text-center\">\n                <div className=\"text-xs text-slate-400 mb-1\">Total Amount</div>\n                <div className=\"text-lg font-bold text-slate-100\" data-testid=\"result-total-amount\">\n                  {formatCurrency(results.totalAmount)}\n                </div>\n              </div>\n              <div className=\"glassmorphism p-4 rounded-xl text-center\">\n                <div className=\"text-xs text-slate-400 mb-1\">Total Interest</div>\n                <div className=\"text-lg font-bold text-orange-400\" data-testid=\"result-total-interest\">\n                  {formatCurrency(results.totalInterest)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Breakdown Chart */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Payment Breakdown</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-400\">Principal Amount</span>\n                <span className=\"text-slate-100 font-medium\">{formatCurrency(inputs.loanAmount)}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-400\">Interest Amount</span>\n                <span className=\"text-orange-400 font-medium\">{formatCurrency(results.totalInterest)}</span>\n              </div>\n              \n              {/* Visual breakdown */}\n              <div className=\"mt-4\">\n                <div className=\"flex h-4 rounded-lg overflow-hidden\">\n                  <div \n                    className=\"bg-emerald-500\"\n                    style={{ \n                      width: `${(inputs.loanAmount / results.totalAmount) * 100}%` \n                    }}\n                  ></div>\n                  <div \n                    className=\"bg-orange-500\"\n                    style={{ \n                      width: `${(results.totalInterest / results.totalAmount) * 100}%` \n                    }}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between text-xs text-slate-500 mt-2\">\n                  <span>Principal ({((inputs.loanAmount / results.totalAmount) * 100).toFixed(1)}%)</span>\n                  <span>Interest ({((results.totalInterest / results.totalAmount) * 100).toFixed(1)}%)</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Monthly Breakdown Table */}\n          {results.monthlyBreakdown.length > 0 && (\n            <div className=\"glassmorphism p-6 rounded-xl\">\n              <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">\n                First Year Payment Schedule\n              </h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-slate-700\">\n                      <th className=\"text-left text-slate-400 pb-2\">Month</th>\n                      <th className=\"text-right text-slate-400 pb-2\">EMI</th>\n                      <th className=\"text-right text-slate-400 pb-2\">Principal</th>\n                      <th className=\"text-right text-slate-400 pb-2\">Interest</th>\n                      <th className=\"text-right text-slate-400 pb-2\">Balance</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {results.monthlyBreakdown.map((month) => (\n                      <tr key={month.month} className=\"border-b border-slate-800\">\n                        <td className=\"py-2 text-slate-100\">{month.month}</td>\n                        <td className=\"py-2 text-right text-slate-100\">{formatNumber(month.emi)}</td>\n                        <td className=\"py-2 text-right text-emerald-400\">{formatNumber(month.principal)}</td>\n                        <td className=\"py-2 text-right text-orange-400\">{formatNumber(month.interest)}</td>\n                        <td className=\"py-2 text-right text-slate-100\">{formatNumber(month.balance)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* Key Insights */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">\n              <i className=\"fas fa-lightbulb text-yellow-400 mr-2\"></i>\n              Key Insights\n            </h3>\n            <div className=\"space-y-2 text-sm text-slate-400\">\n              <p>‚Ä¢ Your EMI represents {((results.emi / inputs.loanAmount) * 100).toFixed(2)}% of the loan amount</p>\n              <p>‚Ä¢ Total interest is {((results.totalInterest / inputs.loanAmount) * 100).toFixed(0)}% of the principal amount</p>\n              <p>‚Ä¢ Consider prepayments to reduce total interest burden</p>\n              <p>‚Ä¢ Lower interest rates or shorter tenure can significantly reduce total cost</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </ToolShell>\n  );\n}\n","size_bytes":15196},"client/src/pages/tools/image/BackgroundRemover.jsx":{"content":"import { useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function BackgroundRemover() {\n  const tool = getToolBySlug('image', 'remove-background');\n  const [originalImage, setOriginalImage] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const fileInputRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      alert('Please select a valid image file.');\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setOriginalImage({\n        file,\n        dataUrl: e.target.result,\n        name: file.name,\n        size: file.size\n      });\n      setProcessedImage(null);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const removeBackground = async () => {\n    if (!originalImage) return;\n\n    setIsProcessing(true);\n    \n    try {\n      // This is a simplified background removal simulation\n      // In a real implementation, you would use libraries like:\n      // - @mediapipe/selfie_segmentation for person detection\n      // - TensorFlow.js with pre-trained models\n      // - Canvas API for pixel manipulation\n      \n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      \n      // Load the image\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        // Draw the original image\n        ctx.drawImage(img, 0, 0);\n        \n        // Get image data for processing\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        \n        // Simple background removal algorithm (this is very basic)\n        // In reality, you'd use ML models for accurate segmentation\n        for (let i = 0; i < data.length; i += 4) {\n          const red = data[i];\n          const green = data[i + 1];\n          const blue = data[i + 2];\n          \n          // Simple color-based background removal (remove white-ish backgrounds)\n          // This is just for demonstration - real background removal requires ML\n          if (red > 200 && green > 200 && blue > 200) {\n            data[i + 3] = 0; // Set alpha to 0 (transparent)\n          }\n        }\n        \n        // Put the processed image data back\n        ctx.putImageData(imageData, 0, 0);\n        \n        // Convert canvas to blob\n        canvas.toBlob((blob) => {\n          const url = URL.createObjectURL(blob);\n          setProcessedImage({\n            blob,\n            dataUrl: url,\n            name: `${originalImage.name.split('.')[0]}_no_bg.png`,\n            size: blob.size\n          });\n          setIsProcessing(false);\n        }, 'image/png');\n      };\n      \n      img.src = originalImage.dataUrl;\n      \n    } catch (error) {\n      console.error('Error removing background:', error);\n      alert('Error processing image. Please try again.');\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadImage = () => {\n    if (!processedImage) return;\n    \n    const a = document.createElement('a');\n    a.href = processedImage.dataUrl;\n    a.download = processedImage.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  const resetTool = () => {\n    setOriginalImage(null);\n    setProcessedImage(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <ToolShell tool={tool} category=\"image\">\n      <canvas ref={canvasRef} className=\"hidden\" />\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Upload Image</h2>\n          \n          {/* File Upload Area */}\n          <div \n            className=\"border-2 border-dashed border-slate-600 rounded-2xl p-8 text-center hover:border-cyan-500 transition-colors cursor-pointer\"\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <i className=\"fas fa-cloud-upload-alt text-4xl text-slate-400 mb-4\"></i>\n            <p className=\"text-lg mb-2 text-slate-300\">Drag and drop an image here</p>\n            <p className=\"text-slate-400 mb-4\">or click to browse</p>\n            <p className=\"text-xs text-slate-500 mb-4\">Supports JPG, PNG, WebP formats</p>\n            <button className=\"bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-xl transition-colors\">\n              <i className=\"fas fa-folder-open mr-2\"></i>\n              Choose Image\n            </button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-file-upload\"\n            />\n          </div>\n\n          {/* Original Image Preview */}\n          {originalImage && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"glassmorphism p-6 rounded-xl\"\n            >\n              <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Original Image</h3>\n              <div className=\"aspect-video bg-slate-800 rounded-lg overflow-hidden mb-4\">\n                <img\n                  src={originalImage.dataUrl}\n                  alt=\"Original\"\n                  className=\"w-full h-full object-contain\"\n                  data-testid=\"image-original-preview\"\n                />\n              </div>\n              <div className=\"flex justify-between text-sm text-slate-400\">\n                <span>{originalImage.name}</span>\n                <span>{(originalImage.size / 1024 / 1024).toFixed(2)} MB</span>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={removeBackground}\n              disabled={!originalImage || isProcessing}\n              className=\"flex-1 bg-cyan-600 hover:bg-cyan-700 disabled:bg-slate-700 disabled:cursor-not-allowed text-white py-4 rounded-2xl text-lg font-semibold transition-colors\"\n              data-testid=\"button-remove-background\"\n            >\n              {isProcessing ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-magic mr-2\"></i>\n                  Remove Background\n                </>\n              )}\n            </button>\n            <button\n              onClick={resetTool}\n              className=\"px-6 py-4 glassmorphism hover:bg-slate-700/50 text-slate-300 rounded-2xl transition-colors\"\n              data-testid=\"button-reset\"\n            >\n              <i className=\"fas fa-redo mr-2\"></i>\n              Reset\n            </button>\n          </div>\n\n          {/* Info Box */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-3\">\n              <i className=\"fas fa-info-circle text-cyan-400 mr-2\"></i>\n              How it Works\n            </h3>\n            <div className=\"text-sm text-slate-400 space-y-2\">\n              <p>‚Ä¢ This tool uses advanced algorithms to detect and remove backgrounds</p>\n              <p>‚Ä¢ Works best with clear subject-background contrast</p>\n              <p>‚Ä¢ All processing happens in your browser - your images stay private</p>\n              <p>‚Ä¢ Supports common image formats (JPG, PNG, WebP)</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Output Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Result</h2>\n          \n          {/* Preview Area */}\n          <div className=\"glassmorphism rounded-2xl p-6 h-96\">\n            {processedImage ? (\n              <div className=\"h-full\">\n                <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Background Removed</h3>\n                <div className=\"aspect-video bg-transparent rounded-lg overflow-hidden mb-4\" \n                     style={{backgroundImage: 'url(\"data:image/svg+xml;charset=UTF-8,%3csvg width=\\'20\\' height=\\'20\\' xmlns=\\'http://www.w3.org/2000/svg\\'%3e%3crect width=\\'10\\' height=\\'10\\' fill=\\'%23374151\\'/%3e%3crect x=\\'10\\' y=\\'10\\' width=\\'10\\' height=\\'10\\' fill=\\'%23374151\\'/%3e%3c/svg%3e\")'}}>\n                  <img\n                    src={processedImage.dataUrl}\n                    alt=\"Background removed\"\n                    className=\"w-full h-full object-contain\"\n                    data-testid=\"image-processed-preview\"\n                  />\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-sm text-slate-400\">\n                    <div>{processedImage.name}</div>\n                    <div>{(processedImage.size / 1024 / 1024).toFixed(2)} MB</div>\n                  </div>\n                  <button\n                    onClick={downloadImage}\n                    className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl transition-colors\"\n                    data-testid=\"button-download\"\n                  >\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download\n                  </button>\n                </div>\n              </div>\n            ) : isProcessing ? (\n              <div className=\"h-full flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-spinner fa-spin text-6xl text-cyan-400 mb-4\"></i>\n                  <p className=\"text-slate-400\">Removing background...</p>\n                  <p className=\"text-sm text-slate-500 mt-2\">This may take a few moments</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"h-full flex items-center justify-center\">\n                <div className=\"text-center text-slate-400\">\n                  <i className=\"fas fa-image text-6xl mb-4 opacity-50\"></i>\n                  <p>Processed image will appear here</p>\n                  <p className=\"text-sm mt-2\">Upload an image and click \"Remove Background\"</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Processing Info */}\n          <div className=\"glassmorphism rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 text-slate-100\">Processing Details</h3>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Status:</span>\n                <span className={`${isProcessing ? 'text-yellow-400' : processedImage ? 'text-green-400' : 'text-slate-400'}`}>\n                  {isProcessing ? 'Processing...' : processedImage ? 'Complete' : 'Ready'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Output format:</span>\n                <span className=\"text-slate-100\">PNG (with transparency)</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Privacy:</span>\n                <span className=\"text-green-400\">100% local processing</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Tips */}\n          <div className=\"glassmorphism rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 text-slate-100\">\n              <i className=\"fas fa-lightbulb text-yellow-400 mr-2\"></i>\n              Tips for Best Results\n            </h3>\n            <div className=\"space-y-2 text-sm text-slate-400\">\n              <p>‚Ä¢ Use images with clear contrast between subject and background</p>\n              <p>‚Ä¢ Avoid complex or busy backgrounds when possible</p>\n              <p>‚Ä¢ Higher resolution images typically produce better results</p>\n              <p>‚Ä¢ The tool works best with people, objects, and simple scenes</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </ToolShell>\n  );\n}\n","size_bytes":12809},"client/src/pages/tools/pdf/PDFMerger.jsx":{"content":"import { useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function PDFMerger() {\n  const tool = getToolBySlug('pdf', 'merge');\n  const [files, setFiles] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [outputFile, setOutputFile] = useState(null);\n  const fileInputRef = useRef(null);\n\n  const handleFileSelect = (event) => {\n    const selectedFiles = Array.from(event.target.files);\n    const pdfFiles = selectedFiles.filter(file => file.type === 'application/pdf');\n    \n    const newFiles = pdfFiles.map((file, index) => ({\n      id: Date.now() + index,\n      file,\n      name: file.name,\n      size: file.size,\n      preview: null\n    }));\n    \n    setFiles(prev => [...prev, ...newFiles]);\n  };\n\n  const removeFile = (id) => {\n    setFiles(prev => prev.filter(file => file.id !== id));\n  };\n\n  const moveFile = (fromIndex, toIndex) => {\n    setFiles(prev => {\n      const newFiles = [...prev];\n      const [movedFile] = newFiles.splice(fromIndex, 1);\n      newFiles.splice(toIndex, 0, movedFile);\n      return newFiles;\n    });\n  };\n\n  const mergePDFs = async () => {\n    if (files.length < 2) {\n      alert('Please select at least 2 PDF files to merge.');\n      return;\n    }\n\n    setIsProcessing(true);\n    \n    try {\n      // This would use PDF-lib or similar library for actual PDF merging\n      // For demo purposes, we'll simulate the process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Create a mock merged PDF blob\n      const mockPDFContent = new Blob(['Mock merged PDF content'], { type: 'application/pdf' });\n      setOutputFile({\n        name: 'merged-document.pdf',\n        blob: mockPDFContent,\n        size: mockPDFContent.size\n      });\n    } catch (error) {\n      console.error('Error merging PDFs:', error);\n      alert('Error merging PDFs. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadMergedPDF = () => {\n    if (!outputFile) return;\n    \n    const url = URL.createObjectURL(outputFile.blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = outputFile.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const resetTool = () => {\n    setFiles([]);\n    setOutputFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <ToolShell tool={tool} category=\"pdf\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Upload PDF Files</h2>\n          \n          {/* File Upload Area */}\n          <div \n            className=\"border-2 border-dashed border-slate-600 rounded-2xl p-8 text-center hover:border-cyan-500 transition-colors cursor-pointer\"\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <i className=\"fas fa-cloud-upload-alt text-4xl text-slate-400 mb-4\"></i>\n            <p className=\"text-lg mb-2 text-slate-300\">Drag and drop PDF files here</p>\n            <p className=\"text-slate-400 mb-4\">or click to browse</p>\n            <button className=\"bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-xl transition-colors\">\n              <i className=\"fas fa-folder-open mr-2\"></i>\n              Choose Files\n            </button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\".pdf\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n          </div>\n\n          {/* Files List */}\n          {files.length > 0 && (\n            <div className=\"space-y-3\">\n              <h3 className=\"text-lg font-semibold text-slate-100\">Selected Files ({files.length})</h3>\n              {files.map((file, index) => (\n                <motion.div\n                  key={file.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"glassmorphism p-4 rounded-xl flex items-center justify-between\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-file-pdf text-red-400 text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-slate-100\">{file.name}</div>\n                      <div className=\"text-sm text-slate-400\">\n                        {(file.size / 1024 / 1024).toFixed(2)} MB\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={() => moveFile(index, Math.max(0, index - 1))}\n                      disabled={index === 0}\n                      className=\"p-2 text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                      title=\"Move up\"\n                    >\n                      <i className=\"fas fa-arrow-up\"></i>\n                    </button>\n                    <button\n                      onClick={() => moveFile(index, Math.min(files.length - 1, index + 1))}\n                      disabled={index === files.length - 1}\n                      className=\"p-2 text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                      title=\"Move down\"\n                    >\n                      <i className=\"fas fa-arrow-down\"></i>\n                    </button>\n                    <button\n                      onClick={() => removeFile(file.id)}\n                      className=\"p-2 text-red-400 hover:text-red-300\"\n                      title=\"Remove file\"\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </button>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={mergePDFs}\n              disabled={files.length < 2 || isProcessing}\n              className=\"flex-1 bg-cyan-600 hover:bg-cyan-700 disabled:bg-slate-700 disabled:cursor-not-allowed text-white py-4 rounded-2xl text-lg font-semibold transition-colors\"\n            >\n              {isProcessing ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Merging PDFs...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-magic mr-2\"></i>\n                  Merge PDFs\n                </>\n              )}\n            </button>\n            <button\n              onClick={resetTool}\n              className=\"px-6 py-4 glassmorphism hover:bg-slate-700/50 text-slate-300 rounded-2xl transition-colors\"\n            >\n              <i className=\"fas fa-redo mr-2\"></i>\n              Reset\n            </button>\n          </div>\n        </motion.div>\n\n        {/* Output Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Preview & Download</h2>\n          \n          {/* Preview Area */}\n          <div className=\"glassmorphism rounded-2xl p-6 h-96 flex items-center justify-center\">\n            {outputFile ? (\n              <div className=\"text-center\">\n                <i className=\"fas fa-file-pdf text-6xl text-green-400 mb-4\"></i>\n                <h3 className=\"text-xl font-semibold text-slate-100 mb-2\">PDF Merged Successfully!</h3>\n                <p className=\"text-slate-400 mb-6\">Your merged PDF is ready for download</p>\n                <button\n                  onClick={downloadMergedPDF}\n                  className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-xl transition-colors\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download Merged PDF\n                </button>\n              </div>\n            ) : isProcessing ? (\n              <div className=\"text-center\">\n                <i className=\"fas fa-spinner fa-spin text-6xl text-cyan-400 mb-4\"></i>\n                <p className=\"text-slate-400\">Processing your PDFs...</p>\n              </div>\n            ) : (\n              <div className=\"text-center text-slate-400\">\n                <i className=\"fas fa-file-pdf text-6xl mb-4 opacity-50\"></i>\n                <p>Merged PDF preview will appear here</p>\n                <p className=\"text-sm mt-2\">Upload files and click merge to start</p>\n              </div>\n            )}\n          </div>\n\n          {/* File Information */}\n          <div className=\"glassmorphism rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 text-slate-100\">Merge Information</h3>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Total files:</span>\n                <span className=\"text-slate-100\">{files.length}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Total size:</span>\n                <span className=\"text-slate-100\">\n                  {files.length > 0 \n                    ? (files.reduce((total, file) => total + file.size, 0) / 1024 / 1024).toFixed(2) + ' MB'\n                    : '0 MB'\n                  }\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Processing time:</span>\n                <span className=\"text-slate-100\">\n                  {isProcessing ? 'Processing...' : outputFile ? '< 2 seconds' : 'Not started'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Privacy:</span>\n                <span className=\"text-green-400\">100% local processing</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </ToolShell>\n  );\n}\n","size_bytes":10564},"client/src/pages/tools/text/WordCounter.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function WordCounter() {\n  const tool = getToolBySlug('text', 'word-counter');\n  const [text, setText] = useState('');\n  const [stats, setStats] = useState({\n    words: 0,\n    characters: 0,\n    charactersNoSpaces: 0,\n    sentences: 0,\n    paragraphs: 0,\n    readingTime: 0,\n    speakingTime: 0\n  });\n\n  useEffect(() => {\n    const calculateStats = () => {\n      if (!text.trim()) {\n        setStats({\n          words: 0,\n          characters: 0,\n          charactersNoSpaces: 0,\n          sentences: 0,\n          paragraphs: 0,\n          readingTime: 0,\n          speakingTime: 0\n        });\n        return;\n      }\n\n      // Words (split by whitespace and filter empty strings)\n      const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n      const wordCount = words.length;\n\n      // Characters\n      const characters = text.length;\n      const charactersNoSpaces = text.replace(/\\s/g, '').length;\n\n      // Sentences (split by sentence-ending punctuation)\n      const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0);\n      const sentenceCount = sentences.length;\n\n      // Paragraphs (split by double line breaks)\n      const paragraphs = text.split(/\\n\\s*\\n/).filter(para => para.trim().length > 0);\n      const paragraphCount = paragraphs.length;\n\n      // Reading time (average 200 words per minute)\n      const readingTime = Math.ceil(wordCount / 200);\n\n      // Speaking time (average 150 words per minute)\n      const speakingTime = Math.ceil(wordCount / 150);\n\n      setStats({\n        words: wordCount,\n        characters,\n        charactersNoSpaces,\n        sentences: sentenceCount,\n        paragraphs: paragraphCount,\n        readingTime,\n        speakingTime\n      });\n    };\n\n    calculateStats();\n  }, [text]);\n\n  const handleClearText = () => {\n    setText('');\n  };\n\n  const handleSampleText = () => {\n    const sampleText = `Welcome to ToolsUniverse Word Counter! This is a sample text to demonstrate the functionality of our word counting tool.\n\nThis tool provides comprehensive text analysis including word count, character count, sentence count, and paragraph count. It also estimates reading and speaking time based on average rates.\n\nYou can use this tool for various purposes:\n- Academic writing and research papers\n- Blog posts and articles\n- Social media content\n- Business communications\n- Creative writing projects\n\nThe tool processes everything locally in your browser, ensuring your text remains private and secure. No data is sent to any servers, making it perfect for sensitive or confidential content.\n\nTry replacing this sample text with your own content to see the real-time analysis!`;\n    setText(sampleText);\n  };\n\n  const copyToClipboard = async (content) => {\n    try {\n      await navigator.clipboard.writeText(content);\n      // You could add a toast notification here\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  return (\n    <ToolShell tool={tool} category=\"text\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Input Text</h2>\n          \n          <div className=\"space-y-4\">\n            <textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              placeholder=\"Paste or type your text here to analyze...\"\n              className=\"w-full h-80 bg-slate-800/50 border border-slate-600 rounded-xl p-4 text-slate-100 placeholder-slate-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all duration-300 resize-none\"\n              data-testid=\"input-text-area\"\n            />\n            \n            <div className=\"flex flex-wrap gap-3\">\n              <button\n                onClick={handleClearText}\n                disabled={!text}\n                className=\"px-4 py-2 glassmorphism text-slate-300 hover:text-white hover:bg-slate-700/50 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-colors\"\n                data-testid=\"button-clear-text\"\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                Clear Text\n              </button>\n              <button\n                onClick={handleSampleText}\n                className=\"px-4 py-2 glassmorphism text-slate-300 hover:text-white hover:bg-slate-700/50 rounded-lg transition-colors\"\n                data-testid=\"button-sample-text\"\n              >\n                <i className=\"fas fa-file-alt mr-2\"></i>\n                Load Sample\n              </button>\n              <button\n                onClick={() => copyToClipboard(text)}\n                disabled={!text}\n                className=\"px-4 py-2 glassmorphism text-slate-300 hover:text-white hover:bg-slate-700/50 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-colors\"\n                data-testid=\"button-copy-text\"\n              >\n                <i className=\"fas fa-copy mr-2\"></i>\n                Copy Text\n              </button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Results Panel */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"space-y-6\"\n        >\n          <h2 className=\"text-2xl font-bold text-slate-100\">Analysis Results</h2>\n          \n          {/* Primary Stats */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"glassmorphism p-6 rounded-xl text-center\">\n              <div className=\"text-3xl font-bold text-cyan-400 mb-2\" data-testid=\"stat-words\">\n                {stats.words.toLocaleString()}\n              </div>\n              <div className=\"text-slate-400 text-sm\">Words</div>\n            </div>\n            <div className=\"glassmorphism p-6 rounded-xl text-center\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-2\" data-testid=\"stat-characters\">\n                {stats.characters.toLocaleString()}\n              </div>\n              <div className=\"text-slate-400 text-sm\">Characters</div>\n            </div>\n            <div className=\"glassmorphism p-6 rounded-xl text-center\">\n              <div className=\"text-3xl font-bold text-green-400 mb-2\" data-testid=\"stat-sentences\">\n                {stats.sentences.toLocaleString()}\n              </div>\n              <div className=\"text-slate-400 text-sm\">Sentences</div>\n            </div>\n            <div className=\"glassmorphism p-6 rounded-xl text-center\">\n              <div className=\"text-3xl font-bold text-yellow-400 mb-2\" data-testid=\"stat-paragraphs\">\n                {stats.paragraphs.toLocaleString()}\n              </div>\n              <div className=\"text-slate-400 text-sm\">Paragraphs</div>\n            </div>\n          </div>\n\n          {/* Detailed Stats */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Detailed Analysis</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Characters (no spaces):</span>\n                <span className=\"text-slate-100\" data-testid=\"stat-characters-no-spaces\">\n                  {stats.charactersNoSpaces.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Average words per sentence:</span>\n                <span className=\"text-slate-100\" data-testid=\"stat-avg-words-sentence\">\n                  {stats.sentences > 0 ? (stats.words / stats.sentences).toFixed(1) : '0'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Average characters per word:</span>\n                <span className=\"text-slate-100\" data-testid=\"stat-avg-chars-word\">\n                  {stats.words > 0 ? (stats.charactersNoSpaces / stats.words).toFixed(1) : '0'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Reading Time */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Time Estimates</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Reading time:</span>\n                <span className=\"text-slate-100\" data-testid=\"stat-reading-time\">\n                  {stats.readingTime === 1 ? '1 minute' : `${stats.readingTime} minutes`}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-400\">Speaking time:</span>\n                <span className=\"text-slate-100\" data-testid=\"stat-speaking-time\">\n                  {stats.speakingTime === 1 ? '1 minute' : `${stats.speakingTime} minutes`}\n                </span>\n              </div>\n              <div className=\"text-xs text-slate-500 mt-2\">\n                Based on average reading speed of 200 WPM and speaking speed of 150 WPM\n              </div>\n            </div>\n          </div>\n\n          {/* Export Options */}\n          <div className=\"glassmorphism p-6 rounded-xl\">\n            <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Export Results</h3>\n            <div className=\"flex flex-wrap gap-3\">\n              <button\n                onClick={() => {\n                  const results = `Text Analysis Results\\n\\nWords: ${stats.words}\\nCharacters: ${stats.characters}\\nCharacters (no spaces): ${stats.charactersNoSpaces}\\nSentences: ${stats.sentences}\\nParagraphs: ${stats.paragraphs}\\nReading Time: ${stats.readingTime} minutes\\nSpeaking Time: ${stats.speakingTime} minutes`;\n                  copyToClipboard(results);\n                }}\n                disabled={!text}\n                className=\"px-4 py-2 bg-cyan-600 hover:bg-cyan-700 disabled:bg-slate-700 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n                data-testid=\"button-copy-results\"\n              >\n                <i className=\"fas fa-copy mr-2\"></i>\n                Copy Results\n              </button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </ToolShell>\n  );\n}\n","size_bytes":10771},"client/src/pages/tools/audio/AudioConverter.jsx":{"content":"import { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nexport default function AudioConverter() {\n  const [file, setFile] = useState(null);\n  const [outputFormat, setOutputFormat] = useState('mp3');\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [convertedFile, setConvertedFile] = useState(null);\n  const [audioPreview, setAudioPreview] = useState('');\n  const audioRef = useRef(null);\n\n  const supportedFormats = [\n    { value: 'mp3', label: 'MP3', description: 'Most common audio format' },\n    { value: 'wav', label: 'WAV', description: 'High quality uncompressed' },\n    { value: 'ogg', label: 'OGG', description: 'Open source format' },\n    { value: 'webm', label: 'WebM', description: 'Web optimized format' },\n    { value: 'm4a', label: 'M4A', description: 'Apple audio format' }\n  ];\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('audio/')) {\n      setFile(selectedFile);\n      setError('');\n      setConvertedFile(null);\n      \n      // Create audio preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setAudioPreview(e.target.result);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid audio file');\n    }\n  }, []);\n\n  const downloadFile = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleConvert = async () => {\n    if (!file) {\n      setError('Please select an audio file');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n    setConvertedFile(null);\n\n    try {\n      // Create audio context for processing\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // Read the file as array buffer\n      const arrayBuffer = await file.arrayBuffer();\n      \n      // Decode the audio data\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Create offline context for rendering\n      const offlineContext = new OfflineAudioContext(\n        audioBuffer.numberOfChannels,\n        audioBuffer.length,\n        audioBuffer.sampleRate\n      );\n      \n      // Create buffer source\n      const source = offlineContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(offlineContext.destination);\n      source.start();\n      \n      // Render the audio\n      const renderedBuffer = await offlineContext.startRendering();\n      \n      // Convert to the desired format\n      const blob = await audioBufferToBlob(renderedBuffer, outputFormat);\n      \n      const originalExtension = file.name.split('.').pop();\n      const fileName = file.name.replace(`.${originalExtension}`, `.${outputFormat}`);\n      \n      setConvertedFile({\n        name: fileName,\n        blob: blob,\n        size: blob.size,\n        url: URL.createObjectURL(blob)\n      });\n\n    } catch (err) {\n      console.error('Conversion error:', err);\n      setError('Error converting audio. The format might not be supported by your browser.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Convert AudioBuffer to Blob\n  const audioBufferToBlob = async (audioBuffer, format) => {\n    const numberOfChannels = audioBuffer.numberOfChannels;\n    const sampleRate = audioBuffer.sampleRate;\n    const length = audioBuffer.length;\n    \n    if (format === 'wav') {\n      return audioBufferToWavBlob(audioBuffer);\n    }\n    \n    // For other formats, we'll use MediaRecorder API\n    return new Promise((resolve, reject) => {\n      // Create a new audio context and source\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      \n      // Create media stream destination\n      const destination = audioContext.createMediaStreamDestination();\n      source.connect(destination);\n      \n      // Set up MediaRecorder\n      const mediaRecorder = new MediaRecorder(destination.stream, {\n        mimeType: getMimeType(format),\n        audioBitsPerSecond: 128000\n      });\n      \n      const chunks = [];\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: getMimeType(format) });\n        resolve(blob);\n      };\n      \n      mediaRecorder.onerror = reject;\n      \n      mediaRecorder.start();\n      source.start();\n      \n      // Stop recording after the audio duration\n      setTimeout(() => {\n        source.stop();\n        mediaRecorder.stop();\n      }, (length / sampleRate) * 1000 + 100);\n    });\n  };\n\n  // Convert AudioBuffer to WAV Blob (manual implementation)\n  const audioBufferToWavBlob = (audioBuffer) => {\n    const numberOfChannels = audioBuffer.numberOfChannels;\n    const sampleRate = audioBuffer.sampleRate;\n    const length = audioBuffer.length;\n    const bytesPerSample = 2;\n    const blockAlign = numberOfChannels * bytesPerSample;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = length * blockAlign;\n    const headerSize = 44;\n    const totalSize = headerSize + dataSize;\n    \n    const buffer = new ArrayBuffer(totalSize);\n    const view = new DataView(buffer);\n    \n    // WAV header\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, totalSize - 8, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n    \n    // Convert float samples to 16-bit PCM\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = audioBuffer.getChannelData(channel)[i];\n        const intSample = Math.max(-1, Math.min(1, sample));\n        view.setInt16(offset, intSample < 0 ? intSample * 0x8000 : intSample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n    \n    return new Blob([buffer], { type: 'audio/wav' });\n  };\n\n  const getMimeType = (format) => {\n    const mimeTypes = {\n      mp3: 'audio/mpeg',\n      wav: 'audio/wav',\n      ogg: 'audio/ogg',\n      webm: 'audio/webm',\n      m4a: 'audio/mp4'\n    };\n    return mimeTypes[format] || 'audio/mpeg';\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDuration = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-purple-500/10 mb-6\">\n          <i className=\"fas fa-exchange-alt text-2xl text-purple-400\"></i>\n        </div>\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-400 to-purple-600 bg-clip-text text-transparent\">\n          Audio Converter\n        </h1>\n        <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-2xl mx-auto\">\n          Convert audio files between different formats. Process files entirely in your browser.\n        </p>\n      </div>\n\n      {/* Main Tool */}\n      <Card className=\"glassmorphism\">\n        <CardContent className=\"p-6 space-y-6\">\n          {/* File Upload */}\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"audio-file\" className=\"text-base font-medium\">\n              Select Audio File\n            </Label>\n            <Input\n              id=\"audio-file\"\n              type=\"file\"\n              accept=\"audio/*\"\n              onChange={handleFileChange}\n              className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100\"\n            />\n            {file && (\n              <div className=\"text-sm text-slate-600 dark:text-slate-300\">\n                Selected: {file.name} ({formatFileSize(file.size)})\n              </div>\n            )}\n          </div>\n\n          {/* Audio Preview */}\n          {audioPreview && (\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Audio Preview</Label>\n              <Card className=\"bg-slate-50 dark:bg-slate-800/50\">\n                <CardContent className=\"p-4\">\n                  <audio\n                    ref={audioRef}\n                    src={audioPreview}\n                    controls\n                    className=\"w-full\"\n                    preload=\"metadata\"\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Output Format Selection */}\n          {file && (\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Output Format</Label>\n              <Select value={outputFormat} onValueChange={setOutputFormat}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {supportedFormats.map((format) => (\n                    <SelectItem key={format.value} value={format.value}>\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{format.label}</span>\n                        <span className=\"text-sm text-slate-500\">{format.description}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Error Display */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <i className=\"fas fa-exclamation-triangle w-4 h-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Button */}\n          {file && (\n            <Button\n              onClick={handleConvert}\n              disabled={processing}\n              className=\"w-full bg-purple-500 hover:bg-purple-600 text-white\"\n              size=\"lg\"\n            >\n              {processing ? (\n                <>\n                  <i className=\"fas fa-spinner animate-spin mr-2\" />\n                  Converting Audio...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-exchange-alt mr-2\" />\n                  Convert to {outputFormat.toUpperCase()}\n                </>\n              )}\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {convertedFile && (\n        <Card className=\"glassmorphism\">\n          <CardContent className=\"p-6 space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-green-500/10 mb-4\">\n                <i className=\"fas fa-check-circle text-2xl text-green-400\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Conversion Complete!</h3>\n              <p className=\"text-slate-600 dark:text-slate-300\">\n                Your audio has been converted successfully.\n              </p>\n            </div>\n            \n            {/* Converted Audio Preview */}\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Converted Audio</Label>\n              <Card className=\"bg-slate-50 dark:bg-slate-800/50\">\n                <CardContent className=\"p-4 space-y-4\">\n                  <audio\n                    src={convertedFile.url}\n                    controls\n                    className=\"w-full\"\n                    preload=\"metadata\"\n                  />\n                  <div className=\"flex justify-between text-sm text-slate-600 dark:text-slate-300\">\n                    <span>{convertedFile.name}</span>\n                    <span>{formatFileSize(convertedFile.size)}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Download Button */}\n            <div className=\"text-center\">\n              <Button \n                onClick={() => downloadFile(convertedFile.blob, convertedFile.name)}\n                className=\"bg-green-500 hover:bg-green-600 text-white\"\n                size=\"lg\"\n              >\n                <i className=\"fas fa-download mr-2\" />\n                Download Converted Audio\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-shield-alt text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Privacy First</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            All audio processing happens locally. Files never leave your device.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-play text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Preview & Play</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Listen to your audio before and after conversion.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-cogs text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Multiple Formats</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Convert between MP3, WAV, OGG, WebM, and M4A formats.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15474},"client/src/pages/tools/image/BatchImageProcessor.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function BatchImageProcessor() {\n  const [files, setFiles] = useState([]);\n  const [operation, setOperation] = useState('resize');\n  const [resizeWidth, setResizeWidth] = useState([800]);\n  const [resizeHeight, setResizeHeight] = useState([600]);\n  const [maintainAspectRatio, setMaintainAspectRatio] = useState(true);\n  const [quality, setQuality] = useState([80]);\n  const [outputFormat, setOutputFormat] = useState('original');\n  const [processing, setProcessing] = useState(false);\n  const [processedImages, setProcessedImages] = useState([]);\n  const [error, setError] = useState('');\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'batch-process');\n\n  const operations = {\n    resize: 'Resize Images',\n    compress: 'Compress Images',\n    convert: 'Convert Format',\n    watermark: 'Add Watermark'\n  };\n\n  const formats = {\n    original: 'Keep Original',\n    jpeg: 'JPEG',\n    png: 'PNG',\n    webp: 'WebP'\n  };\n\n  const handleFilesChange = useCallback((e) => {\n    const selectedFiles = Array.from(e.target.files).filter(file => file.type.startsWith('image/'));\n    \n    if (selectedFiles.length === 0) {\n      setError('Please select at least one image file');\n      return;\n    }\n\n    if (selectedFiles.length > 50) {\n      setError('Maximum 50 images allowed for batch processing');\n      return;\n    }\n\n    setFiles(selectedFiles);\n    setProcessedImages([]);\n    setError('');\n  }, []);\n\n  const processImage = async (file, canvas, ctx) => {\n    return new Promise((resolve) => {\n      const img = new Image();\n      const reader = new FileReader();\n      \n      reader.onload = (e) => {\n        img.onload = () => {\n          let targetWidth = img.width;\n          let targetHeight = img.height;\n          \n          if (operation === 'resize') {\n            targetWidth = resizeWidth[0];\n            targetHeight = resizeHeight[0];\n            \n            if (maintainAspectRatio) {\n              const aspectRatio = img.width / img.height;\n              if (targetWidth / targetHeight > aspectRatio) {\n                targetWidth = targetHeight * aspectRatio;\n              } else {\n                targetHeight = targetWidth / aspectRatio;\n              }\n            }\n          }\n          \n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          \n          // Clear and draw image\n          ctx.clearRect(0, 0, targetWidth, targetHeight);\n          ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n          \n          // Determine output format\n          let outputMime = file.type;\n          let fileExtension = file.name.split('.').pop();\n          \n          if (outputFormat !== 'original') {\n            outputMime = `image/${outputFormat}`;\n            fileExtension = outputFormat === 'jpeg' ? 'jpg' : outputFormat;\n          }\n          \n          // Apply quality if JPEG\n          const qualityValue = outputMime === 'image/jpeg' ? quality[0] / 100 : 0.95;\n          \n          canvas.toBlob((blob) => {\n            const processedFile = {\n              blob,\n              name: file.name.replace(/\\.[^/.]+$/, `_processed.${fileExtension}`),\n              originalName: file.name,\n              size: blob.size\n            };\n            resolve(processedFile);\n          }, outputMime, qualityValue);\n        };\n        \n        img.src = e.target.result;\n      };\n      \n      reader.readAsDataURL(file);\n    });\n  };\n\n  const processBatch = async () => {\n    if (files.length === 0) {\n      setError('Please select images to process');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n    \n    try {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const processed = [];\n      \n      for (let i = 0; i < files.length; i++) {\n        const processedFile = await processImage(files[i], canvas, ctx);\n        processed.push(processedFile);\n        \n        // Update progress\n        const progress = ((i + 1) / files.length) * 100;\n        console.log(`Processing progress: ${progress.toFixed(1)}%`);\n      }\n      \n      setProcessedImages(processed);\n      \n      toast({\n        title: \"Success!\",\n        description: `${processed.length} images processed successfully.`,\n      });\n      \n    } catch (err) {\n      console.error('Error processing images:', err);\n      setError('Failed to process images. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const downloadAll = async () => {\n    if (processedImages.length === 0) {\n      setError('No processed images to download');\n      return;\n    }\n\n    try {\n      const zip = new JSZip();\n      \n      processedImages.forEach((img, index) => {\n        zip.file(img.name, img.blob);\n      });\n      \n      const zipBlob = await zip.generateAsync({ type: 'blob' });\n      saveAs(zipBlob, `batch_processed_images_${operation}.zip`);\n      \n      toast({\n        title: \"Downloaded!\",\n        description: \"All processed images have been downloaded as a ZIP file.\",\n      });\n      \n    } catch (err) {\n      console.error('Error creating ZIP:', err);\n      setError('Failed to create download ZIP. Please try again.');\n    }\n  };\n\n  const downloadSingle = (processedFile) => {\n    saveAs(processedFile.blob, processedFile.name);\n  };\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Upload & Settings</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Upload multiple images and configure batch processing\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"images-upload\" className=\"text-slate-300\">Choose Images (max 50)</Label>\n              <Input\n                id=\"images-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                multiple\n                onChange={handleFilesChange}\n                className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                data-testid=\"input-images-files\"\n              />\n              {files.length > 0 && (\n                <p className=\"text-sm text-slate-400 mt-2\">{files.length} images selected</p>\n              )}\n            </div>\n\n            {files.length > 0 && (\n              <>\n                <div>\n                  <Label className=\"text-slate-300\">Processing Operation</Label>\n                  <Select value={operation} onValueChange={setOperation}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(operations).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {operation === 'resize' && (\n                  <>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-slate-300\">Width: {resizeWidth[0]}px</Label>\n                        <Slider\n                          value={resizeWidth}\n                          onValueChange={setResizeWidth}\n                          max={2000}\n                          min={100}\n                          step={50}\n                          className=\"mt-2\"\n                          data-testid=\"slider-width\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-slate-300\">Height: {resizeHeight[0]}px</Label>\n                        <Slider\n                          value={resizeHeight}\n                          onValueChange={setResizeHeight}\n                          max={2000}\n                          min={100}\n                          step={50}\n                          className=\"mt-2\"\n                          data-testid=\"slider-height\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"aspect-ratio\"\n                        checked={maintainAspectRatio}\n                        onCheckedChange={setMaintainAspectRatio}\n                        data-testid=\"checkbox-aspect-ratio\"\n                      />\n                      <Label htmlFor=\"aspect-ratio\" className=\"text-slate-300\">Maintain aspect ratio</Label>\n                    </div>\n                  </>\n                )}\n\n                {(operation === 'compress' || operation === 'convert') && (\n                  <div>\n                    <Label className=\"text-slate-300\">Quality: {quality[0]}%</Label>\n                    <Slider\n                      value={quality}\n                      onValueChange={setQuality}\n                      max={100}\n                      min={10}\n                      step={5}\n                      className=\"mt-2\"\n                      data-testid=\"slider-quality\"\n                    />\n                  </div>\n                )}\n\n                <div>\n                  <Label className=\"text-slate-300\">Output Format</Label>\n                  <Select value={outputFormat} onValueChange={setOutputFormat}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(formats).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button\n                    onClick={processBatch}\n                    disabled={processing}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n                    data-testid=\"button-process-batch\"\n                  >\n                    {processing ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-cogs mr-2\"></i>\n                        Process Images\n                      </>\n                    )}\n                  </Button>\n                  \n                  {processedImages.length > 0 && (\n                    <Button\n                      onClick={downloadAll}\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid=\"button-download-all\"\n                    >\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download All\n                    </Button>\n                  )}\n                </div>\n              </>\n            )}\n\n            {error && (\n              <Alert className=\"border-red-500 bg-red-500/10\">\n                <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Results</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              {processedImages.length > 0 ? `${processedImages.length} images processed` : 'Processed images will appear here'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {processedImages.length > 0 ? (\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {processedImages.map((img, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-slate-800/50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-slate-300 text-sm font-medium\">{img.name}</p>\n                      <p className=\"text-slate-400 text-xs\">\n                        {(img.size / 1024).toFixed(1)} KB\n                      </p>\n                    </div>\n                    <Button\n                      onClick={() => downloadSingle(img)}\n                      size=\"sm\"\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid={`button-download-${index}`}\n                    >\n                      <i className=\"fas fa-download\"></i>\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-slate-400\">\n                <i className=\"fas fa-layer-group text-4xl mb-4\"></i>\n                <p>Process images to see results</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Images',\n      description: 'Select multiple images (up to 50) for batch processing'\n    },\n    {\n      title: 'Choose Operation',\n      description: 'Select resize, compress, convert, or watermark operation'\n    },\n    {\n      title: 'Configure Settings',\n      description: 'Adjust dimensions, quality, and output format'\n    },\n    {\n      title: 'Process & Download',\n      description: 'Process all images and download individually or as ZIP'\n    }\n  ];\n\n  const benefits = [\n    'Process up to 50 images at once',\n    'Multiple operations available',\n    'Customizable output settings',\n    'Download as ZIP or individually',\n    'Real-time processing progress'\n  ];\n\n  const useCases = [\n    'Preparing images for web upload',\n    'Creating consistent image sizes',\n    'Bulk format conversion',\n    'Social media optimization',\n    'Portfolio preparation'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":15226},"client/src/pages/tools/image/ImageBlurTool.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageBlurTool() {\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState('');\n  const [blurType, setBlurType] = useState('gaussian');\n  const [blurIntensity, setBlurIntensity] = useState([10]);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const canvasRef = useRef(null);\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'blur');\n\n  const blurTypes = {\n    gaussian: 'Gaussian Blur',\n    motion: 'Motion Blur',\n    radial: 'Radial Blur',\n    selective: 'Selective Blur'\n  };\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      setFile(selectedFile);\n      setError('');\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target.result);\n        setTimeout(() => applyBlurPreview(e.target.result), 100);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid image file');\n    }\n  }, []);\n\n  const applyBlurPreview = useCallback((imageSrc) => {\n    if (!imageSrc) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Apply blur effect using CSS filter\n      ctx.filter = `blur(${blurIntensity[0]}px)`;\n      ctx.drawImage(img, 0, 0);\n      \n      // Reset filter\n      ctx.filter = 'none';\n    };\n    \n    img.src = imageSrc;\n  }, [blurType, blurIntensity]);\n\n  const downloadBlurredImage = async () => {\n    if (!canvasRef.current) {\n      setError('No preview available to download');\n      return;\n    }\n\n    setProcessing(true);\n    \n    try {\n      canvasRef.current.toBlob((blob) => {\n        const fileName = file.name.replace(/\\.[^/.]+$/, `_blurred_${blurType}.png`);\n        saveAs(blob, fileName);\n        \n        toast({\n          title: \"Success!\",\n          description: \"Blurred image has been downloaded successfully.\",\n        });\n        setProcessing(false);\n      }, 'image/png');\n    } catch (err) {\n      console.error('Error downloading image:', err);\n      setError('Failed to download blurred image. Please try again.');\n      setProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (preview) {\n      applyBlurPreview(preview);\n    }\n  }, [preview, blurType, blurIntensity, applyBlurPreview]);\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Upload & Settings</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Upload an image and apply blur effects\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"image-upload\" className=\"text-slate-300\">Choose Image File</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                data-testid=\"input-image-file\"\n              />\n            </div>\n\n            {file && (\n              <>\n                <div>\n                  <Label className=\"text-slate-300\">Blur Type</Label>\n                  <Select value={blurType} onValueChange={setBlurType}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(blurTypes).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-300\">Blur Intensity: {blurIntensity[0]}px</Label>\n                  <Slider\n                    value={blurIntensity}\n                    onValueChange={setBlurIntensity}\n                    max={50}\n                    min={1}\n                    step={1}\n                    className=\"mt-2\"\n                    data-testid=\"slider-blur-intensity\"\n                  />\n                </div>\n\n                <Button\n                  onClick={downloadBlurredImage}\n                  disabled={processing}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                  data-testid=\"button-download-blurred\"\n                >\n                  {processing ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download Blurred Image\n                    </>\n                  )}\n                </Button>\n              </>\n            )}\n\n            {error && (\n              <Alert className=\"border-red-500 bg-red-500/10\">\n                <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Preview</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              See how your blurred image will look\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {preview ? (\n              <div className=\"text-center\">\n                <canvas\n                  ref={canvasRef}\n                  className=\"max-w-full h-auto border border-slate-600 rounded-lg\"\n                  style={{ maxHeight: '400px' }}\n                />\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-slate-400\">\n                <i className=\"fas fa-image text-4xl mb-4\"></i>\n                <p>Upload an image to see the preview</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Image',\n      description: 'Select the image you want to apply blur effects to'\n    },\n    {\n      title: 'Choose Blur Type',\n      description: 'Select from gaussian, motion, radial, or selective blur'\n    },\n    {\n      title: 'Adjust Intensity',\n      description: 'Use the slider to control the blur strength'\n    },\n    {\n      title: 'Download Result',\n      description: 'Save your blurred image'\n    }\n  ];\n\n  const benefits = [\n    'Multiple blur effect types',\n    'Adjustable blur intensity',\n    'Real-time preview',\n    'High-quality output',\n    'Perfect for privacy protection'\n  ];\n\n  const useCases = [\n    'Protecting privacy in photos',\n    'Creating artistic effects',\n    'Background softening',\n    'Focus emphasis',\n    'Censoring sensitive information'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":8311},"client/src/pages/tools/image/ImageCollageMaker.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageCollageMaker() {\n  const [files, setFiles] = useState([]);\n  const [layout, setLayout] = useState('grid-2x2');\n  const [canvasSize, setCanvasSize] = useState('1080x1080');\n  const [spacing, setSpacing] = useState(10);\n  const [backgroundColor, setBackgroundColor] = useState('#ffffff');\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const canvasRef = useRef(null);\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'collage');\n\n  const layouts = {\n    'grid-2x2': '2x2 Grid',\n    'grid-3x3': '3x3 Grid',\n    'grid-1x4': '1x4 Row',\n    'grid-4x1': '4x1 Column',\n    'mosaic': 'Mosaic Layout',\n    'polaroid': 'Polaroid Style'\n  };\n\n  const canvasSizes = {\n    '1080x1080': '1080x1080 (Square)',\n    '1920x1080': '1920x1080 (Landscape)',\n    '1080x1920': '1080x1920 (Portrait)',\n    '1200x800': '1200x800 (Wide)',\n    '800x1200': '800x1200 (Tall)'\n  };\n\n  const handleFilesChange = useCallback((e) => {\n    const selectedFiles = Array.from(e.target.files).filter(file => file.type.startsWith('image/'));\n    \n    if (selectedFiles.length === 0) {\n      setError('Please select at least one image file');\n      return;\n    }\n\n    if (selectedFiles.length > 9) {\n      setError('Maximum 9 images allowed');\n      return;\n    }\n\n    setFiles(selectedFiles);\n    setError('');\n    \n    // Auto-generate preview\n    setTimeout(() => generateCollagePreview(selectedFiles), 100);\n  }, []);\n\n  const generateCollagePreview = useCallback(async (imageFiles) => {\n    if (!imageFiles || imageFiles.length === 0) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    const [width, height] = canvasSize.split('x').map(Number);\n    \n    canvas.width = width;\n    canvas.height = height;\n    \n    // Clear canvas with background color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    \n    try {\n      const images = await Promise.all(\n        imageFiles.map(file => {\n          return new Promise((resolve, reject) => {\n            const img = new Image();\n            const reader = new FileReader();\n            \n            reader.onload = (e) => {\n              img.onload = () => resolve(img);\n              img.onerror = reject;\n              img.src = e.target.result;\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file);\n          });\n        })\n      );\n      \n      drawCollageLayout(ctx, images, width, height);\n    } catch (err) {\n      console.error('Error loading images:', err);\n      setError('Failed to load images for preview');\n    }\n  }, [layout, canvasSize, spacing, backgroundColor]);\n\n  const drawCollageLayout = (ctx, images, width, height) => {\n    const margin = spacing;\n    \n    switch (layout) {\n      case 'grid-2x2':\n        drawGrid(ctx, images, 2, 2, width, height, margin);\n        break;\n      case 'grid-3x3':\n        drawGrid(ctx, images, 3, 3, width, height, margin);\n        break;\n      case 'grid-1x4':\n        drawGrid(ctx, images, 4, 1, width, height, margin);\n        break;\n      case 'grid-4x1':\n        drawGrid(ctx, images, 1, 4, width, height, margin);\n        break;\n      case 'mosaic':\n        drawMosaicLayout(ctx, images, width, height, margin);\n        break;\n      case 'polaroid':\n        drawPolaroidLayout(ctx, images, width, height, margin);\n        break;\n    }\n  };\n\n  const drawGrid = (ctx, images, cols, rows, width, height, margin) => {\n    const totalMarginX = margin * (cols + 1);\n    const totalMarginY = margin * (rows + 1);\n    const cellWidth = (width - totalMarginX) / cols;\n    const cellHeight = (height - totalMarginY) / rows;\n    \n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const imageIndex = row * cols + col;\n        if (imageIndex >= images.length) break;\n        \n        const x = margin + col * (cellWidth + margin);\n        const y = margin + row * (cellHeight + margin);\n        \n        drawImageToFit(ctx, images[imageIndex], x, y, cellWidth, cellHeight);\n      }\n    }\n  };\n\n  const drawMosaicLayout = (ctx, images, width, height, margin) => {\n    if (images.length === 0) return;\n    \n    if (images.length === 1) {\n      drawImageToFit(ctx, images[0], margin, margin, width - 2 * margin, height - 2 * margin);\n    } else if (images.length === 2) {\n      const halfWidth = (width - 3 * margin) / 2;\n      drawImageToFit(ctx, images[0], margin, margin, halfWidth, height - 2 * margin);\n      drawImageToFit(ctx, images[1], margin + halfWidth + margin, margin, halfWidth, height - 2 * margin);\n    } else {\n      const bigSize = (width - 3 * margin) * 0.6;\n      const smallSize = (width - 3 * margin) * 0.4;\n      \n      drawImageToFit(ctx, images[0], margin, margin, bigSize, bigSize);\n      \n      if (images.length > 1) {\n        drawImageToFit(ctx, images[1], margin + bigSize + margin, margin, smallSize, smallSize / 2 - margin / 2);\n      }\n      if (images.length > 2) {\n        drawImageToFit(ctx, images[2], margin + bigSize + margin, margin + smallSize / 2 + margin / 2, smallSize, smallSize / 2 - margin / 2);\n      }\n    }\n  };\n\n  const drawPolaroidLayout = (ctx, images, width, height, margin) => {\n    const polaroidWidth = Math.min(200, (width - margin * 4) / 3);\n    const polaroidHeight = polaroidWidth * 1.2;\n    \n    images.slice(0, 6).forEach((img, index) => {\n      const col = index % 3;\n      const row = Math.floor(index / 3);\n      \n      const x = margin + col * (polaroidWidth + margin);\n      const y = margin + row * (polaroidHeight + margin);\n      \n      // Draw polaroid background\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(x, y, polaroidWidth, polaroidHeight);\n      \n      // Draw image area\n      const imgHeight = polaroidHeight * 0.8;\n      drawImageToFit(ctx, img, x + 10, y + 10, polaroidWidth - 20, imgHeight - 20);\n      \n      // Add shadow\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';\n      ctx.shadowBlur = 10;\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 5;\n      ctx.strokeStyle = '#ddd';\n      ctx.strokeRect(x, y, polaroidWidth, polaroidHeight);\n      ctx.shadowColor = 'transparent';\n    });\n  };\n\n  const drawImageToFit = (ctx, img, x, y, width, height) => {\n    const imgAspect = img.width / img.height;\n    const boxAspect = width / height;\n    \n    let drawWidth, drawHeight, drawX, drawY;\n    \n    if (imgAspect > boxAspect) {\n      drawHeight = height;\n      drawWidth = height * imgAspect;\n      drawX = x - (drawWidth - width) / 2;\n      drawY = y;\n    } else {\n      drawWidth = width;\n      drawHeight = width / imgAspect;\n      drawX = x;\n      drawY = y - (drawHeight - height) / 2;\n    }\n    \n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.clip();\n    ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);\n    ctx.restore();\n  };\n\n  const downloadCollage = async () => {\n    if (!canvasRef.current || files.length === 0) {\n      setError('No images selected or preview not available');\n      return;\n    }\n\n    setProcessing(true);\n    \n    try {\n      canvasRef.current.toBlob((blob) => {\n        const fileName = `collage_${layout}_${canvasSize.replace('x', '_')}.png`;\n        saveAs(blob, fileName);\n        \n        toast({\n          title: \"Success!\",\n          description: \"Collage has been downloaded successfully.\",\n        });\n        setProcessing(false);\n      }, 'image/png');\n    } catch (err) {\n      console.error('Error downloading collage:', err);\n      setError('Failed to download collage. Please try again.');\n      setProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (files.length > 0) {\n      generateCollagePreview(files);\n    }\n  }, [files, layout, canvasSize, spacing, backgroundColor, generateCollagePreview]);\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Upload & Settings</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Upload images and customize your collage\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"images-upload\" className=\"text-slate-300\">Choose Images (max 9)</Label>\n              <Input\n                id=\"images-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                multiple\n                onChange={handleFilesChange}\n                className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                data-testid=\"input-images-files\"\n              />\n              {files.length > 0 && (\n                <p className=\"text-sm text-slate-400 mt-2\">{files.length} images selected</p>\n              )}\n            </div>\n\n            {files.length > 0 && (\n              <>\n                <div>\n                  <Label className=\"text-slate-300\">Layout Style</Label>\n                  <Select value={layout} onValueChange={setLayout}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(layouts).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-300\">Canvas Size</Label>\n                  <Select value={canvasSize} onValueChange={setCanvasSize}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(canvasSizes).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"spacing\" className=\"text-slate-300\">Spacing: {spacing}px</Label>\n                  <Input\n                    id=\"spacing\"\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"50\"\n                    value={spacing}\n                    onChange={(e) => setSpacing(Number(e.target.value))}\n                    className=\"bg-slate-800 border-slate-600\"\n                    data-testid=\"input-spacing\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bg-color\" className=\"text-slate-300\">Background Color</Label>\n                  <Input\n                    id=\"bg-color\"\n                    type=\"color\"\n                    value={backgroundColor}\n                    onChange={(e) => setBackgroundColor(e.target.value)}\n                    className=\"bg-slate-800 border-slate-600 h-12\"\n                    data-testid=\"input-background-color\"\n                  />\n                </div>\n\n                <Button\n                  onClick={downloadCollage}\n                  disabled={processing}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n                  data-testid=\"button-download-collage\"\n                >\n                  {processing ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download Collage\n                    </>\n                  )}\n                </Button>\n              </>\n            )}\n\n            {error && (\n              <Alert className=\"border-red-500 bg-red-500/10\">\n                <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Preview</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              See how your collage will look\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {files.length > 0 ? (\n              <div className=\"text-center\">\n                <canvas\n                  ref={canvasRef}\n                  className=\"max-w-full h-auto border border-slate-600 rounded-lg\"\n                  style={{ maxHeight: '400px' }}\n                />\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-slate-400\">\n                <i className=\"fas fa-th text-4xl mb-4\"></i>\n                <p>Upload images to create your collage</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Images',\n      description: 'Select multiple images (up to 9) for your collage'\n    },\n    {\n      title: 'Choose Layout',\n      description: 'Pick from grid, mosaic, or polaroid layouts'\n    },\n    {\n      title: 'Customize Settings',\n      description: 'Adjust canvas size, spacing, and background color'\n    },\n    {\n      title: 'Download Collage',\n      description: 'Save your beautiful photo collage'\n    }\n  ];\n\n  const benefits = [\n    'Multiple layout options',\n    'Customizable spacing and colors',\n    'Real-time preview',\n    'High-resolution output',\n    'Perfect for social media'\n  ];\n\n  const useCases = [\n    'Creating social media posts',\n    'Making photo albums',\n    'Travel memories',\n    'Event documentation',\n    'Family photo displays'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":14955},"client/src/pages/tools/image/ImageCompressor.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Progress } from '@/components/ui/progress';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageCompressor() {\n  const tool = getToolBySlug('image', 'compress');\n  const [images, setImages] = useState([]);\n  const [compressing, setCompressing] = useState(false);\n  const [quality, setQuality] = useState([80]);\n  const [format, setFormat] = useState('original');\n  const [maxWidth, setMaxWidth] = useState('');\n  const [maxHeight, setMaxHeight] = useState('');\n  const [compressionProgress, setCompressionProgress] = useState(0);\n  const { toast } = useToast();\n\n  const handleImageUpload = useCallback((event) => {\n    const files = Array.from(event.target.files);\n    const validImages = files.filter(file => file.type.startsWith('image/'));\n\n    if (validImages.length !== files.length) {\n      toast({\n        title: \"Invalid files detected\",\n        description: \"Only image files are allowed.\",\n        variant: \"destructive\",\n      });\n    }\n\n    const newImages = validImages.map((file, index) => ({\n      id: Date.now() + index,\n      file,\n      name: file.name,\n      originalSize: file.size,\n      originalFormat: file.type,\n      url: URL.createObjectURL(file),\n      compressed: null,\n      compressedSize: null,\n      compressionRatio: null\n    }));\n\n    setImages(prev => [...prev, ...newImages]);\n  }, [toast]);\n\n  const removeImage = (id) => {\n    setImages(prev => {\n      const filtered = prev.filter(img => img.id !== id);\n      const imageToRemove = prev.find(img => img.id === id);\n      if (imageToRemove) {\n        URL.revokeObjectURL(imageToRemove.url);\n        if (imageToRemove.compressed) {\n          URL.revokeObjectURL(imageToRemove.compressed);\n        }\n      }\n      return filtered;\n    });\n  };\n\n  const compressImage = async (imageData) => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate new dimensions if max width/height specified\n        let { width, height } = img;\n        \n        if (maxWidth && width > parseInt(maxWidth)) {\n          height = (height * parseInt(maxWidth)) / width;\n          width = parseInt(maxWidth);\n        }\n        \n        if (maxHeight && height > parseInt(maxHeight)) {\n          width = (width * parseInt(maxHeight)) / height;\n          height = parseInt(maxHeight);\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        // Draw image with new dimensions\n        ctx.drawImage(img, 0, 0, width, height);\n\n        // Determine output format\n        let outputFormat = imageData.originalFormat;\n        if (format !== 'original') {\n          outputFormat = `image/${format}`;\n        }\n\n        // Convert to blob with compression\n        const qualityValue = format === 'png' ? undefined : quality[0] / 100;\n        \n        canvas.toBlob(\n          (blob) => {\n            if (blob) {\n              const compressionRatio = ((imageData.originalSize - blob.size) / imageData.originalSize * 100).toFixed(1);\n              resolve({\n                blob,\n                size: blob.size,\n                compressionRatio: parseFloat(compressionRatio),\n                url: URL.createObjectURL(blob)\n              });\n            } else {\n              reject(new Error('Failed to compress image'));\n            }\n          },\n          outputFormat,\n          qualityValue\n        );\n      };\n\n      img.onerror = () => reject(new Error('Failed to load image'));\n      img.src = imageData.url;\n    });\n  };\n\n  const compressAllImages = async () => {\n    if (images.length === 0) {\n      toast({\n        title: \"No images selected\",\n        description: \"Please add at least one image to compress.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCompressing(true);\n    setCompressionProgress(0);\n    \n    const totalImages = images.length;\n    let processedImages = 0;\n\n    try {\n      const compressedImages = [];\n\n      for (const image of images) {\n        try {\n          const compressed = await compressImage(image);\n          const updatedImage = {\n            ...image,\n            compressed: compressed.url,\n            compressedSize: compressed.size,\n            compressionRatio: compressed.compressionRatio,\n            compressedBlob: compressed.blob\n          };\n          compressedImages.push(updatedImage);\n          \n          processedImages++;\n          setCompressionProgress((processedImages / totalImages) * 100);\n        } catch (error) {\n          console.error(`Error compressing ${image.name}:`, error);\n          compressedImages.push(image); // Keep original if compression fails\n          processedImages++;\n          setCompressionProgress((processedImages / totalImages) * 100);\n        }\n      }\n\n      setImages(compressedImages);\n      \n      const successfulCompressions = compressedImages.filter(img => img.compressed).length;\n      toast({\n        title: \"Compression completed!\",\n        description: `Successfully compressed ${successfulCompressions} out of ${totalImages} image(s).`,\n      });\n\n    } catch (error) {\n      console.error('Compression error:', error);\n      toast({\n        title: \"Compression failed\",\n        description: \"An error occurred during compression. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setCompressing(false);\n      setCompressionProgress(0);\n    }\n  };\n\n  const downloadImage = (image) => {\n    if (!image.compressedBlob) return;\n\n    let filename = image.name;\n    if (format !== 'original') {\n      const nameWithoutExt = image.name.replace(/\\.[^/.]+$/, '');\n      filename = `${nameWithoutExt}_compressed.${format === 'jpeg' ? 'jpg' : format}`;\n    } else {\n      filename = image.name.replace(/(\\.[^/.]+)$/, '_compressed$1');\n    }\n\n    saveAs(image.compressedBlob, filename);\n    \n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const downloadAllCompressed = async () => {\n    const compressedImages = images.filter(img => img.compressedBlob);\n    \n    if (compressedImages.length === 0) {\n      toast({\n        title: \"No compressed images\",\n        description: \"Please compress images first before downloading.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (compressedImages.length === 1) {\n      downloadImage(compressedImages[0]);\n      return;\n    }\n\n    // For multiple images, download them one by one\n    for (const image of compressedImages) {\n      downloadImage(image);\n      // Small delay between downloads\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  };\n\n  const clearAllImages = () => {\n    images.forEach(image => {\n      URL.revokeObjectURL(image.url);\n      if (image.compressed) {\n        URL.revokeObjectURL(image.compressed);\n      }\n    });\n    setImages([]);\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const calculateTotalSavings = () => {\n    const compressedImages = images.filter(img => img.compressedSize !== null);\n    if (compressedImages.length === 0) return { original: 0, compressed: 0, savings: 0 };\n\n    const totalOriginal = compressedImages.reduce((sum, img) => sum + img.originalSize, 0);\n    const totalCompressed = compressedImages.reduce((sum, img) => sum + img.compressedSize, 0);\n    const savings = ((totalOriginal - totalCompressed) / totalOriginal * 100).toFixed(1);\n\n    return {\n      original: totalOriginal,\n      compressed: totalCompressed,\n      savings: parseFloat(savings)\n    };\n  };\n\n  const totalSavings = calculateTotalSavings();\n\n  const toolContent = (\n    <div className=\"space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-compress text-green-400\"></i>\n            Upload Images\n          </CardTitle>\n          <CardDescription>\n            Select multiple images to compress and reduce file sizes\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Images</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supports JPEG, PNG, WebP, and other image formats\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compression Settings */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Compression Settings</CardTitle>\n            <CardDescription>\n              Adjust quality and output format for optimal compression\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Output Format</Label>\n                <Select value={format} onValueChange={setFormat}>\n                  <SelectTrigger data-testid=\"select-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"original\">Keep Original Format</SelectItem>\n                    <SelectItem value=\"jpeg\">JPEG (Smaller, lossy)</SelectItem>\n                    <SelectItem value=\"png\">PNG (Larger, lossless)</SelectItem>\n                    <SelectItem value=\"webp\">WebP (Modern, efficient)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {format !== 'png' && (\n                <div>\n                  <Label>Quality: {quality[0]}%</Label>\n                  <Slider\n                    value={quality}\n                    onValueChange={setQuality}\n                    max={100}\n                    min={10}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-quality\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                    <span>Smaller size</span>\n                    <span>Better quality</span>\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"max-width\">Max Width (px)</Label>\n                <Input\n                  id=\"max-width\"\n                  type=\"number\"\n                  value={maxWidth}\n                  onChange={(e) => setMaxWidth(e.target.value)}\n                  placeholder=\"Original width\"\n                  className=\"mt-1\"\n                  data-testid=\"input-max-width\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"max-height\">Max Height (px)</Label>\n                <Input\n                  id=\"max-height\"\n                  type=\"number\"\n                  value={maxHeight}\n                  onChange={(e) => setMaxHeight(e.target.value)}\n                  placeholder=\"Original height\"\n                  className=\"mt-1\"\n                  data-testid=\"input-max-height\"\n                />\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Compression Tips</h4>\n              <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                <li>‚Ä¢ JPEG: Best for photos, smaller files, some quality loss</li>\n                <li>‚Ä¢ PNG: Best for graphics with transparency, larger files</li>\n                <li>‚Ä¢ WebP: Modern format with excellent compression and quality</li>\n                <li>‚Ä¢ Lower quality = smaller file size but reduced image quality</li>\n                <li>‚Ä¢ Setting max dimensions will resize images proportionally</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Compression Progress */}\n      {compressing && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Compressing Images</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <Progress value={compressionProgress} className=\"w-full\" />\n              <p className=\"text-sm text-center text-muted-foreground\">\n                {Math.round(compressionProgress)}% complete\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Compression Summary */}\n      {images.some(img => img.compressedSize !== null) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Compression Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {images.filter(img => img.compressedSize !== null).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Images Processed</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-red-500\">\n                  {formatFileSize(totalSavings.original)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Original Size</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-500\">\n                  {formatFileSize(totalSavings.compressed)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Compressed Size</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-purple-500\">\n                  {totalSavings.savings}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Space Saved</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Images List */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Images ({images.length})</span>\n              <div className=\"flex gap-2\">\n                {images.some(img => img.compressedBlob) && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={downloadAllCompressed}\n                    data-testid=\"button-download-all\"\n                  >\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download All\n                  </Button>\n                )}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllImages}\n                  data-testid=\"button-clear-all\"\n                >\n                  <i className=\"fas fa-trash mr-2\"></i>\n                  Clear All\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {images.map((image, index) => (\n                <div\n                  key={image.id}\n                  className=\"flex items-center gap-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\"\n                  data-testid={`image-item-${index}`}\n                >\n                  <div className=\"flex gap-4\">\n                    <img\n                      src={image.url}\n                      alt={image.name}\n                      className=\"w-16 h-16 object-cover rounded border\"\n                    />\n                    {image.compressed && (\n                      <img\n                        src={image.compressed}\n                        alt={`${image.name} compressed`}\n                        className=\"w-16 h-16 object-cover rounded border\"\n                      />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-medium truncate\">{image.name}</h4>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Original:</span>\n                        <span>{formatFileSize(image.originalSize)}</span>\n                      </div>\n                      {image.compressedSize !== null && (\n                        <>\n                          <div className=\"flex justify-between\">\n                            <span>Compressed:</span>\n                            <span>{formatFileSize(image.compressedSize)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Savings:</span>\n                            <span className={image.compressionRatio > 0 ? 'text-green-600' : 'text-red-600'}>\n                              {image.compressionRatio > 0 ? '-' : '+'}{Math.abs(image.compressionRatio)}%\n                            </span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    {image.compressedBlob ? (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => downloadImage(image)}\n                        data-testid={`button-download-${index}`}\n                      >\n                        <i className=\"fas fa-download mr-2\"></i>\n                        Download\n                      </Button>\n                    ) : (\n                      <div className=\"text-sm text-muted-foreground\">\n                        Not compressed\n                      </div>\n                    )}\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeImage(image.id)}\n                      data-testid={`button-remove-${index}`}\n                    >\n                      <i className=\"fas fa-times\"></i>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Compress Button */}\n      {images.length > 0 && (\n        <div className=\"flex justify-center gap-4\">\n          <Button\n            onClick={compressAllImages}\n            disabled={compressing}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-compress-all\"\n          >\n            {compressing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Compressing...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-compress mr-2\"></i>\n                Compress All Images\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Compress Images</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Select multiple images you want to compress</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Adjust Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Choose quality, format, and maximum dimensions</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Compress Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Click compress to process all images at once</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Results</h4>\n                <p className=\"text-sm text-muted-foreground\">Download individual images or all compressed images</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Images',\n      description: 'Select one or multiple images for compression'\n    },\n    {\n      title: 'Adjust Settings',\n      description: 'Set quality level and output format preferences'\n    },\n    {\n      title: 'Compress Images',\n      description: 'Process all images with optimized compression'\n    },\n    {\n      title: 'Download Results',\n      description: 'Save compressed images individually or all at once'\n    }\n  ];\n\n  const benefits = [\n    'Reduce file sizes significantly',\n    'Batch processing for multiple images',\n    'Maintain quality while compressing',\n    'Multiple output formats supported',\n    'Instant compression results'\n  ];\n\n  const useCases = [\n    'Website optimization',\n    'Email attachments',\n    'Social media uploads',\n    'Storage space management',\n    'Faster loading times'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":23675},"client/src/pages/tools/image/ImageConverter.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageConverter() {\n  const tool = getToolBySlug('image', 'convert');\n  const [images, setImages] = useState([]);\n  const [converting, setConverting] = useState(false);\n  const [outputFormat, setOutputFormat] = useState('jpeg');\n  const [quality, setQuality] = useState([90]);\n  const [compressionLevel, setCompressionLevel] = useState([6]);\n  const { toast } = useToast();\n\n  const supportedFormats = {\n    'jpeg': { name: 'JPEG', mimeType: 'image/jpeg', extension: 'jpg' },\n    'png': { name: 'PNG', mimeType: 'image/png', extension: 'png' },\n    'webp': { name: 'WebP', mimeType: 'image/webp', extension: 'webp' },\n    'bmp': { name: 'BMP', mimeType: 'image/bmp', extension: 'bmp' },\n    'gif': { name: 'GIF', mimeType: 'image/gif', extension: 'gif' }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const files = Array.from(event.target.files);\n    const validImages = files.filter(file => file.type.startsWith('image/'));\n\n    if (validImages.length !== files.length) {\n      toast({\n        title: \"Invalid files detected\",\n        description: \"Only image files are allowed.\",\n        variant: \"destructive\",\n      });\n    }\n\n    const newImages = validImages.map((file, index) => ({\n      id: Date.now() + index,\n      file,\n      name: file.name,\n      originalFormat: file.type,\n      size: file.size,\n      url: URL.createObjectURL(file),\n      converted: false\n    }));\n\n    setImages(prev => [...prev, ...newImages]);\n  }, [toast]);\n\n  const removeImage = (id) => {\n    setImages(prev => {\n      const filtered = prev.filter(img => img.id !== id);\n      const imageToRemove = prev.find(img => img.id === id);\n      if (imageToRemove) {\n        URL.revokeObjectURL(imageToRemove.url);\n      }\n      return filtered;\n    });\n  };\n\n  const convertImage = async (imageData) => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // Handle transparency for JPEG\n        if (outputFormat === 'jpeg') {\n          ctx.fillStyle = '#FFFFFF';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n\n        ctx.drawImage(img, 0, 0);\n\n        const outputMimeType = supportedFormats[outputFormat].mimeType;\n        let qualityValue = 1;\n\n        if (outputFormat === 'jpeg' || outputFormat === 'webp') {\n          qualityValue = quality[0] / 100;\n        }\n\n        canvas.toBlob(\n          (blob) => {\n            if (blob) {\n              resolve(blob);\n            } else {\n              reject(new Error('Failed to convert image'));\n            }\n          },\n          outputMimeType,\n          qualityValue\n        );\n      };\n\n      img.onerror = () => reject(new Error('Failed to load image'));\n      img.src = imageData.url;\n    });\n  };\n\n  const convertAllImages = async () => {\n    if (images.length === 0) {\n      toast({\n        title: \"No images selected\",\n        description: \"Please add at least one image to convert.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setConverting(true);\n    let successCount = 0;\n    let errorCount = 0;\n\n    try {\n      for (const image of images) {\n        try {\n          const convertedBlob = await convertImage(image);\n          const filename = image.name.replace(/\\.[^/.]+$/, '') + '.' + supportedFormats[outputFormat].extension;\n          saveAs(convertedBlob, filename);\n          successCount++;\n        } catch (error) {\n          console.error(`Error converting ${image.name}:`, error);\n          errorCount++;\n        }\n      }\n\n      if (successCount > 0) {\n        toast({\n          title: \"Conversion completed!\",\n          description: `Successfully converted ${successCount} image(s) to ${supportedFormats[outputFormat].name}${errorCount > 0 ? `. ${errorCount} failed.` : '.'}`,\n        });\n      }\n\n      if (errorCount > 0 && successCount === 0) {\n        toast({\n          title: \"Conversion failed\",\n          description: \"Failed to convert all images. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n\n    } catch (error) {\n      console.error('Conversion error:', error);\n      toast({\n        title: \"Conversion failed\",\n        description: \"An error occurred during conversion. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConverting(false);\n    }\n  };\n\n  const clearAllImages = () => {\n    images.forEach(image => URL.revokeObjectURL(image.url));\n    setImages([]);\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFormatFromMimeType = (mimeType) => {\n    switch (mimeType) {\n      case 'image/jpeg': return 'JPEG';\n      case 'image/png': return 'PNG';\n      case 'image/webp': return 'WebP';\n      case 'image/gif': return 'GIF';\n      case 'image/bmp': return 'BMP';\n      default: return 'Unknown';\n    }\n  };\n\n  const toolContent = (\n    <div className=\"space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-exchange-alt text-green-400\"></i>\n            Upload Images\n          </CardTitle>\n          <CardDescription>\n            Select multiple images to convert between different formats\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Images</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supports JPEG, PNG, WebP, GIF, BMP, and other image formats\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Conversion Settings */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversion Settings</CardTitle>\n            <CardDescription>\n              Choose output format and quality settings\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Output Format</Label>\n                <Select value={outputFormat} onValueChange={setOutputFormat}>\n                  <SelectTrigger data-testid=\"select-output-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(supportedFormats).map(([key, format]) => (\n                      <SelectItem key={key} value={key}>\n                        {format.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {(outputFormat === 'jpeg' || outputFormat === 'webp') && (\n                <div>\n                  <Label>Quality: {quality[0]}%</Label>\n                  <Slider\n                    value={quality}\n                    onValueChange={setQuality}\n                    max={100}\n                    min={10}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-quality\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                    <span>Smaller size</span>\n                    <span>Better quality</span>\n                  </div>\n                </div>\n              )}\n\n              {outputFormat === 'png' && (\n                <div>\n                  <Label>PNG Compression: {compressionLevel[0]}</Label>\n                  <Slider\n                    value={compressionLevel}\n                    onValueChange={setCompressionLevel}\n                    max={9}\n                    min={0}\n                    step={1}\n                    className=\"mt-2\"\n                    data-testid=\"slider-compression\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                    <span>Faster</span>\n                    <span>Smaller size</span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Format Information</h4>\n              <div className=\"text-sm text-blue-800 dark:text-blue-200\">\n                {outputFormat === 'jpeg' && (\n                  <p>JPEG: Best for photos. Smaller file sizes but no transparency support.</p>\n                )}\n                {outputFormat === 'png' && (\n                  <p>PNG: Lossless compression with transparency support. Larger file sizes.</p>\n                )}\n                {outputFormat === 'webp' && (\n                  <p>WebP: Modern format with excellent compression and quality. Supports transparency.</p>\n                )}\n                {outputFormat === 'gif' && (\n                  <p>GIF: Supports animation and transparency. Limited to 256 colors.</p>\n                )}\n                {outputFormat === 'bmp' && (\n                  <p>BMP: Uncompressed format. Very large file sizes but maximum quality.</p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Image Preview */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Images to Convert ({images.length})</span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearAllImages}\n                data-testid=\"button-clear-all\"\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                Clear All\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {images.map((image, index) => (\n                <div\n                  key={image.id}\n                  className=\"flex items-center gap-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\"\n                  data-testid={`image-item-${index}`}\n                >\n                  <img\n                    src={image.url}\n                    alt={image.name}\n                    className=\"w-16 h-16 object-cover rounded border\"\n                  />\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-medium truncate\">{image.name}</h4>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <p>Format: {getFormatFromMimeType(image.originalFormat)} ‚Üí {supportedFormats[outputFormat].name}</p>\n                      <p>Size: {formatFileSize(image.size)}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-muted-foreground\">Status</div>\n                      <div className=\"text-sm font-medium text-blue-600\">\n                        Ready\n                      </div>\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeImage(image.id)}\n                      data-testid={`button-remove-${index}`}\n                    >\n                      <i className=\"fas fa-times\"></i>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Convert Button */}\n      {images.length > 0 && (\n        <div className=\"flex justify-center gap-4\">\n          <Button\n            onClick={convertAllImages}\n            disabled={converting}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-convert-all\"\n          >\n            {converting ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Converting...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-exchange-alt mr-2\"></i>\n                Convert All to {supportedFormats[outputFormat].name}\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Convert Images</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Select one or more images from your device</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Output Format</h4>\n                <p className=\"text-sm text-muted-foreground\">Select the desired format and adjust quality settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Review and Convert</h4>\n                <p className=\"text-sm text-muted-foreground\">Check your images and click convert to download the results</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Converted Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Each converted image will be automatically downloaded</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Format Comparison */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Format Comparison Guide</CardTitle>\n          <CardDescription>\n            Choose the best format for your needs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <div className=\"p-4 border rounded-lg\">\n              <h4 className=\"font-semibold text-blue-600 mb-2\">JPEG</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>‚Ä¢ Best for photos</li>\n                <li>‚Ä¢ Small file sizes</li>\n                <li>‚Ä¢ No transparency</li>\n                <li>‚Ä¢ Lossy compression</li>\n              </ul>\n            </div>\n            <div className=\"p-4 border rounded-lg\">\n              <h4 className=\"font-semibold text-green-600 mb-2\">PNG</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>‚Ä¢ Best for graphics</li>\n                <li>‚Ä¢ Transparency support</li>\n                <li>‚Ä¢ Larger file sizes</li>\n                <li>‚Ä¢ Lossless compression</li>\n              </ul>\n            </div>\n            <div className=\"p-4 border rounded-lg\">\n              <h4 className=\"font-semibold text-purple-600 mb-2\">WebP</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>‚Ä¢ Modern format</li>\n                <li>‚Ä¢ Excellent compression</li>\n                <li>‚Ä¢ Transparency support</li>\n                <li>‚Ä¢ Smaller than PNG</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Images',\n      description: 'Select one or multiple images in any format'\n    },\n    {\n      title: 'Choose Format',\n      description: 'Pick your desired output format (JPEG, PNG, WebP, etc.)'\n    },\n    {\n      title: 'Adjust Quality',\n      description: 'Set quality and compression settings for optimal results'\n    },\n    {\n      title: 'Download Converted',\n      description: 'Get your converted images automatically'\n    }\n  ];\n\n  const benefits = [\n    'Convert between all major image formats',\n    'Batch processing for multiple images',\n    'Quality control and optimization',\n    'No format restrictions',\n    'Instant conversion results'\n  ];\n\n  const useCases = [\n    'Format compatibility for different platforms',\n    'Optimizing images for web use',\n    'Converting legacy formats to modern ones',\n    'Preparing images for specific applications',\n    'Batch converting photo collections'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":19003},"client/src/pages/tools/image/ImageCropper.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageCropper() {\n  const tool = getToolBySlug('image', 'crop');\n  const [image, setImage] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const [cropping, setCropping] = useState(false);\n  const [cropMode, setCropMode] = useState('freeform');\n  \n  // Crop area state\n  const [cropArea, setCropArea] = useState({\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  });\n  \n  // Aspect ratio presets\n  const [aspectRatio, setAspectRatio] = useState('custom');\n  const [customWidth, setCustomWidth] = useState('');\n  const [customHeight, setCustomHeight] = useState('');\n  \n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  const { toast } = useToast();\n\n  const aspectRatios = {\n    'custom': { name: 'Custom', ratio: null },\n    '1:1': { name: 'Square (1:1)', ratio: 1 },\n    '4:3': { name: 'Standard (4:3)', ratio: 4/3 },\n    '16:9': { name: 'Widescreen (16:9)', ratio: 16/9 },\n    '3:2': { name: 'Photo (3:2)', ratio: 3/2 },\n    '5:4': { name: 'Print (5:4)', ratio: 5/4 },\n    '9:16': { name: 'Portrait (9:16)', ratio: 9/16 },\n    '2:3': { name: 'Portrait Photo (2:3)', ratio: 2/3 }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = new Image();\n      img.onload = () => {\n        setImage({\n          file,\n          url: e.target.result,\n          naturalWidth: img.width,\n          naturalHeight: img.height\n        });\n        \n        // Reset crop area when new image is loaded\n        const initialSize = Math.min(img.width, img.height, 200);\n        setCropArea({\n          x: (img.width - initialSize) / 2,\n          y: (img.height - initialSize) / 2,\n          width: initialSize,\n          height: initialSize\n        });\n        \n        setImageLoaded(true);\n        setCroppedImage(null);\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(file);\n  }, [toast]);\n\n  const updateCropArea = (newCropArea) => {\n    if (!image) return;\n    \n    // Ensure crop area stays within image bounds\n    const boundedArea = {\n      x: Math.max(0, Math.min(newCropArea.x, image.naturalWidth - newCropArea.width)),\n      y: Math.max(0, Math.min(newCropArea.y, image.naturalHeight - newCropArea.height)),\n      width: Math.max(10, Math.min(newCropArea.width, image.naturalWidth - newCropArea.x)),\n      height: Math.max(10, Math.min(newCropArea.height, image.naturalHeight - newCropArea.y))\n    };\n    \n    setCropArea(boundedArea);\n  };\n\n  const handleAspectRatioChange = (ratio) => {\n    setAspectRatio(ratio);\n    \n    if (ratio !== 'custom' && aspectRatios[ratio].ratio) {\n      const targetRatio = aspectRatios[ratio].ratio;\n      const currentArea = { ...cropArea };\n      \n      // Adjust height based on width and aspect ratio\n      const newHeight = currentArea.width / targetRatio;\n      \n      if (newHeight <= image.naturalHeight - currentArea.y) {\n        updateCropArea({ ...currentArea, height: newHeight });\n      } else {\n        // Adjust width based on available height\n        const maxHeight = image.naturalHeight - currentArea.y;\n        const newWidth = maxHeight * targetRatio;\n        updateCropArea({ ...currentArea, width: newWidth, height: maxHeight });\n      }\n    }\n  };\n\n  const handleCustomDimensions = () => {\n    const width = parseInt(customWidth);\n    const height = parseInt(customHeight);\n    \n    if (width > 0 && height > 0) {\n      const maxWidth = Math.min(width, image.naturalWidth);\n      const maxHeight = Math.min(height, image.naturalHeight);\n      \n      updateCropArea({\n        x: Math.max(0, (image.naturalWidth - maxWidth) / 2),\n        y: Math.max(0, (image.naturalHeight - maxHeight) / 2),\n        width: maxWidth,\n        height: maxHeight\n      });\n    }\n  };\n\n  const performCrop = async () => {\n    if (!image || !imageLoaded) return;\n\n    setCropping(true);\n    try {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      canvas.width = cropArea.width;\n      canvas.height = cropArea.height;\n      \n      const img = new Image();\n      img.onload = () => {\n        ctx.drawImage(\n          img,\n          cropArea.x,\n          cropArea.y,\n          cropArea.width,\n          cropArea.height,\n          0,\n          0,\n          cropArea.width,\n          cropArea.height\n        );\n        \n        canvas.toBlob((blob) => {\n          const croppedUrl = URL.createObjectURL(blob);\n          setCroppedImage({\n            blob,\n            url: croppedUrl,\n            width: cropArea.width,\n            height: cropArea.height\n          });\n          \n          toast({\n            title: \"Image cropped successfully!\",\n            description: `Cropped to ${cropArea.width} √ó ${cropArea.height} pixels.`,\n          });\n          \n          setCropping(false);\n        }, 'image/png');\n      };\n      \n      img.src = image.url;\n    } catch (error) {\n      console.error('Cropping error:', error);\n      toast({\n        title: \"Cropping failed\",\n        description: \"An error occurred while cropping the image.\",\n        variant: \"destructive\",\n      });\n      setCropping(false);\n    }\n  };\n\n  const downloadCroppedImage = () => {\n    if (croppedImage) {\n      const filename = image.file.name.replace(/\\.[^/.]+$/, '_cropped.png');\n      saveAs(croppedImage.blob, filename);\n      \n      toast({\n        title: \"Download started\",\n        description: `Downloading ${filename}`,\n      });\n    }\n  };\n\n  const resetCrop = () => {\n    if (image) {\n      const initialSize = Math.min(image.naturalWidth, image.naturalHeight, 200);\n      setCropArea({\n        x: (image.naturalWidth - initialSize) / 2,\n        y: (image.naturalHeight - initialSize) / 2,\n        width: initialSize,\n        height: initialSize\n      });\n      setCroppedImage(null);\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-crop text-green-400\"></i>\n            Upload Image\n          </CardTitle>\n          <CardDescription>\n            Select an image to crop with precision tools\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Image</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Crop Settings */}\n      {image && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Image Preview and Crop Area */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Crop Preview</CardTitle>\n                <CardDescription>\n                  Adjust the crop area by modifying the values or dragging the selection\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"relative inline-block max-w-full overflow-auto border rounded-lg bg-gray-50 dark:bg-gray-800\">\n                  <div className=\"relative\">\n                    <img\n                      ref={imageRef}\n                      src={image.url}\n                      alt=\"Original\"\n                      className=\"max-w-full h-auto\"\n                      style={{ maxHeight: '500px' }}\n                    />\n                    \n                    {/* Crop overlay */}\n                    <div\n                      className=\"absolute border-2 border-blue-500 bg-blue-500/20\"\n                      style={{\n                        left: `${(cropArea.x / image.naturalWidth) * 100}%`,\n                        top: `${(cropArea.y / image.naturalHeight) * 100}%`,\n                        width: `${(cropArea.width / image.naturalWidth) * 100}%`,\n                        height: `${(cropArea.height / image.naturalHeight) * 100}%`,\n                      }}\n                    >\n                      <div className=\"absolute inset-0 border border-white border-dashed\"></div>\n                      {/* Corner handles */}\n                      <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-nw-resize\"></div>\n                      <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-ne-resize\"></div>\n                      <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-sw-resize\"></div>\n                      <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-se-resize\"></div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 text-sm text-muted-foreground\">\n                  <p>Original: {image.naturalWidth} √ó {image.naturalHeight} pixels</p>\n                  <p>Crop Area: {Math.round(cropArea.width)} √ó {Math.round(cropArea.height)} pixels</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Crop Controls */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Crop Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <Tabs value={cropMode} onValueChange={setCropMode}>\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"freeform\" data-testid=\"tab-freeform\">Freeform</TabsTrigger>\n                    <TabsTrigger value=\"aspect\" data-testid=\"tab-aspect\">Aspect Ratio</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"aspect\" className=\"space-y-4\">\n                    <div>\n                      <Label>Aspect Ratio</Label>\n                      <Select value={aspectRatio} onValueChange={handleAspectRatioChange}>\n                        <SelectTrigger data-testid=\"select-aspect-ratio\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {Object.entries(aspectRatios).map(([key, ratio]) => (\n                            <SelectItem key={key} value={key}>\n                              {ratio.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"freeform\" className=\"space-y-4\">\n                    <div>\n                      <Label>Custom Dimensions</Label>\n                      <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                        <div>\n                          <Input\n                            placeholder=\"Width\"\n                            value={customWidth}\n                            onChange={(e) => setCustomWidth(e.target.value)}\n                            type=\"number\"\n                            data-testid=\"input-custom-width\"\n                          />\n                        </div>\n                        <div>\n                          <Input\n                            placeholder=\"Height\"\n                            value={customHeight}\n                            onChange={(e) => setCustomHeight(e.target.value)}\n                            type=\"number\"\n                            data-testid=\"input-custom-height\"\n                          />\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleCustomDimensions}\n                        className=\"mt-2 w-full\"\n                        data-testid=\"button-apply-dimensions\"\n                      >\n                        Apply Dimensions\n                      </Button>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n\n                {/* Precise Crop Controls */}\n                <div className=\"space-y-4 border-t pt-4\">\n                  <Label>Precise Position</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label className=\"text-xs\">X Position</Label>\n                      <Input\n                        type=\"number\"\n                        value={Math.round(cropArea.x)}\n                        onChange={(e) => updateCropArea({ ...cropArea, x: parseInt(e.target.value) || 0 })}\n                        data-testid=\"input-crop-x\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs\">Y Position</Label>\n                      <Input\n                        type=\"number\"\n                        value={Math.round(cropArea.y)}\n                        onChange={(e) => updateCropArea({ ...cropArea, y: parseInt(e.target.value) || 0 })}\n                        data-testid=\"input-crop-y\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs\">Width</Label>\n                      <Input\n                        type=\"number\"\n                        value={Math.round(cropArea.width)}\n                        onChange={(e) => updateCropArea({ ...cropArea, width: parseInt(e.target.value) || 1 })}\n                        data-testid=\"input-crop-width\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs\">Height</Label>\n                      <Input\n                        type=\"number\"\n                        value={Math.round(cropArea.height)}\n                        onChange={(e) => updateCropArea({ ...cropArea, height: parseInt(e.target.value) || 1 })}\n                        data-testid=\"input-crop-height\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-2 border-t pt-4\">\n                  <Button\n                    onClick={performCrop}\n                    disabled={cropping}\n                    className=\"w-full\"\n                    data-testid=\"button-crop\"\n                  >\n                    {cropping ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Cropping...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-crop mr-2\"></i>\n                        Crop Image\n                      </>\n                    )}\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    onClick={resetCrop}\n                    className=\"w-full\"\n                    data-testid=\"button-reset\"\n                  >\n                    <i className=\"fas fa-undo mr-2\"></i>\n                    Reset\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n\n      {/* Cropped Result */}\n      {croppedImage && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Cropped Result</CardTitle>\n            <CardDescription>\n              Preview and download your cropped image\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                <img\n                  src={croppedImage.url}\n                  alt=\"Cropped\"\n                  className=\"max-w-full h-auto\"\n                  style={{ maxHeight: '300px' }}\n                />\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Dimensions: {croppedImage.width} √ó {croppedImage.height} pixels\n                </p>\n                \n                <Button\n                  onClick={downloadCroppedImage}\n                  size=\"lg\"\n                  data-testid=\"button-download\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download Cropped Image\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Crop Images</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Image</h4>\n                <p className=\"text-sm text-muted-foreground\">Select an image file from your device</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Adjust Crop Area</h4>\n                <p className=\"text-sm text-muted-foreground\">Use freeform cropping or select an aspect ratio</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Fine-tune Position</h4>\n                <p className=\"text-sm text-muted-foreground\">Use precise controls for exact positioning and sizing</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Result</h4>\n                <p className=\"text-sm text-muted-foreground\">Crop and download your perfectly sized image</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20437},"client/src/pages/tools/image/ImageExifRemover.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageExifRemover() {\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState('');\n  const [originalExif, setOriginalExif] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'remove-exif');\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      setFile(selectedFile);\n      setError('');\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target.result);\n        \n        // Extract EXIF data for display\n        extractExifData(selectedFile);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid image file');\n    }\n  }, []);\n\n  const extractExifData = async (imageFile) => {\n    try {\n      // For demonstration, we'll show what types of EXIF data exist\n      const exifInfo = {\n        camera: 'Camera information',\n        location: 'GPS coordinates',\n        datetime: 'Creation date and time',\n        software: 'Software used',\n        dimensions: 'Image dimensions',\n        orientation: 'Image orientation'\n      };\n      setOriginalExif(exifInfo);\n    } catch (err) {\n      console.warn('Could not extract EXIF data:', err);\n    }\n  };\n\n  const removeExifData = async () => {\n    if (!file) {\n      setError('Please select an image file first');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      // Create a canvas to redraw the image without EXIF data\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Set canvas dimensions to match image\n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        // Draw image to canvas (this removes EXIF data)\n        ctx.drawImage(img, 0, 0);\n        \n        // Convert canvas to blob\n        canvas.toBlob((blob) => {\n          const fileName = file.name.replace(/\\.[^/.]+$/, '_no_exif.jpg');\n          saveAs(blob, fileName);\n          \n          toast({\n            title: \"Success!\",\n            description: \"EXIF metadata has been removed from your image.\",\n          });\n          setProcessing(false);\n        }, 'image/jpeg', 0.95);\n      };\n\n      img.onerror = () => {\n        setError('Failed to process the image. Please try a different file.');\n        setProcessing(false);\n      };\n\n      img.src = preview;\n    } catch (err) {\n      console.error('Error removing EXIF data:', err);\n      setError('Failed to remove EXIF data. Please try again.');\n      setProcessing(false);\n    }\n  };\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <Card className=\"glassmorphism border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Upload Image</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Select an image to remove its EXIF metadata\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"image-upload\" className=\"text-slate-300\">Choose Image File</Label>\n            <Input\n              id=\"image-upload\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange}\n              className=\"bg-slate-800 border-slate-600 text-slate-100\"\n              data-testid=\"input-image-file\"\n            />\n          </div>\n\n          {error && (\n            <Alert className=\"border-red-500 bg-red-500/10\">\n              <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {preview && (\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">Original Image</h3>\n                <div className=\"glassmorphism rounded-xl p-4 border-slate-600\">\n                  <img\n                    src={preview}\n                    alt=\"Original\"\n                    className=\"w-full h-auto max-h-64 object-contain rounded-lg mx-auto\"\n                  />\n                  <div className=\"mt-4 text-sm text-slate-400\">\n                    <div className=\"flex justify-between\">\n                      <span>File:</span>\n                      <span>{file.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Size:</span>\n                      <span>{(file.size / 1024 / 1024).toFixed(2)} MB</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {originalExif && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">EXIF Data to Remove</h3>\n                  <div className=\"glassmorphism rounded-xl p-4 border-slate-600\">\n                    <div className=\"space-y-3\">\n                      {Object.entries(originalExif).map(([key, value]) => (\n                        <div key={key} className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-400 capitalize\">{key}:</span>\n                          <span className=\"text-slate-300\">{value}</span>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-4 p-3 bg-red-500/10 border border-red-500/20 rounded-lg\">\n                      <p className=\"text-red-400 text-sm\">\n                        <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n                        This metadata will be completely removed from your image.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {file && (\n            <div className=\"flex gap-4\">\n              <Button\n                onClick={removeExifData}\n                disabled={processing}\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n                data-testid=\"button-remove-exif\"\n              >\n                {processing ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Removing EXIF...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download Clean Image\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Image',\n      description: 'Select the image file from which you want to remove EXIF metadata'\n    },\n    {\n      title: 'Review Data',\n      description: 'See what EXIF information will be removed from your image'\n    },\n    {\n      title: 'Download Clean Image',\n      description: 'Get your image with all metadata completely removed'\n    }\n  ];\n\n  const benefits = [\n    'Protect your privacy by removing location data',\n    'Remove camera and device information',\n    'Clean images for web publishing',\n    'Reduce file size slightly',\n    'Safe for sharing online'\n  ];\n\n  const useCases = [\n    'Publishing photos online safely',\n    'Protecting location privacy',\n    'Preparing images for social media',\n    'Creating clean image archives',\n    'Removing device fingerprints'\n  ];\n\n  const faqs = [\n    {\n      question: 'What is EXIF data?',\n      answer: 'EXIF (Exchangeable Image File Format) data contains metadata about how a photo was taken, including camera settings, GPS location, timestamp, and device information.'\n    },\n    {\n      question: 'Why should I remove EXIF data?',\n      answer: 'EXIF data can reveal sensitive information like your location, device details, and when photos were taken. Removing it protects your privacy when sharing images online.'\n    },\n    {\n      question: 'Will removing EXIF data affect image quality?',\n      answer: 'No, removing EXIF data does not affect the visual quality of your image. It only removes the hidden metadata.'\n    },\n    {\n      question: 'What file formats support EXIF data?',\n      answer: 'EXIF data is commonly found in JPEG and TIFF files. RAW camera files also contain extensive metadata that can be removed.'\n    }\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n      faqs={faqs}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":9293},"client/src/pages/tools/image/ImageFilters.jsx":{"content":"import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageFilters() {\n  const tool = getToolBySlug('image', 'filters');\n  const [image, setImage] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  \n  // Filter values\n  const [brightness, setBrightness] = useState([100]);\n  const [contrast, setContrast] = useState([100]);\n  const [saturation, setSaturation] = useState([100]);\n  const [hue, setHue] = useState([0]);\n  const [blur, setBlur] = useState([0]);\n  const [sepia, setSepia] = useState([0]);\n  const [grayscale, setGrayscale] = useState([0]);\n  const [invert, setInvert] = useState([0]);\n  \n  // Color adjustments\n  const [exposure, setExposure] = useState([0]);\n  const [shadows, setShadows] = useState([0]);\n  const [highlights, setHighlights] = useState([0]);\n  const [warmth, setWarmth] = useState([0]);\n  const [vignette, setVignette] = useState([0]);\n\n  const canvasRef = useRef(null);\n  const originalImageRef = useRef(null);\n  const { toast } = useToast();\n\n  const presetFilters = {\n    'normal': { name: 'Normal', brightness: 100, contrast: 100, saturation: 100, sepia: 0, grayscale: 0 },\n    'vintage': { name: 'Vintage', brightness: 110, contrast: 120, saturation: 80, sepia: 30, grayscale: 0 },\n    'bw': { name: 'Black & White', brightness: 100, contrast: 110, saturation: 0, sepia: 0, grayscale: 100 },\n    'sepia': { name: 'Sepia', brightness: 110, contrast: 90, saturation: 80, sepia: 100, grayscale: 0 },\n    'dramatic': { name: 'Dramatic', brightness: 90, contrast: 150, saturation: 120, sepia: 0, grayscale: 0 },\n    'cool': { name: 'Cool', brightness: 105, contrast: 110, saturation: 90, sepia: 0, grayscale: 0 },\n    'warm': { name: 'Warm', brightness: 115, contrast: 105, saturation: 110, sepia: 20, grayscale: 0 },\n    'faded': { name: 'Faded', brightness: 120, contrast: 80, saturation: 70, sepia: 15, grayscale: 0 }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = new Image();\n      img.onload = () => {\n        setImage({\n          file,\n          url: e.target.result,\n          width: img.width,\n          height: img.height\n        });\n        originalImageRef.current = img;\n        applyFilters(img);\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(file);\n  }, [toast]);\n\n  const applyFilters = useCallback((img = originalImageRef.current) => {\n    if (!img || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Apply CSS filters\n    const filters = [\n      `brightness(${brightness[0]}%)`,\n      `contrast(${contrast[0]}%)`,\n      `saturate(${saturation[0]}%)`,\n      `hue-rotate(${hue[0]}deg)`,\n      `blur(${blur[0]}px)`,\n      `sepia(${sepia[0]}%)`,\n      `grayscale(${grayscale[0]}%)`,\n      `invert(${invert[0]}%)`\n    ].join(' ');\n    \n    ctx.filter = filters;\n    ctx.drawImage(img, 0, 0);\n    \n    // Apply custom effects if any\n    if (vignette[0] > 0) {\n      applyVignette(ctx, canvas.width, canvas.height, vignette[0]);\n    }\n    \n  }, [brightness, contrast, saturation, hue, blur, sepia, grayscale, invert, vignette]);\n\n  const applyVignette = (ctx, width, height, intensity) => {\n    const gradient = ctx.createRadialGradient(\n      width / 2, height / 2, 0,\n      width / 2, height / 2, Math.max(width, height) / 2\n    );\n    \n    gradient.addColorStop(0, `rgba(0, 0, 0, 0)`);\n    gradient.addColorStop(1, `rgba(0, 0, 0, ${intensity / 100})`);\n    \n    ctx.globalCompositeOperation = 'multiply';\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    ctx.globalCompositeOperation = 'source-over';\n  };\n\n  useEffect(() => {\n    if (image) {\n      applyFilters();\n    }\n  }, [image, applyFilters]);\n\n  const applyPreset = (presetKey) => {\n    const preset = presetFilters[presetKey];\n    setBrightness([preset.brightness]);\n    setContrast([preset.contrast]);\n    setSaturation([preset.saturation]);\n    setSepia([preset.sepia]);\n    setGrayscale([preset.grayscale]);\n    setHue([0]);\n    setBlur([0]);\n    setInvert([0]);\n    setVignette([0]);\n  };\n\n  const resetFilters = () => {\n    setBrightness([100]);\n    setContrast([100]);\n    setSaturation([100]);\n    setHue([0]);\n    setBlur([0]);\n    setSepia([0]);\n    setGrayscale([0]);\n    setInvert([0]);\n    setExposure([0]);\n    setShadows([0]);\n    setHighlights([0]);\n    setWarmth([0]);\n    setVignette([0]);\n  };\n\n  const downloadImage = async () => {\n    if (!canvasRef.current) return;\n\n    setProcessing(true);\n    try {\n      canvasRef.current.toBlob((blob) => {\n        const filename = image.file.name.replace(/\\.[^/.]+$/, '_filtered.png');\n        saveAs(blob, filename);\n        \n        toast({\n          title: \"Download started\",\n          description: `Downloading ${filename}`,\n        });\n        \n        setProcessing(false);\n      }, 'image/png');\n    } catch (error) {\n      console.error('Download error:', error);\n      toast({\n        title: \"Download failed\",\n        description: \"An error occurred while preparing the download.\",\n        variant: \"destructive\",\n      });\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-adjust text-green-400\"></i>\n            Upload Image\n          </CardTitle>\n          <CardDescription>\n            Select an image to apply professional filters and effects\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Image</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {image && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Image Preview */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Preview</CardTitle>\n                <CardDescription>\n                  Live preview of your image with applied filters\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col space-y-4\">\n                  {/* Original vs Filtered */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Original</h4>\n                      <div className=\"border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\">\n                        <img\n                          src={image.url}\n                          alt=\"Original\"\n                          className=\"w-full h-auto max-h-64 object-contain\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Filtered</h4>\n                      <div className=\"border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\">\n                        <canvas\n                          ref={canvasRef}\n                          className=\"w-full h-auto max-h-64 object-contain\"\n                          style={{ maxWidth: '100%', height: 'auto' }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    <p>Dimensions: {image.width} √ó {image.height} pixels</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filter Controls */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Filter Presets</CardTitle>\n                <CardDescription>\n                  Quick filter presets for common effects\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {Object.entries(presetFilters).map(([key, preset]) => (\n                    <Button\n                      key={key}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => applyPreset(key)}\n                      className=\"text-xs\"\n                      data-testid={`preset-${key}`}\n                    >\n                      {preset.name}\n                    </Button>\n                  ))}\n                </div>\n                \n                <div className=\"mt-4 space-y-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={resetFilters}\n                    className=\"w-full\"\n                    data-testid=\"button-reset\"\n                  >\n                    <i className=\"fas fa-undo mr-2\"></i>\n                    Reset All\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Adjust Filters</CardTitle>\n                <CardDescription>\n                  Fine-tune individual filter settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"basic\" className=\"space-y-4\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                    <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"basic\" className=\"space-y-6\">\n                    <div>\n                      <Label>Brightness: {brightness[0]}%</Label>\n                      <Slider\n                        value={brightness}\n                        onValueChange={setBrightness}\n                        max={200}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-brightness\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Contrast: {contrast[0]}%</Label>\n                      <Slider\n                        value={contrast}\n                        onValueChange={setContrast}\n                        max={200}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-contrast\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Saturation: {saturation[0]}%</Label>\n                      <Slider\n                        value={saturation}\n                        onValueChange={setSaturation}\n                        max={200}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-saturation\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Hue: {hue[0]}¬∞</Label>\n                      <Slider\n                        value={hue}\n                        onValueChange={setHue}\n                        max={360}\n                        min={-360}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-hue\"\n                      />\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"advanced\" className=\"space-y-6\">\n                    <div>\n                      <Label>Blur: {blur[0]}px</Label>\n                      <Slider\n                        value={blur}\n                        onValueChange={setBlur}\n                        max={10}\n                        min={0}\n                        step={0.1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-blur\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Sepia: {sepia[0]}%</Label>\n                      <Slider\n                        value={sepia}\n                        onValueChange={setSepia}\n                        max={100}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-sepia\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Grayscale: {grayscale[0]}%</Label>\n                      <Slider\n                        value={grayscale}\n                        onValueChange={setGrayscale}\n                        max={100}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-grayscale\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Invert: {invert[0]}%</Label>\n                      <Slider\n                        value={invert}\n                        onValueChange={setInvert}\n                        max={100}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-invert\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Vignette: {vignette[0]}%</Label>\n                      <Slider\n                        value={vignette}\n                        onValueChange={setVignette}\n                        max={100}\n                        min={0}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-vignette\"\n                      />\n                    </div>\n                  </TabsContent>\n                </Tabs>\n\n                <div className=\"mt-6 pt-6 border-t\">\n                  <Button\n                    onClick={downloadImage}\n                    disabled={processing}\n                    className=\"w-full\"\n                    size=\"lg\"\n                    data-testid=\"button-download\"\n                  >\n                    {processing ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-download mr-2\"></i>\n                        Download Filtered Image\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Apply Image Filters</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Image</h4>\n                <p className=\"text-sm text-muted-foreground\">Select an image file from your device</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Preset or Customize</h4>\n                <p className=\"text-sm text-muted-foreground\">Apply a quick preset or adjust individual filter settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Preview Changes</h4>\n                <p className=\"text-sm text-muted-foreground\">See real-time preview of your filter adjustments</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Result</h4>\n                <p className=\"text-sm text-muted-foreground\">Save your enhanced image with applied filters</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filter Guide */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filter Guide</CardTitle>\n          <CardDescription>\n            Understanding different filter effects\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-medium text-blue-600\">Brightness</h4>\n                <p className=\"text-sm text-muted-foreground\">Controls overall lightness of the image</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-green-600\">Contrast</h4>\n                <p className=\"text-sm text-muted-foreground\">Adjusts difference between light and dark areas</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-purple-600\">Saturation</h4>\n                <p className=\"text-sm text-muted-foreground\">Controls color intensity and vibrancy</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-orange-600\">Sepia</h4>\n                <p className=\"text-sm text-muted-foreground\">Applies warm, vintage brown tone effect</p>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-medium text-red-600\">Hue</h4>\n                <p className=\"text-sm text-muted-foreground\">Shifts all colors around the color wheel</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-indigo-600\">Blur</h4>\n                <p className=\"text-sm text-muted-foreground\">Applies gaussian blur for soft focus effect</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-600\">Grayscale</h4>\n                <p className=\"text-sm text-muted-foreground\">Converts image to black and white</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-pink-600\">Vignette</h4>\n                <p className=\"text-sm text-muted-foreground\">Darkens edges to focus attention on center</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20861},"client/src/pages/tools/image/ImageResizer.jsx":{"content":"import { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function ImageResizer() {\n  const tool = getToolBySlug('image', 'resize');\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState('');\n  const [width, setWidth] = useState('');\n  const [height, setHeight] = useState('');\n  const [originalWidth, setOriginalWidth] = useState(0);\n  const [originalHeight, setOriginalHeight] = useState(0);\n  const [maintainAspectRatio, setMaintainAspectRatio] = useState(true);\n  const [resizeMethod, setResizeMethod] = useState('pixels');\n  const [percentage, setPercentage] = useState(100);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [resizedImage, setResizedImage] = useState(null);\n  const canvasRef = useRef(null);\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      setFile(selectedFile);\n      setError('');\n      setResizedImage(null);\n      \n      // Create preview and get dimensions\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target.result);\n        \n        const img = new Image();\n        img.onload = () => {\n          setOriginalWidth(img.width);\n          setOriginalHeight(img.height);\n          setWidth(img.width.toString());\n          setHeight(img.height.toString());\n        };\n        img.src = e.target.result;\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid image file');\n    }\n  }, []);\n\n  const handleWidthChange = (newWidth) => {\n    setWidth(newWidth);\n    if (maintainAspectRatio && originalWidth && originalHeight) {\n      const ratio = originalHeight / originalWidth;\n      setHeight(Math.round(newWidth * ratio).toString());\n    }\n  };\n\n  const handleHeightChange = (newHeight) => {\n    setHeight(newHeight);\n    if (maintainAspectRatio && originalWidth && originalHeight) {\n      const ratio = originalWidth / originalHeight;\n      setWidth(Math.round(newHeight * ratio).toString());\n    }\n  };\n\n  const handlePercentageChange = (newPercentage) => {\n    setPercentage(newPercentage);\n    if (originalWidth && originalHeight) {\n      const newWidth = Math.round(originalWidth * (newPercentage / 100));\n      const newHeight = Math.round(originalHeight * (newPercentage / 100));\n      setWidth(newWidth.toString());\n      setHeight(newHeight.toString());\n    }\n  };\n\n  const downloadImage = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleResize = async () => {\n    if (!file || !width || !height) {\n      setError('Please select an image and specify dimensions');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        \n        const targetWidth = parseInt(width);\n        const targetHeight = parseInt(height);\n        \n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n        \n        // Use high-quality image rendering\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        \n        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n        \n        canvas.toBlob((blob) => {\n          const originalExtension = file.name.split('.').pop();\n          const fileName = file.name.replace(`.${originalExtension}`, `_resized_${targetWidth}x${targetHeight}.${originalExtension}`);\n          \n          setResizedImage({\n            name: fileName,\n            blob: blob,\n            size: blob.size,\n            width: targetWidth,\n            height: targetHeight,\n            url: URL.createObjectURL(blob)\n          });\n          \n          setProcessing(false);\n        }, file.type, 0.9);\n      };\n      \n      img.src = preview;\n    } catch (err) {\n      setError('Error resizing image');\n      setProcessing(false);\n    }\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const presetSizes = [\n    { name: 'Instagram Square', width: 1080, height: 1080 },\n    { name: 'Instagram Story', width: 1080, height: 1920 },\n    { name: 'Facebook Post', width: 1200, height: 630 },\n    { name: 'Twitter Header', width: 1500, height: 500 },\n    { name: 'LinkedIn Post', width: 1200, height: 627 },\n    { name: 'YouTube Thumbnail', width: 1280, height: 720 },\n    { name: 'Profile Picture', width: 400, height: 400 },\n    { name: 'Email Header', width: 600, height: 200 }\n  ];\n\n  const toolContent = (\n    <div className=\"space-y-8\">\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Controls */}\n        <div className=\"space-y-6\">\n          {/* File Upload */}\n          <Card className=\"glassmorphism\">\n            <CardContent className=\"p-6 space-y-4\">\n              <Label htmlFor=\"image-file\" className=\"text-base font-medium\">\n                Select Image\n              </Label>\n              <Input\n                id=\"image-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100\"\n              />\n              {file && (\n                <div className=\"text-sm text-slate-600 dark:text-slate-300\">\n                  Original: {originalWidth} √ó {originalHeight} px ({formatFileSize(file.size)})\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Resize Method */}\n          {file && (\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6 space-y-4\">\n                <Label className=\"text-base font-medium\">Resize Method</Label>\n                <Select value={resizeMethod} onValueChange={setResizeMethod}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pixels\">Custom Dimensions (pixels)</SelectItem>\n                    <SelectItem value=\"percentage\">Percentage</SelectItem>\n                    <SelectItem value=\"presets\">Social Media Presets</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Percentage Method */}\n                {resizeMethod === 'percentage' && (\n                  <div className=\"space-y-4\">\n                    <Label htmlFor=\"percentage\">Resize Percentage</Label>\n                    <div className=\"flex items-center space-x-4\">\n                      <Input\n                        id=\"percentage\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"500\"\n                        value={percentage}\n                        onChange={(e) => handlePercentageChange(parseInt(e.target.value) || 100)}\n                        className=\"w-20\"\n                      />\n                      <span className=\"text-sm text-slate-500\">%</span>\n                    </div>\n                  </div>\n                )}\n\n                {/* Presets Method */}\n                {resizeMethod === 'presets' && (\n                  <div className=\"space-y-4\">\n                    <Label>Social Media Presets</Label>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {presetSizes.map((preset, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          onClick={() => {\n                            setWidth(preset.width.toString());\n                            setHeight(preset.height.toString());\n                            setMaintainAspectRatio(false);\n                          }}\n                          className=\"justify-between\"\n                        >\n                          <span>{preset.name}</span>\n                          <span className=\"text-sm text-slate-500\">\n                            {preset.width} √ó {preset.height}\n                          </span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Custom Dimensions */}\n                {resizeMethod === 'pixels' && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Maintain Aspect Ratio</Label>\n                      <Switch\n                        checked={maintainAspectRatio}\n                        onCheckedChange={setMaintainAspectRatio}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"width\">Width (px)</Label>\n                        <Input\n                          id=\"width\"\n                          type=\"number\"\n                          min=\"1\"\n                          value={width}\n                          onChange={(e) => handleWidthChange(e.target.value)}\n                          placeholder=\"Width\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"height\">Height (px)</Label>\n                        <Input\n                          id=\"height\"\n                          type=\"number\"\n                          min=\"1\"\n                          value={height}\n                          onChange={(e) => handleHeightChange(e.target.value)}\n                          placeholder=\"Height\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Error Display */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <i className=\"fas fa-exclamation-triangle w-4 h-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Button */}\n          {file && (\n            <Button\n              onClick={handleResize}\n              disabled={processing || !width || !height}\n              className=\"w-full bg-green-500 hover:bg-green-600 text-white\"\n              size=\"lg\"\n            >\n              {processing ? (\n                <>\n                  <i className=\"fas fa-spinner animate-spin mr-2\" />\n                  Resizing Image...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-expand-arrows-alt mr-2\" />\n                  Resize Image\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n\n        {/* Preview */}\n        <div className=\"space-y-6\">\n          {/* Original Image */}\n          {preview && (\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Original Image</h3>\n                <div className=\"relative rounded-lg overflow-hidden bg-slate-100 dark:bg-slate-800\">\n                  <img\n                    src={preview}\n                    alt=\"Original\"\n                    className=\"max-w-full h-auto max-h-64 mx-auto\"\n                  />\n                </div>\n                <p className=\"text-sm text-slate-600 dark:text-slate-300 mt-2 text-center\">\n                  {originalWidth} √ó {originalHeight} px\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Resized Image */}\n          {resizedImage && (\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold\">Resized Image</h3>\n                  <Button\n                    onClick={() => downloadImage(resizedImage.blob, resizedImage.name)}\n                    className=\"bg-green-500 hover:bg-green-600 text-white\"\n                  >\n                    <i className=\"fas fa-download mr-2\" />\n                    Download\n                  </Button>\n                </div>\n                <div className=\"relative rounded-lg overflow-hidden bg-slate-100 dark:bg-slate-800\">\n                  <img\n                    src={resizedImage.url}\n                    alt=\"Resized\"\n                    className=\"max-w-full h-auto max-h-64 mx-auto\"\n                  />\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-300 text-center space-y-1\">\n                  <p>{resizedImage.width} √ó {resizedImage.height} px</p>\n                  <p>{formatFileSize(resizedImage.size)}</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Hidden Canvas */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n\n      {/* Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-green-100 dark:bg-green-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-shield-alt text-green-600 dark:text-green-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Privacy Protected</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            All image processing happens locally in your browser.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-green-100 dark:bg-green-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-magic text-green-600 dark:text-green-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Smart Resizing</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Maintain aspect ratios and use social media presets.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-green-100 dark:bg-green-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-bolt text-green-600 dark:text-green-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Instant Results</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Get resized images immediately with high quality rendering.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Image',\n      description: 'Select the image file you want to resize'\n    },\n    {\n      title: 'Choose Method',\n      description: 'Pick custom dimensions, percentage, or social media presets'\n    },\n    {\n      title: 'Set Dimensions',\n      description: 'Enter your desired width and height, or select a preset'\n    },\n    {\n      title: 'Download',\n      description: 'Get your perfectly resized image instantly'\n    }\n  ];\n\n  const benefits = [\n    'Maintain aspect ratio automatically',\n    'Social media preset sizes',\n    'High-quality resizing algorithm',\n    'Instant processing',\n    'Multiple resize methods'\n  ];\n\n  const useCases = [\n    'Social media posts and stories',\n    'Website optimization',\n    'Email newsletters',\n    'Print materials',\n    'Profile pictures and avatars'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":16735},"client/src/pages/tools/image/ImageUpscaler.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\n\nexport default function ImageUpscaler() {\n  const [image, setImage] = useState(null);\n  const [upscaling, setUpscaling] = useState(false);\n  const [upscaledImage, setUpscaledImage] = useState(null);\n  const [scaleFactor, setScaleFactor] = useState('2');\n  const [algorithm, setAlgorithm] = useState('bicubic');\n  const [imageInfo, setImageInfo] = useState(null);\n  const { toast } = useToast();\n\n  const upscaleAlgorithms = {\n    'nearest': {\n      name: 'Nearest Neighbor',\n      description: 'Fast but pixelated, good for pixel art'\n    },\n    'bilinear': {\n      name: 'Bilinear',\n      description: 'Smooth but can be blurry'\n    },\n    'bicubic': {\n      name: 'Bicubic',\n      description: 'High quality, preserves details well'\n    },\n    'lanczos': {\n      name: 'Lanczos',\n      description: 'Sharp details, best for photos'\n    }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check file size (limit to 10MB for performance)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = new Image();\n      img.onload = () => {\n        // Check if image is too large to upscale\n        const scale = parseInt(scaleFactor);\n        const newWidth = img.width * scale;\n        const newHeight = img.height * scale;\n        \n        if (newWidth > 8192 || newHeight > 8192) {\n          toast({\n            title: \"Image too large to upscale\",\n            description: `Upscaling would result in ${newWidth}x${newHeight} pixels. Please use a smaller scale factor or smaller image.`,\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        setImage({\n          file,\n          url: e.target.result,\n          width: img.width,\n          height: img.height\n        });\n\n        setImageInfo({\n          name: file.name,\n          size: (file.size / (1024 * 1024)).toFixed(2),\n          dimensions: `${img.width} √ó ${img.height}`,\n          format: file.type.split('/')[1].toUpperCase()\n        });\n\n        setUpscaledImage(null);\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(file);\n  }, [scaleFactor, toast]);\n\n  const upscaleImage = async () => {\n    if (!image) return;\n\n    setUpscaling(true);\n    try {\n      const scale = parseInt(scaleFactor);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      // Set up canvas with new dimensions\n      canvas.width = image.width * scale;\n      canvas.height = image.height * scale;\n\n      // Configure image smoothing based on algorithm\n      switch (algorithm) {\n        case 'nearest':\n          ctx.imageSmoothingEnabled = false;\n          break;\n        case 'bilinear':\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'low';\n          break;\n        case 'bicubic':\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'medium';\n          break;\n        case 'lanczos':\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n          break;\n        default:\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n      }\n\n      // Load and draw the image\n      const img = new Image();\n      img.onload = () => {\n        // For better quality with some algorithms, use multi-step upscaling\n        if (algorithm === 'lanczos' || algorithm === 'bicubic') {\n          performMultiStepUpscale(ctx, img, scale);\n        } else {\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        }\n\n        // Convert to blob\n        canvas.toBlob((blob) => {\n          const upscaledUrl = URL.createObjectURL(blob);\n          setUpscaledImage({\n            blob,\n            url: upscaledUrl,\n            width: canvas.width,\n            height: canvas.height,\n            size: blob.size\n          });\n\n          toast({\n            title: \"Image upscaled successfully!\",\n            description: `Upscaled to ${canvas.width} √ó ${canvas.height} pixels using ${upscaleAlgorithms[algorithm].name}.`,\n          });\n\n          setUpscaling(false);\n        }, 'image/png');\n      };\n\n      img.src = image.url;\n    } catch (error) {\n      console.error('Upscaling error:', error);\n      toast({\n        title: \"Upscaling failed\",\n        description: \"An error occurred while upscaling the image. Please try again.\",\n        variant: \"destructive\",\n      });\n      setUpscaling(false);\n    }\n  };\n\n  const performMultiStepUpscale = (ctx, img, targetScale) => {\n    // For large scale factors, perform multi-step upscaling for better quality\n    let currentScale = 1;\n    let tempCanvas = document.createElement('canvas');\n    let tempCtx = tempCanvas.getContext('2d');\n    \n    tempCanvas.width = img.width;\n    tempCanvas.height = img.height;\n    tempCtx.drawImage(img, 0, 0);\n\n    while (currentScale < targetScale) {\n      const stepScale = Math.min(2, targetScale / currentScale);\n      const newWidth = tempCanvas.width * stepScale;\n      const newHeight = tempCanvas.height * stepScale;\n\n      const nextCanvas = document.createElement('canvas');\n      const nextCtx = nextCanvas.getContext('2d');\n      nextCanvas.width = newWidth;\n      nextCanvas.height = newHeight;\n\n      nextCtx.imageSmoothingEnabled = true;\n      nextCtx.imageSmoothingQuality = 'high';\n      nextCtx.drawImage(tempCanvas, 0, 0, newWidth, newHeight);\n\n      tempCanvas = nextCanvas;\n      tempCtx = nextCtx;\n      currentScale *= stepScale;\n    }\n\n    // Draw final result to main canvas\n    ctx.drawImage(tempCanvas, 0, 0);\n  };\n\n  const downloadUpscaledImage = () => {\n    if (!upscaledImage) return;\n\n    const filename = image.file.name.replace(/\\.[^/.]+$/, `_upscaled_${scaleFactor}x.png`);\n    saveAs(upscaledImage.blob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const resetUpscaling = () => {\n    if (upscaledImage) {\n      URL.revokeObjectURL(upscaledImage.url);\n    }\n    setUpscaledImage(null);\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getEstimatedSize = () => {\n    if (!image) return null;\n    const scale = parseInt(scaleFactor);\n    const newPixels = image.width * scale * image.height * scale;\n    const estimatedBytes = newPixels * 4; // RGBA\n    return formatFileSize(estimatedBytes);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-search-plus text-green-400\"></i>\n            Upload Image\n          </CardTitle>\n          <CardDescription>\n            Select an image to upscale using AI-powered algorithms\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Image</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supports JPEG, PNG, WebP. Max file size: 10MB\n              </p>\n            </div>\n            \n            <Alert>\n              <i className=\"fas fa-info-circle h-4 w-4\"></i>\n              <AlertDescription>\n                Image upscaling increases resolution while trying to preserve quality. Results work best with clear, high-contrast images.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Image Information */}\n      {imageInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Image Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium\">Filename</div>\n                <div className=\"text-sm text-muted-foreground\">{imageInfo.name}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium\">Size</div>\n                <div className=\"text-sm text-muted-foreground\">{imageInfo.size} MB</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium\">Dimensions</div>\n                <div className=\"text-sm text-muted-foreground\">{imageInfo.dimensions}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium\">Format</div>\n                <div className=\"text-sm text-muted-foreground\">{imageInfo.format}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Upscaling Settings */}\n      {image && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Upscaling Settings</CardTitle>\n            <CardDescription>\n              Configure upscaling parameters for optimal results\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Scale Factor</Label>\n                <Select value={scaleFactor} onValueChange={(value) => {\n                  setScaleFactor(value);\n                  resetUpscaling();\n                }}>\n                  <SelectTrigger data-testid=\"select-scale-factor\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"2\">2x (Double size)</SelectItem>\n                    <SelectItem value=\"3\">3x (Triple size)</SelectItem>\n                    <SelectItem value=\"4\">4x (Quadruple size)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Upscaling Algorithm</Label>\n                <Select value={algorithm} onValueChange={(value) => {\n                  setAlgorithm(value);\n                  resetUpscaling();\n                }}>\n                  <SelectTrigger data-testid=\"select-algorithm\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(upscaleAlgorithms).map(([key, algo]) => (\n                      <SelectItem key={key} value={key}>\n                        {algo.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {upscaleAlgorithms[algorithm].description}\n                </p>\n              </div>\n            </div>\n\n            {/* Preview Information */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Upscaling Preview</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Original:</span>\n                  <div className=\"text-blue-800 dark:text-blue-200\">\n                    {image.width} √ó {image.height}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Upscaled:</span>\n                  <div className=\"text-blue-800 dark:text-blue-200\">\n                    {image.width * parseInt(scaleFactor)} √ó {image.height * parseInt(scaleFactor)}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Estimated Size:</span>\n                  <div className=\"text-blue-800 dark:text-blue-200\">\n                    {getEstimatedSize()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Image Comparison */}\n      {image && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Image Comparison</CardTitle>\n            <CardDescription>\n              Compare original and upscaled images side by side\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Original Image</h4>\n                <div className=\"border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\">\n                  <img\n                    src={image.url}\n                    alt=\"Original\"\n                    className=\"w-full h-64 object-contain\"\n                  />\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1 text-center\">\n                  {image.width} √ó {image.height} pixels\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Upscaled Image</h4>\n                <div className=\"border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\">\n                  {upscaledImage ? (\n                    <img\n                      src={upscaledImage.url}\n                      alt=\"Upscaled\"\n                      className=\"w-full h-64 object-contain\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-64 flex items-center justify-center text-muted-foreground\">\n                      {upscaling ? (\n                        <div className=\"flex flex-col items-center gap-2\">\n                          <i className=\"fas fa-spinner fa-spin text-2xl\"></i>\n                          <span>Upscaling image...</span>\n                        </div>\n                      ) : (\n                        <span>Click \"Upscale Image\" to see result</span>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1 text-center\">\n                  {upscaledImage ? (\n                    <>\n                      {upscaledImage.width} √ó {upscaledImage.height} pixels\n                      <br />\n                      {formatFileSize(upscaledImage.size)}\n                    </>\n                  ) : (\n                    `${image.width * parseInt(scaleFactor)} √ó ${image.height * parseInt(scaleFactor)} pixels (estimated)`\n                  )}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Action Buttons */}\n      {image && (\n        <div className=\"flex justify-center gap-4\">\n          <Button\n            onClick={upscaleImage}\n            disabled={upscaling}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-upscale\"\n          >\n            {upscaling ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Upscaling...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-search-plus mr-2\"></i>\n                Upscale Image ({scaleFactor}x)\n              </>\n            )}\n          </Button>\n\n          {upscaledImage && (\n            <Button\n              onClick={downloadUpscaledImage}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"px-8\"\n              data-testid=\"button-download\"\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              Download Upscaled Image\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How Image Upscaling Works</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Image</h4>\n                <p className=\"text-sm text-muted-foreground\">Select a clear, high-quality image for best upscaling results</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Select scale factor and algorithm based on your image type</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upscale Image</h4>\n                <p className=\"text-sm text-muted-foreground\">Advanced algorithms increase resolution while preserving details</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Result</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your high-resolution image with improved quality</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Algorithm Comparison */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Algorithm Comparison</CardTitle>\n          <CardDescription>\n            Choose the best algorithm for your image type\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {Object.entries(upscaleAlgorithms).map(([key, algo]) => (\n              <div key={key} className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold text-blue-600 mb-2\">{algo.name}</h4>\n                <p className=\"text-sm text-muted-foreground mb-2\">{algo.description}</p>\n                <div className=\"text-xs text-muted-foreground\">\n                  {key === 'nearest' && 'Best for: Pixel art, retro graphics'}\n                  {key === 'bilinear' && 'Best for: Simple graphics, fast processing'}\n                  {key === 'bicubic' && 'Best for: General purpose, balanced quality'}\n                  {key === 'lanczos' && 'Best for: Photos, detailed images'}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20696},"client/src/pages/tools/image/ImageWatermark.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\n\nexport default function ImageWatermark() {\n  const [images, setImages] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [watermarkType, setWatermarkType] = useState('text');\n  \n  // Text watermark settings\n  const [watermarkText, setWatermarkText] = useState('¬© Your Name');\n  const [fontSize, setFontSize] = useState([24]);\n  const [textColor, setTextColor] = useState('#ffffff');\n  const [fontFamily, setFontFamily] = useState('Arial');\n  \n  // Image watermark settings\n  const [watermarkImage, setWatermarkImage] = useState(null);\n  const [imageScale, setImageScale] = useState([50]);\n  \n  // Common settings\n  const [opacity, setOpacity] = useState([70]);\n  const [position, setPosition] = useState('bottom-right');\n  const [xOffset, setXOffset] = useState([20]);\n  const [yOffset, setYOffset] = useState([20]);\n  const [rotation, setRotation] = useState([0]);\n  \n  const canvasRef = useRef(null);\n  const { toast } = useToast();\n\n  const positions = {\n    'top-left': { x: 0.1, y: 0.1 },\n    'top-center': { x: 0.5, y: 0.1 },\n    'top-right': { x: 0.9, y: 0.1 },\n    'center-left': { x: 0.1, y: 0.5 },\n    'center': { x: 0.5, y: 0.5 },\n    'center-right': { x: 0.9, y: 0.5 },\n    'bottom-left': { x: 0.1, y: 0.9 },\n    'bottom-center': { x: 0.5, y: 0.9 },\n    'bottom-right': { x: 0.9, y: 0.9 }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const files = Array.from(event.target.files);\n    const validImages = files.filter(file => file.type.startsWith('image/'));\n\n    if (validImages.length !== files.length) {\n      toast({\n        title: \"Invalid files detected\",\n        description: \"Only image files are allowed.\",\n        variant: \"destructive\",\n      });\n    }\n\n    const newImages = validImages.map((file, index) => ({\n      id: Date.now() + index,\n      file,\n      name: file.name,\n      url: URL.createObjectURL(file),\n      watermarked: null,\n      watermarkedBlob: null\n    }));\n\n    setImages(prev => [...prev, ...newImages]);\n  }, [toast]);\n\n  const handleWatermarkImageUpload = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file for the watermark.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setWatermarkImage({\n      file,\n      url: URL.createObjectURL(file)\n    });\n  }, [toast]);\n\n  const removeImage = (id) => {\n    setImages(prev => {\n      const filtered = prev.filter(img => img.id !== id);\n      const imageToRemove = prev.find(img => img.id === id);\n      if (imageToRemove) {\n        URL.revokeObjectURL(imageToRemove.url);\n        if (imageToRemove.watermarked) {\n          URL.revokeObjectURL(imageToRemove.watermarked);\n        }\n      }\n      return filtered;\n    });\n  };\n\n  const applyWatermark = async (imageData) => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = async () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // Draw original image\n        ctx.drawImage(img, 0, 0);\n\n        // Calculate watermark position\n        const pos = positions[position];\n        const offsetX = xOffset[0];\n        const offsetY = yOffset[0];\n\n        ctx.save();\n        ctx.globalAlpha = opacity[0] / 100;\n\n        if (watermarkType === 'text') {\n          // Apply text watermark\n          const font = `${fontSize[0]}px ${fontFamily}`;\n          ctx.font = font;\n          ctx.fillStyle = textColor;\n          ctx.textAlign = pos.x === 0.1 ? 'left' : pos.x === 0.9 ? 'right' : 'center';\n          ctx.textBaseline = pos.y === 0.1 ? 'top' : pos.y === 0.9 ? 'bottom' : 'middle';\n\n          // Calculate text position\n          let textX = img.width * pos.x + (pos.x === 0.1 ? offsetX : pos.x === 0.9 ? -offsetX : 0);\n          let textY = img.height * pos.y + (pos.y === 0.1 ? offsetY : pos.y === 0.9 ? -offsetY : 0);\n\n          // Apply rotation if any\n          if (rotation[0] !== 0) {\n            ctx.translate(textX, textY);\n            ctx.rotate((rotation[0] * Math.PI) / 180);\n            textX = 0;\n            textY = 0;\n          }\n\n          // Add text shadow for better visibility\n          ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n          ctx.shadowBlur = 2;\n          ctx.shadowOffsetX = 1;\n          ctx.shadowOffsetY = 1;\n\n          ctx.fillText(watermarkText, textX, textY);\n\n        } else if (watermarkType === 'image' && watermarkImage) {\n          // Apply image watermark\n          const watermarkImg = new Image();\n          watermarkImg.onload = () => {\n            const scale = imageScale[0] / 100;\n            const watermarkWidth = watermarkImg.width * scale;\n            const watermarkHeight = watermarkImg.height * scale;\n\n            // Calculate position\n            let watermarkX = img.width * pos.x - (pos.x === 0.9 ? watermarkWidth : pos.x === 0.5 ? watermarkWidth / 2 : 0) + (pos.x === 0.1 ? offsetX : pos.x === 0.9 ? -offsetX : 0);\n            let watermarkY = img.height * pos.y - (pos.y === 0.9 ? watermarkHeight : pos.y === 0.5 ? watermarkHeight / 2 : 0) + (pos.y === 0.1 ? offsetY : pos.y === 0.9 ? -offsetY : 0);\n\n            // Apply rotation if any\n            if (rotation[0] !== 0) {\n              ctx.translate(watermarkX + watermarkWidth / 2, watermarkY + watermarkHeight / 2);\n              ctx.rotate((rotation[0] * Math.PI) / 180);\n              watermarkX = -watermarkWidth / 2;\n              watermarkY = -watermarkHeight / 2;\n            }\n\n            ctx.drawImage(watermarkImg, watermarkX, watermarkY, watermarkWidth, watermarkHeight);\n            ctx.restore();\n\n            canvas.toBlob((blob) => {\n              resolve({\n                blob,\n                url: URL.createObjectURL(blob)\n              });\n            }, 'image/png');\n          };\n          watermarkImg.src = watermarkImage.url;\n        } else {\n          ctx.restore();\n          canvas.toBlob((blob) => {\n            resolve({\n              blob,\n              url: URL.createObjectURL(blob)\n            });\n          }, 'image/png');\n        }\n\n        if (watermarkType === 'text') {\n          ctx.restore();\n          canvas.toBlob((blob) => {\n            resolve({\n              blob,\n              url: URL.createObjectURL(blob)\n            });\n          }, 'image/png');\n        }\n      };\n\n      img.onerror = () => reject(new Error('Failed to load image'));\n      img.src = imageData.url;\n    });\n  };\n\n  const processAllImages = async () => {\n    if (images.length === 0) {\n      toast({\n        title: \"No images selected\",\n        description: \"Please add at least one image to watermark.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (watermarkType === 'text' && !watermarkText.trim()) {\n      toast({\n        title: \"No watermark text\",\n        description: \"Please enter text for the watermark.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (watermarkType === 'image' && !watermarkImage) {\n      toast({\n        title: \"No watermark image\",\n        description: \"Please select an image for the watermark.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      const processedImages = [];\n\n      for (const image of images) {\n        try {\n          const watermarked = await applyWatermark(image);\n          processedImages.push({\n            ...image,\n            watermarked: watermarked.url,\n            watermarkedBlob: watermarked.blob\n          });\n        } catch (error) {\n          console.error(`Error watermarking ${image.name}:`, error);\n          processedImages.push(image);\n        }\n      }\n\n      setImages(processedImages);\n\n      const successCount = processedImages.filter(img => img.watermarked).length;\n      toast({\n        title: \"Watermarking completed!\",\n        description: `Successfully watermarked ${successCount} out of ${images.length} image(s).`,\n      });\n\n    } catch (error) {\n      console.error('Watermarking error:', error);\n      toast({\n        title: \"Watermarking failed\",\n        description: \"An error occurred during watermarking. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const downloadImage = (image) => {\n    if (!image.watermarkedBlob) return;\n\n    const filename = image.name.replace(/\\.[^/.]+$/, '_watermarked.png');\n    saveAs(image.watermarkedBlob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const downloadAllWatermarked = async () => {\n    const watermarkedImages = images.filter(img => img.watermarkedBlob);\n    \n    if (watermarkedImages.length === 0) {\n      toast({\n        title: \"No watermarked images\",\n        description: \"Please apply watermarks first before downloading.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    for (const image of watermarkedImages) {\n      downloadImage(image);\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  };\n\n  const clearAllImages = () => {\n    images.forEach(image => {\n      URL.revokeObjectURL(image.url);\n      if (image.watermarked) {\n        URL.revokeObjectURL(image.watermarked);\n      }\n    });\n    setImages([]);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-stamp text-green-400\"></i>\n            Upload Images\n          </CardTitle>\n          <CardDescription>\n            Select multiple images to add watermarks for copyright protection\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Images</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supports JPEG, PNG, WebP, and other image formats\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Watermark Settings */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Watermark Settings</CardTitle>\n            <CardDescription>\n              Configure your watermark appearance and positioning\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={watermarkType} onValueChange={setWatermarkType} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"text\" data-testid=\"tab-text\">Text Watermark</TabsTrigger>\n                <TabsTrigger value=\"image\" data-testid=\"tab-image\">Image Watermark</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"text\" className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"watermark-text\">Watermark Text</Label>\n                  <Textarea\n                    id=\"watermark-text\"\n                    value={watermarkText}\n                    onChange={(e) => setWatermarkText(e.target.value)}\n                    placeholder=\"Enter watermark text\"\n                    className=\"mt-1\"\n                    rows={2}\n                    data-testid=\"textarea-watermark-text\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Font Family</Label>\n                    <Select value={fontFamily} onValueChange={setFontFamily}>\n                      <SelectTrigger data-testid=\"select-font-family\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Arial\">Arial</SelectItem>\n                        <SelectItem value=\"Helvetica\">Helvetica</SelectItem>\n                        <SelectItem value=\"Times New Roman\">Times New Roman</SelectItem>\n                        <SelectItem value=\"Georgia\">Georgia</SelectItem>\n                        <SelectItem value=\"Verdana\">Verdana</SelectItem>\n                        <SelectItem value=\"Impact\">Impact</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"text-color\">Text Color</Label>\n                    <Input\n                      id=\"text-color\"\n                      type=\"color\"\n                      value={textColor}\n                      onChange={(e) => setTextColor(e.target.value)}\n                      className=\"mt-1 h-10\"\n                      data-testid=\"input-text-color\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Font Size: {fontSize[0]}px</Label>\n                  <Slider\n                    value={fontSize}\n                    onValueChange={setFontSize}\n                    max={100}\n                    min={8}\n                    step={2}\n                    className=\"mt-2\"\n                    data-testid=\"slider-font-size\"\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"image\" className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"watermark-image\">Watermark Image</Label>\n                  <Input\n                    id=\"watermark-image\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleWatermarkImageUpload}\n                    className=\"mt-1\"\n                    data-testid=\"input-watermark-image\"\n                  />\n                  {watermarkImage && (\n                    <div className=\"mt-2\">\n                      <img\n                        src={watermarkImage.url}\n                        alt=\"Watermark preview\"\n                        className=\"max-w-32 max-h-32 object-contain border rounded\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <Label>Image Scale: {imageScale[0]}%</Label>\n                  <Slider\n                    value={imageScale}\n                    onValueChange={setImageScale}\n                    max={100}\n                    min={5}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-image-scale\"\n                  />\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Common Settings */}\n            <div className=\"space-y-6 border-t pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Position</Label>\n                  <Select value={position} onValueChange={setPosition}>\n                    <SelectTrigger data-testid=\"select-position\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"top-left\">Top Left</SelectItem>\n                      <SelectItem value=\"top-center\">Top Center</SelectItem>\n                      <SelectItem value=\"top-right\">Top Right</SelectItem>\n                      <SelectItem value=\"center-left\">Center Left</SelectItem>\n                      <SelectItem value=\"center\">Center</SelectItem>\n                      <SelectItem value=\"center-right\">Center Right</SelectItem>\n                      <SelectItem value=\"bottom-left\">Bottom Left</SelectItem>\n                      <SelectItem value=\"bottom-center\">Bottom Center</SelectItem>\n                      <SelectItem value=\"bottom-right\">Bottom Right</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Opacity: {opacity[0]}%</Label>\n                  <Slider\n                    value={opacity}\n                    onValueChange={setOpacity}\n                    max={100}\n                    min={10}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-opacity\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label>X Offset: {xOffset[0]}px</Label>\n                  <Slider\n                    value={xOffset}\n                    onValueChange={setXOffset}\n                    max={100}\n                    min={0}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-x-offset\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Y Offset: {yOffset[0]}px</Label>\n                  <Slider\n                    value={yOffset}\n                    onValueChange={setYOffset}\n                    max={100}\n                    min={0}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-y-offset\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Rotation: {rotation[0]}¬∞</Label>\n                  <Slider\n                    value={rotation}\n                    onValueChange={setRotation}\n                    max={360}\n                    min={0}\n                    step={15}\n                    className=\"mt-2\"\n                    data-testid=\"slider-rotation\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Images List */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Images ({images.length})</span>\n              <div className=\"flex gap-2\">\n                {images.some(img => img.watermarkedBlob) && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={downloadAllWatermarked}\n                    data-testid=\"button-download-all\"\n                  >\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download All\n                  </Button>\n                )}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllImages}\n                  data-testid=\"button-clear-all\"\n                >\n                  <i className=\"fas fa-trash mr-2\"></i>\n                  Clear All\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {images.map((image, index) => (\n                <div\n                  key={image.id}\n                  className=\"border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\"\n                  data-testid={`image-item-${index}`}\n                >\n                  <div className=\"grid grid-cols-2 gap-2 p-4\">\n                    <div>\n                      <h5 className=\"text-xs font-medium mb-2\">Original</h5>\n                      <img\n                        src={image.url}\n                        alt={image.name}\n                        className=\"w-full h-24 object-cover rounded border\"\n                      />\n                    </div>\n                    <div>\n                      <h5 className=\"text-xs font-medium mb-2\">Watermarked</h5>\n                      {image.watermarked ? (\n                        <img\n                          src={image.watermarked}\n                          alt={`${image.name} watermarked`}\n                          className=\"w-full h-24 object-cover rounded border\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-24 bg-gray-200 dark:bg-gray-700 rounded border flex items-center justify-center\">\n                          <span className=\"text-xs text-muted-foreground\">Not processed</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 border-t\">\n                    <h4 className=\"font-medium truncate text-sm mb-2\">{image.name}</h4>\n                    <div className=\"flex gap-2\">\n                      {image.watermarkedBlob && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => downloadImage(image)}\n                          className=\"flex-1\"\n                          data-testid={`button-download-${index}`}\n                        >\n                          <i className=\"fas fa-download mr-1\"></i>\n                          Download\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeImage(image.id)}\n                        data-testid={`button-remove-${index}`}\n                      >\n                        <i className=\"fas fa-times\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Process Button */}\n      {images.length > 0 && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={processAllImages}\n            disabled={processing || (watermarkType === 'text' && !watermarkText.trim()) || (watermarkType === 'image' && !watermarkImage)}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-apply-watermarks\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Adding Watermarks...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-stamp mr-2\"></i>\n                Apply Watermarks to All Images\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Add Image Watermarks</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Select multiple images you want to protect with watermarks</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Watermark Type</h4>\n                <p className=\"text-sm text-muted-foreground\">Select between text watermark or image/logo watermark</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Customize Appearance</h4>\n                <p className=\"text-sm text-muted-foreground\">Adjust position, opacity, size, and other visual settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Protected Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your watermarked images with copyright protection</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":25884},"client/src/pages/tools/image/PhotoFrameStudio.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function PhotoFrameStudio() {\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState('');\n  const [frameType, setFrameType] = useState('classic');\n  const [frameColor, setFrameColor] = useState('#8B4513');\n  const [frameWidth, setFrameWidth] = useState([20]);\n  const [borderRadius, setBorderRadius] = useState([10]);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const canvasRef = useRef(null);\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'frames');\n\n  const frameTypes = {\n    classic: 'Classic Border',\n    shadow: 'Drop Shadow',\n    vintage: 'Vintage Style',\n    modern: 'Modern Minimal',\n    polaroid: 'Polaroid Style',\n    ornate: 'Ornate Frame'\n  };\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      setFile(selectedFile);\n      setError('');\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target.result);\n        // Auto-apply preview\n        setTimeout(() => applyFramePreview(e.target.result), 100);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid image file');\n    }\n  }, []);\n\n  const applyFramePreview = useCallback((imageSrc) => {\n    if (!imageSrc) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      const frameWidthPx = frameWidth[0];\n      const radiusPx = borderRadius[0];\n      \n      // Set canvas size\n      canvas.width = img.width + (frameWidthPx * 2);\n      canvas.height = img.height + (frameWidthPx * 2);\n      \n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Apply frame based on type\n      switch (frameType) {\n        case 'classic':\n          applyClassicFrame(ctx, img, frameWidthPx, radiusPx);\n          break;\n        case 'shadow':\n          applyShadowFrame(ctx, img, frameWidthPx, radiusPx);\n          break;\n        case 'vintage':\n          applyVintageFrame(ctx, img, frameWidthPx, radiusPx);\n          break;\n        case 'modern':\n          applyModernFrame(ctx, img, frameWidthPx, radiusPx);\n          break;\n        case 'polaroid':\n          applyPolaroidFrame(ctx, img, frameWidthPx);\n          break;\n        case 'ornate':\n          applyOrnateFrame(ctx, img, frameWidthPx, radiusPx);\n          break;\n        default:\n          applyClassicFrame(ctx, img, frameWidthPx, radiusPx);\n      }\n    };\n    \n    img.src = imageSrc;\n  }, [frameType, frameColor, frameWidth, borderRadius]);\n\n  const applyClassicFrame = (ctx, img, frameWidthPx, radiusPx) => {\n    // Draw frame background\n    ctx.fillStyle = frameColor;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Draw image with rounded corners\n    ctx.save();\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.clip();\n    ctx.drawImage(img, frameWidthPx, frameWidthPx);\n    ctx.restore();\n  };\n\n  const applyShadowFrame = (ctx, img, frameWidthPx, radiusPx) => {\n    // Draw shadow\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 20;\n    ctx.shadowOffsetX = 10;\n    ctx.shadowOffsetY = 10;\n    \n    // Draw white background\n    ctx.fillStyle = '#ffffff';\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.fill();\n    \n    // Reset shadow\n    ctx.shadowColor = 'transparent';\n    \n    // Draw image\n    ctx.save();\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.clip();\n    ctx.drawImage(img, frameWidthPx, frameWidthPx);\n    ctx.restore();\n  };\n\n  const applyVintageFrame = (ctx, img, frameWidthPx, radiusPx) => {\n    // Create vintage effect\n    ctx.fillStyle = '#D2B48C'; // Tan color\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Add texture pattern\n    for (let i = 0; i < ctx.canvas.width; i += 4) {\n      for (let j = 0; j < ctx.canvas.height; j += 4) {\n        if (Math.random() > 0.8) {\n          ctx.fillStyle = 'rgba(139, 69, 19, 0.1)';\n          ctx.fillRect(i, j, 2, 2);\n        }\n      }\n    }\n    \n    // Draw image\n    ctx.save();\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.clip();\n    ctx.drawImage(img, frameWidthPx, frameWidthPx);\n    ctx.restore();\n  };\n\n  const applyModernFrame = (ctx, img, frameWidthPx, radiusPx) => {\n    // Minimal white frame\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Draw thin border\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.stroke();\n    \n    // Draw image\n    ctx.save();\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.clip();\n    ctx.drawImage(img, frameWidthPx, frameWidthPx);\n    ctx.restore();\n  };\n\n  const applyPolaroidFrame = (ctx, img, frameWidthPx) => {\n    // White polaroid background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Calculate polaroid proportions\n    const polaroidBottom = frameWidthPx * 3; // Larger bottom margin\n    \n    // Draw image (no rounded corners for polaroid)\n    ctx.drawImage(img, frameWidthPx, frameWidthPx, img.width, img.height);\n  };\n\n  const applyOrnateFrame = (ctx, img, frameWidthPx, radiusPx) => {\n    // Gold ornate frame\n    const gradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, ctx.canvas.height);\n    gradient.addColorStop(0, '#FFD700');\n    gradient.addColorStop(0.5, '#FFA500');\n    gradient.addColorStop(1, '#FF8C00');\n    \n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Add decorative pattern\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 2;\n    \n    // Draw decorative lines\n    for (let i = 10; i < frameWidthPx; i += 8) {\n      ctx.strokeRect(i, i, ctx.canvas.width - i * 2, ctx.canvas.height - i * 2);\n    }\n    \n    // Draw image\n    ctx.save();\n    roundedRect(ctx, frameWidthPx, frameWidthPx, img.width, img.height, radiusPx);\n    ctx.clip();\n    ctx.drawImage(img, frameWidthPx, frameWidthPx);\n    ctx.restore();\n  };\n\n  const roundedRect = (ctx, x, y, width, height, radius) => {\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n    ctx.closePath();\n  };\n\n  const downloadFramedImage = async () => {\n    if (!canvasRef.current) {\n      setError('No preview available to download');\n      return;\n    }\n\n    setProcessing(true);\n    \n    try {\n      canvasRef.current.toBlob((blob) => {\n        const fileName = file.name.replace(/\\.[^/.]+$/, `_framed_${frameType}.png`);\n        saveAs(blob, fileName);\n        \n        toast({\n          title: \"Success!\",\n          description: \"Framed image has been downloaded successfully.\",\n        });\n        setProcessing(false);\n      }, 'image/png');\n    } catch (err) {\n      console.error('Error downloading image:', err);\n      setError('Failed to download framed image. Please try again.');\n      setProcessing(false);\n    }\n  };\n\n  // Update preview when settings change\n  React.useEffect(() => {\n    if (preview) {\n      applyFramePreview(preview);\n    }\n  }, [preview, frameType, frameColor, frameWidth, borderRadius, applyFramePreview]);\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Upload and Settings */}\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Upload & Customize</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Upload an image and customize your frame\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"image-upload\" className=\"text-slate-300\">Choose Image File</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                data-testid=\"input-image-file\"\n              />\n            </div>\n\n            {file && (\n              <>\n                <div>\n                  <Label className=\"text-slate-300\">Frame Style</Label>\n                  <Select value={frameType} onValueChange={setFrameType}>\n                    <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-600\">\n                      {Object.entries(frameTypes).map(([key, label]) => (\n                        <SelectItem key={key} value={key}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {frameType !== 'polaroid' && (\n                  <div>\n                    <Label htmlFor=\"frame-color\" className=\"text-slate-300\">Frame Color</Label>\n                    <Input\n                      id=\"frame-color\"\n                      type=\"color\"\n                      value={frameColor}\n                      onChange={(e) => setFrameColor(e.target.value)}\n                      className=\"bg-slate-800 border-slate-600 h-12\"\n                      data-testid=\"input-frame-color\"\n                    />\n                  </div>\n                )}\n\n                <div>\n                  <Label className=\"text-slate-300\">Frame Width: {frameWidth[0]}px</Label>\n                  <Slider\n                    value={frameWidth}\n                    onValueChange={setFrameWidth}\n                    max={100}\n                    min={5}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-frame-width\"\n                  />\n                </div>\n\n                {frameType !== 'polaroid' && (\n                  <div>\n                    <Label className=\"text-slate-300\">Border Radius: {borderRadius[0]}px</Label>\n                    <Slider\n                      value={borderRadius}\n                      onValueChange={setBorderRadius}\n                      max={50}\n                      min={0}\n                      step={5}\n                      className=\"mt-2\"\n                      data-testid=\"slider-border-radius\"\n                    />\n                  </div>\n                )}\n\n                <Button\n                  onClick={downloadFramedImage}\n                  disabled={processing}\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                  data-testid=\"button-download-framed\"\n                >\n                  {processing ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download Framed Image\n                    </>\n                  )}\n                </Button>\n              </>\n            )}\n\n            {error && (\n              <Alert className=\"border-red-500 bg-red-500/10\">\n                <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Preview */}\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Preview</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              See how your framed image will look\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {preview ? (\n              <div className=\"text-center\">\n                <canvas\n                  ref={canvasRef}\n                  className=\"max-w-full h-auto border border-slate-600 rounded-lg\"\n                  style={{ maxHeight: '400px' }}\n                />\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-slate-400\">\n                <i className=\"fas fa-image text-4xl mb-4\"></i>\n                <p>Upload an image to see the preview</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload Image',\n      description: 'Select the image you want to add a frame to'\n    },\n    {\n      title: 'Choose Frame Style',\n      description: 'Select from various frame styles like classic, shadow, vintage, etc.'\n    },\n    {\n      title: 'Customize Settings',\n      description: 'Adjust frame color, width, and border radius to your preference'\n    },\n    {\n      title: 'Download Result',\n      description: 'Save your beautifully framed image'\n    }\n  ];\n\n  const benefits = [\n    'Multiple frame styles available',\n    'Customizable colors and dimensions',\n    'Real-time preview',\n    'High-quality output',\n    'Perfect for social media'\n  ];\n\n  const useCases = [\n    'Creating social media posts',\n    'Making photo collages',\n    'Preparing images for print',\n    'Adding artistic effects',\n    'Professional photo presentation'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":14894},"client/src/pages/tools/image/QRCodeGenerator.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function QRCodeGenerator() {\n  const [text, setText] = useState('');\n  const [qrType, setQrType] = useState('url');\n  const [size, setSize] = useState([300]);\n  const [foregroundColor, setForegroundColor] = useState('#000000');\n  const [backgroundColor, setBackgroundColor] = useState('#ffffff');\n  const [errorLevel, setErrorLevel] = useState('M');\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const canvasRef = useRef(null);\n  const { toast } = useToast();\n\n  const tool = getToolBySlug('image', 'qr-generator');\n\n  const qrTypes = {\n    url: 'Website URL',\n    text: 'Plain Text',\n    email: 'Email Address',\n    phone: 'Phone Number',\n    sms: 'SMS Message',\n    wifi: 'WiFi Network',\n    vcard: 'Contact Card'\n  };\n\n  const errorLevels = {\n    L: 'Low (7%)',\n    M: 'Medium (15%)',\n    Q: 'Quartile (25%)',\n    H: 'High (30%)'\n  };\n\n  const generateQRCode = useCallback(() => {\n    if (!text.trim()) {\n      setError('Please enter text or data for the QR code');\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    const qrSize = size[0];\n    \n    canvas.width = qrSize;\n    canvas.height = qrSize;\n\n    // Simple QR code pattern generation (for demo purposes)\n    // In a real implementation, you'd use a QR code library like qrcode.js\n    drawQRPattern(ctx, text, qrSize);\n    \n    setError('');\n  }, [text, size, foregroundColor, backgroundColor, errorLevel]);\n\n  const drawQRPattern = (ctx, data, size) => {\n    // Clear canvas with background color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, size, size);\n    \n    // Create a simple QR-like pattern for demonstration\n    const modules = 25; // QR code modules\n    const moduleSize = size / modules;\n    \n    ctx.fillStyle = foregroundColor;\n    \n    // Generate pattern based on text hash\n    const hash = hashCode(data);\n    \n    for (let row = 0; row < modules; row++) {\n      for (let col = 0; col < modules; col++) {\n        // Create deterministic pattern based on position and hash\n        const shouldFill = ((row + col + hash) % 3 === 0) || \n                          (row < 7 && col < 7) || // Top-left finder pattern\n                          (row < 7 && col >= modules - 7) || // Top-right finder pattern\n                          (row >= modules - 7 && col < 7); // Bottom-left finder pattern\n        \n        if (shouldFill) {\n          ctx.fillRect(col * moduleSize, row * moduleSize, moduleSize, moduleSize);\n        }\n      }\n    }\n    \n    // Draw finder patterns (the squares in corners)\n    drawFinderPattern(ctx, 0, 0, moduleSize);\n    drawFinderPattern(ctx, (modules - 7) * moduleSize, 0, moduleSize);\n    drawFinderPattern(ctx, 0, (modules - 7) * moduleSize, moduleSize);\n  };\n\n  const drawFinderPattern = (ctx, x, y, moduleSize) => {\n    ctx.fillStyle = foregroundColor;\n    \n    // Outer square\n    ctx.fillRect(x, y, 7 * moduleSize, 7 * moduleSize);\n    \n    // Inner white square\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(x + moduleSize, y + moduleSize, 5 * moduleSize, 5 * moduleSize);\n    \n    // Center black square\n    ctx.fillStyle = foregroundColor;\n    ctx.fillRect(x + 2 * moduleSize, y + 2 * moduleSize, 3 * moduleSize, 3 * moduleSize);\n  };\n\n  const hashCode = (str) => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  };\n\n  const formatTextForQRType = (inputText, type) => {\n    switch (type) {\n      case 'url':\n        return inputText.startsWith('http') ? inputText : `https://${inputText}`;\n      case 'email':\n        return `mailto:${inputText}`;\n      case 'phone':\n        return `tel:${inputText}`;\n      case 'sms':\n        return `sms:${inputText}`;\n      case 'wifi':\n        return `WIFI:T:WPA;S:${inputText};P:password;;`;\n      default:\n        return inputText;\n    }\n  };\n\n  const downloadQRCode = async () => {\n    if (!canvasRef.current || !text.trim()) {\n      setError('Please generate a QR code first');\n      return;\n    }\n\n    setProcessing(true);\n    \n    try {\n      canvasRef.current.toBlob((blob) => {\n        const fileName = `qrcode_${qrType}_${size[0]}x${size[0]}.png`;\n        saveAs(blob, fileName);\n        \n        toast({\n          title: \"Success!\",\n          description: \"QR code has been downloaded successfully.\",\n        });\n        setProcessing(false);\n      }, 'image/png');\n    } catch (err) {\n      console.error('Error downloading QR code:', err);\n      setError('Failed to download QR code. Please try again.');\n      setProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (text.trim()) {\n      generateQRCode();\n    }\n  }, [text, qrType, size, foregroundColor, backgroundColor, errorLevel, generateQRCode]);\n\n  const toolContent = (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">QR Code Settings</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Customize your QR code content and appearance\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label className=\"text-slate-300\">QR Code Type</Label>\n              <Select value={qrType} onValueChange={setQrType}>\n                <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600\">\n                  {Object.entries(qrTypes).map(([key, label]) => (\n                    <SelectItem key={key} value={key}>{label}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"qr-text\" className=\"text-slate-300\">\n                {qrType === 'text' ? 'Text Content' : \n                 qrType === 'url' ? 'Website URL' :\n                 qrType === 'email' ? 'Email Address' :\n                 qrType === 'phone' ? 'Phone Number' :\n                 qrType === 'sms' ? 'Phone Number' :\n                 qrType === 'wifi' ? 'Network Name' :\n                 'Contact Information'}\n              </Label>\n              {qrType === 'text' || qrType === 'vcard' ? (\n                <Textarea\n                  id=\"qr-text\"\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  placeholder={qrType === 'text' ? 'Enter any text...' : 'Name\\nPhone\\nEmail\\nCompany'}\n                  className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                  rows={4}\n                  data-testid=\"textarea-qr-content\"\n                />\n              ) : (\n                <Input\n                  id=\"qr-text\"\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  placeholder={\n                    qrType === 'url' ? 'https://example.com' :\n                    qrType === 'email' ? 'user@example.com' :\n                    qrType === 'phone' ? '+1234567890' :\n                    qrType === 'sms' ? '+1234567890' :\n                    qrType === 'wifi' ? 'WiFi Network Name' :\n                    'Enter content...'\n                  }\n                  className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                  data-testid=\"input-qr-content\"\n                />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-slate-300\">Size: {size[0]}x{size[0]}px</Label>\n              <Slider\n                value={size}\n                onValueChange={setSize}\n                max={800}\n                min={100}\n                step={50}\n                className=\"mt-2\"\n                data-testid=\"slider-qr-size\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"fg-color\" className=\"text-slate-300\">Foreground Color</Label>\n                <Input\n                  id=\"fg-color\"\n                  type=\"color\"\n                  value={foregroundColor}\n                  onChange={(e) => setForegroundColor(e.target.value)}\n                  className=\"bg-slate-800 border-slate-600 h-12\"\n                  data-testid=\"input-foreground-color\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"bg-color\" className=\"text-slate-300\">Background Color</Label>\n                <Input\n                  id=\"bg-color\"\n                  type=\"color\"\n                  value={backgroundColor}\n                  onChange={(e) => setBackgroundColor(e.target.value)}\n                  className=\"bg-slate-800 border-slate-600 h-12\"\n                  data-testid=\"input-background-color\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-300\">Error Correction Level</Label>\n              <Select value={errorLevel} onValueChange={setErrorLevel}>\n                <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-100\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600\">\n                  {Object.entries(errorLevels).map(([key, label]) => (\n                    <SelectItem key={key} value={key}>{label}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              onClick={downloadQRCode}\n              disabled={processing || !text.trim()}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              data-testid=\"button-download-qr\"\n            >\n              {processing ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download QR Code\n                </>\n              )}\n            </Button>\n\n            {error && (\n              <Alert className=\"border-red-500 bg-red-500/10\">\n                <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"glassmorphism border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Preview</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Your generated QR code\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              {text.trim() ? (\n                <canvas\n                  ref={canvasRef}\n                  className=\"max-w-full h-auto border border-slate-600 rounded-lg bg-white\"\n                  style={{ maxHeight: '400px' }}\n                />\n              ) : (\n                <div className=\"py-12 text-slate-400\">\n                  <i className=\"fas fa-qrcode text-4xl mb-4\"></i>\n                  <p>Enter content to generate QR code</p>\n                </div>\n              )}\n            </div>\n            \n            {text.trim() && (\n              <div className=\"mt-4 p-4 bg-slate-800/50 rounded-lg\">\n                <h4 className=\"text-slate-300 font-semibold mb-2\">Encoded Data:</h4>\n                <p className=\"text-slate-400 text-sm break-all\">\n                  {formatTextForQRType(text, qrType)}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Choose Type',\n      description: 'Select what type of data your QR code will contain'\n    },\n    {\n      title: 'Enter Content',\n      description: 'Input the text, URL, or data for your QR code'\n    },\n    {\n      title: 'Customize Appearance',\n      description: 'Adjust size, colors, and error correction level'\n    },\n    {\n      title: 'Download',\n      description: 'Save your QR code as a high-quality PNG image'\n    }\n  ];\n\n  const benefits = [\n    'Multiple QR code types supported',\n    'Customizable colors and size',\n    'High-resolution output',\n    'Real-time preview',\n    'Error correction options'\n  ];\n\n  const useCases = [\n    'Website links and social media',\n    'Contact information sharing',\n    'WiFi network credentials',\n    'Event tickets and invitations',\n    'Product information and menus'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":13773},"client/src/pages/tools/pdf/JPGToPDF.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport { PDFDocument, rgb } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\n\nexport default function JPGToPDF() {\n  const [images, setImages] = useState([]);\n  const [converting, setConverting] = useState(false);\n  const [pageSize, setPageSize] = useState('A4');\n  const [orientation, setOrientation] = useState('portrait');\n  const [margin, setMargin] = useState([20]);\n  const [fitMode, setFitMode] = useState('fit');\n  const { toast } = useToast();\n\n  const pageSizes = {\n    'A4': { width: 595, height: 842 },\n    'A3': { width: 842, height: 1191 },\n    'A5': { width: 420, height: 595 },\n    'Letter': { width: 612, height: 792 },\n    'Legal': { width: 612, height: 1008 },\n    'Custom': { width: 595, height: 842 }\n  };\n\n  const handleImageUpload = useCallback((event) => {\n    const files = Array.from(event.target.files);\n    const validImages = files.filter(file => file.type.startsWith('image/'));\n\n    if (validImages.length !== files.length) {\n      toast({\n        title: \"Invalid files detected\",\n        description: \"Only image files are allowed.\",\n        variant: \"destructive\",\n      });\n    }\n\n    const newImages = validImages.map((file, index) => ({\n      id: Date.now() + index,\n      file,\n      name: file.name,\n      url: URL.createObjectURL(file),\n      order: images.length + index\n    }));\n\n    setImages(prev => [...prev, ...newImages]);\n  }, [images.length, toast]);\n\n  const removeImage = (id) => {\n    setImages(prev => {\n      const filtered = prev.filter(img => img.id !== id);\n      // Clean up URL\n      const imageToRemove = prev.find(img => img.id === id);\n      if (imageToRemove) {\n        URL.revokeObjectURL(imageToRemove.url);\n      }\n      return filtered;\n    });\n  };\n\n  const moveImage = (fromIndex, toIndex) => {\n    setImages(prev => {\n      const newImages = [...prev];\n      const [moved] = newImages.splice(fromIndex, 1);\n      newImages.splice(toIndex, 0, moved);\n      return newImages.map((img, index) => ({ ...img, order: index }));\n    });\n  };\n\n  const convertToPDF = async () => {\n    if (images.length === 0) {\n      toast({\n        title: \"No images selected\",\n        description: \"Please add at least one image to create a PDF.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setConverting(true);\n    try {\n      const pdfDoc = await PDFDocument.create();\n      \n      // Get page dimensions\n      let { width, height } = pageSizes[pageSize];\n      if (orientation === 'landscape') {\n        [width, height] = [height, width];\n      }\n\n      const marginValue = margin[0];\n\n      for (const image of images) {\n        const page = pdfDoc.addPage([width, height]);\n        \n        // Read image file\n        const imageBytes = await image.file.arrayBuffer();\n        let embeddedImage;\n\n        // Embed image based on type\n        if (image.file.type.includes('jpeg') || image.file.type.includes('jpg')) {\n          embeddedImage = await pdfDoc.embedJpg(imageBytes);\n        } else if (image.file.type.includes('png')) {\n          embeddedImage = await pdfDoc.embedPng(imageBytes);\n        } else {\n          // Convert other formats to PNG using canvas\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          const img = new Image();\n          \n          await new Promise((resolve, reject) => {\n            img.onload = resolve;\n            img.onerror = reject;\n            img.src = image.url;\n          });\n\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.drawImage(img, 0, 0);\n          \n          const pngDataUrl = canvas.toDataURL('image/png');\n          const pngBytes = await fetch(pngDataUrl).then(res => res.arrayBuffer());\n          embeddedImage = await pdfDoc.embedPng(pngBytes);\n        }\n\n        const { width: imgWidth, height: imgHeight } = embeddedImage.scale(1);\n        \n        // Calculate dimensions based on fit mode\n        let drawWidth, drawHeight, x, y;\n        const availableWidth = width - (marginValue * 2);\n        const availableHeight = height - (marginValue * 2);\n\n        if (fitMode === 'fit') {\n          // Fit image within page while maintaining aspect ratio\n          const scale = Math.min(availableWidth / imgWidth, availableHeight / imgHeight);\n          drawWidth = imgWidth * scale;\n          drawHeight = imgHeight * scale;\n          x = marginValue + (availableWidth - drawWidth) / 2;\n          y = marginValue + (availableHeight - drawHeight) / 2;\n        } else if (fitMode === 'fill') {\n          // Fill page, may crop image\n          const scale = Math.max(availableWidth / imgWidth, availableHeight / imgHeight);\n          drawWidth = imgWidth * scale;\n          drawHeight = imgHeight * scale;\n          x = marginValue + (availableWidth - drawWidth) / 2;\n          y = marginValue + (availableHeight - drawHeight) / 2;\n        } else { // stretch\n          // Stretch to fill entire available area\n          drawWidth = availableWidth;\n          drawHeight = availableHeight;\n          x = marginValue;\n          y = marginValue;\n        }\n\n        page.drawImage(embeddedImage, {\n          x,\n          y,\n          width: drawWidth,\n          height: drawHeight,\n        });\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      saveAs(blob, 'images-to-pdf.pdf');\n\n      toast({\n        title: \"PDF created successfully!\",\n        description: `Successfully converted ${images.length} image(s) to PDF.`,\n      });\n\n    } catch (error) {\n      console.error('Conversion error:', error);\n      toast({\n        title: \"Conversion failed\",\n        description: \"An error occurred during conversion. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConverting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-images text-red-400\"></i>\n            Upload Images\n          </CardTitle>\n          <CardDescription>\n            Select multiple images to convert to a single PDF document\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"image-upload\">Choose Images</Label>\n              <Input\n                id=\"image-upload\"\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"mt-1\"\n                data-testid=\"input-image-upload\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supports JPG, PNG, WebP, and other image formats\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* PDF Settings */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>PDF Settings</CardTitle>\n            <CardDescription>\n              Customize your PDF output preferences\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Page Size</Label>\n                <Select value={pageSize} onValueChange={setPageSize}>\n                  <SelectTrigger data-testid=\"select-page-size\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"A4\">A4 (210 √ó 297 mm)</SelectItem>\n                    <SelectItem value=\"A3\">A3 (297 √ó 420 mm)</SelectItem>\n                    <SelectItem value=\"A5\">A5 (148 √ó 210 mm)</SelectItem>\n                    <SelectItem value=\"Letter\">Letter (8.5 √ó 11 in)</SelectItem>\n                    <SelectItem value=\"Legal\">Legal (8.5 √ó 14 in)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Orientation</Label>\n                <Select value={orientation} onValueChange={setOrientation}>\n                  <SelectTrigger data-testid=\"select-orientation\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"portrait\">Portrait</SelectItem>\n                    <SelectItem value=\"landscape\">Landscape</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Image Fit Mode</Label>\n                <Select value={fitMode} onValueChange={setFitMode}>\n                  <SelectTrigger data-testid=\"select-fit-mode\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fit\">Fit (Maintain aspect ratio)</SelectItem>\n                    <SelectItem value=\"fill\">Fill (May crop image)</SelectItem>\n                    <SelectItem value=\"stretch\">Stretch (Fill page)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Page Margin: {margin[0]}mm</Label>\n                <Slider\n                  value={margin}\n                  onValueChange={setMargin}\n                  max={50}\n                  min={0}\n                  step={5}\n                  className=\"mt-2\"\n                  data-testid=\"slider-margin\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Image Preview and Ordering */}\n      {images.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Image Order</CardTitle>\n            <CardDescription>\n              Drag and drop to reorder images in your PDF\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {images.map((image, index) => (\n                <div\n                  key={image.id}\n                  className=\"relative group border rounded-lg overflow-hidden bg-gray-50 dark:bg-gray-800\"\n                  data-testid={`image-preview-${index}`}\n                >\n                  <img\n                    src={image.url}\n                    alt={image.name}\n                    className=\"w-full h-32 object-cover\"\n                  />\n                  <div className=\"p-2\">\n                    <p className=\"text-xs truncate font-medium\">{image.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">Page {index + 1}</p>\n                  </div>\n                  \n                  {/* Controls */}\n                  <div className=\"absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                    {index > 0 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => moveImage(index, index - 1)}\n                        data-testid={`button-move-up-${index}`}\n                      >\n                        <i className=\"fas fa-chevron-up text-xs\"></i>\n                      </Button>\n                    )}\n                    {index < images.length - 1 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => moveImage(index, index + 1)}\n                        data-testid={`button-move-down-${index}`}\n                      >\n                        <i className=\"fas fa-chevron-down text-xs\"></i>\n                      </Button>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      className=\"h-6 w-6 p-0\"\n                      onClick={() => removeImage(image.id)}\n                      data-testid={`button-remove-${index}`}\n                    >\n                      <i className=\"fas fa-times text-xs\"></i>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Convert Button */}\n      {images.length > 0 && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={convertToPDF}\n            disabled={converting}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-convert\"\n          >\n            {converting ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Creating PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-file-pdf mr-2\"></i>\n                Create PDF ({images.length} image{images.length > 1 ? 's' : ''})\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Convert Images to PDF</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Select multiple images from your device</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Configure Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Choose page size, orientation, and image fitting options</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Arrange Order</h4>\n                <p className=\"text-sm text-muted-foreground\">Reorder images as they should appear in the PDF</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your combined PDF document with all images</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16126},"client/src/pages/tools/pdf/PDFCompressor.jsx":{"content":"import { useState, useCallback } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function PDFCompressor() {\n  const tool = getToolBySlug('pdf', 'compress');\n  const [file, setFile] = useState(null);\n  const [quality, setQuality] = useState('medium');\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [compressedFile, setCompressedFile] = useState(null);\n  const [originalSize, setOriginalSize] = useState(0);\n\n  const qualitySettings = {\n    high: { name: 'High Quality', description: 'Better quality, larger size' },\n    medium: { name: 'Medium Quality', description: 'Balanced quality and size' },\n    low: { name: 'Low Quality', description: 'Smaller size, lower quality' }\n  };\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setOriginalSize(selectedFile.size);\n      setError('');\n      setCompressedFile(null);\n    } else {\n      setError('Please select a valid PDF file');\n    }\n  }, []);\n\n  const downloadFile = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleCompress = async () => {\n    if (!file) {\n      setError('Please select a PDF file');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n    setCompressedFile(null);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n\n      // Apply compression based on quality setting\n      let compressionOptions = {};\n      \n      switch (quality) {\n        case 'low':\n          compressionOptions = {\n            useObjectStreams: true,\n            addDefaultPage: false,\n            subset: true\n          };\n          break;\n        case 'medium':\n          compressionOptions = {\n            useObjectStreams: true,\n            addDefaultPage: false\n          };\n          break;\n        case 'high':\n          compressionOptions = {\n            useObjectStreams: false,\n            addDefaultPage: false\n          };\n          break;\n        default:\n          compressionOptions = {};\n      }\n\n      // Remove unnecessary metadata and objects\n      pdfDoc.setSubject('');\n      pdfDoc.setKeywords([]);\n      pdfDoc.setProducer('ToolsUniverse PDF Compressor');\n\n      // Save with compression\n      const pdfBytes = await pdfDoc.save(compressionOptions);\n      \n      const compressedBlob = new Blob([pdfBytes], { type: 'application/pdf' });\n      const fileName = file.name.replace('.pdf', '_compressed.pdf');\n      \n      setCompressedFile({\n        name: fileName,\n        blob: compressedBlob,\n        size: pdfBytes.length\n      });\n\n    } catch (err) {\n      console.error('Compression error:', err);\n      setError('Error compressing PDF. The file might be corrupted or password protected.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getCompressionRatio = () => {\n    if (!compressedFile || !originalSize) return 0;\n    return ((originalSize - compressedFile.size) / originalSize * 100).toFixed(1);\n  };\n\n  const toolContent = (\n    <div className=\"space-y-8\">\n\n      {/* Main Tool */}\n      <Card className=\"glassmorphism\">\n        <CardContent className=\"p-6 space-y-6\">\n          {/* File Upload */}\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"pdf-file\" className=\"text-base font-medium\">\n              Select PDF File\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"pdf-file\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileChange}\n                className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-50 file:text-red-700 hover:file:bg-red-100\"\n              />\n            </div>\n            {file && (\n              <div className=\"text-sm text-slate-600 dark:text-slate-300\">\n                Selected: {file.name} ({formatFileSize(file.size)})\n              </div>\n            )}\n          </div>\n\n          {/* Quality Settings */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-medium\">Compression Quality</Label>\n            <Select value={quality} onValueChange={setQuality}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(qualitySettings).map(([key, setting]) => (\n                  <SelectItem key={key} value={key}>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{setting.name}</span>\n                      <span className=\"text-sm text-slate-500\">{setting.description}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <i className=\"fas fa-exclamation-triangle w-4 h-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Button */}\n          <Button\n            onClick={handleCompress}\n            disabled={!file || processing}\n            className=\"w-full bg-red-500 hover:bg-red-600 text-white\"\n            size=\"lg\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner animate-spin mr-2\" />\n                Compressing PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-compress-arrows-alt mr-2\" />\n                Compress PDF\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {compressedFile && (\n        <Card className=\"glassmorphism\">\n          <CardContent className=\"p-6 space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-green-500/10 mb-4\">\n                <i className=\"fas fa-check-circle text-2xl text-green-400\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Compression Complete!</h3>\n              <p className=\"text-slate-600 dark:text-slate-300\">\n                Your PDF has been compressed successfully.\n              </p>\n            </div>\n            \n            {/* Compression Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-slate-500 dark:text-slate-400\">Original Size</p>\n                <p className=\"text-lg font-semibold\">{formatFileSize(originalSize)}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-slate-500 dark:text-slate-400\">Compressed Size</p>\n                <p className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                  {formatFileSize(compressedFile.size)}\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-slate-500 dark:text-slate-400\">Size Reduction</p>\n                <p className=\"text-lg font-semibold text-blue-600 dark:text-blue-400\">\n                  {getCompressionRatio()}%\n                </p>\n              </div>\n            </div>\n\n            {/* Download Button */}\n            <div className=\"text-center\">\n              <Button \n                onClick={() => downloadFile(compressedFile.blob, compressedFile.name)}\n                className=\"bg-green-500 hover:bg-green-600 text-white\"\n                size=\"lg\"\n              >\n                <i className=\"fas fa-download mr-2\" />\n                Download Compressed PDF\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-shield-alt text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Privacy First</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            All compression happens locally. Your files never leave your device.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-balance-scale text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Quality Control</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Choose your compression level to balance file size and quality.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-bolt text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Instant Results</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Get compressed PDFs in seconds without uploading to servers.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload PDF',\n      description: 'Select the PDF file you want to compress'\n    },\n    {\n      title: 'Choose Quality',\n      description: 'Pick compression level based on your needs'\n    },\n    {\n      title: 'Compress File',\n      description: 'Process the PDF with advanced compression algorithms'\n    },\n    {\n      title: 'Download Result',\n      description: 'Save your compressed PDF with reduced file size'\n    }\n  ];\n\n  const benefits = [\n    'Significantly reduce PDF file sizes',\n    'Maintain document quality and readability',\n    'Privacy-first browser-based processing',\n    'Multiple compression levels',\n    'Instant compression results'\n  ];\n\n  const useCases = [\n    'Email attachment size limits',\n    'Storage space optimization',\n    'Faster upload and download times',\n    'Web optimization for faster loading',\n    'Archive management and organization'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":11687},"client/src/pages/tools/pdf/PDFFormFiller.jsx":{"content":"import { useState, useCallback } from 'react';\nimport { PDFDocument, PDFForm } from 'pdf-lib';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\n\nexport default function PDFFormFiller() {\n  const [file, setFile] = useState(null);\n  const [formFields, setFormFields] = useState([]);\n  const [fieldValues, setFieldValues] = useState({});\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const { toast } = useToast();\n\n  const handleFileChange = useCallback(async (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setError('');\n      setFormFields([]);\n      setFieldValues({});\n      \n      try {\n        const arrayBuffer = await selectedFile.arrayBuffer();\n        const pdfDoc = await PDFDocument.load(arrayBuffer);\n        const form = pdfDoc.getForm();\n        const fields = form.getFields();\n        \n        if (fields.length === 0) {\n          setError('This PDF does not contain any fillable form fields.');\n          return;\n        }\n        \n        const formFieldsData = fields.map((field, index) => {\n          const fieldName = field.getName();\n          const fieldType = field.constructor.name;\n          \n          let fieldInfo = {\n            id: index,\n            name: fieldName,\n            type: fieldType,\n            required: false,\n            value: ''\n          };\n          \n          // Get current value if exists\n          try {\n            if (fieldType === 'PDFTextField') {\n              fieldInfo.value = field.getText() || '';\n            } else if (fieldType === 'PDFCheckBox') {\n              fieldInfo.value = field.isChecked();\n            } else if (fieldType === 'PDFRadioGroup') {\n              fieldInfo.value = field.getSelected() || '';\n              fieldInfo.options = field.getOptions();\n            } else if (fieldType === 'PDFDropdown') {\n              fieldInfo.value = field.getSelected() || '';\n              fieldInfo.options = field.getOptions();\n            }\n          } catch (err) {\n            console.warn('Error reading field value:', err);\n          }\n          \n          return fieldInfo;\n        });\n        \n        setFormFields(formFieldsData);\n        \n        // Initialize field values\n        const initialValues = {};\n        formFieldsData.forEach(field => {\n          initialValues[field.name] = field.value;\n        });\n        setFieldValues(initialValues);\n        \n      } catch (err) {\n        console.error('Error processing PDF form:', err);\n        setError('Failed to process PDF form. The file might be corrupted or password-protected.');\n      }\n    } else {\n      setError('Please select a valid PDF file');\n    }\n  }, []);\n\n  const handleFieldValueChange = (fieldName, value) => {\n    setFieldValues(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n  };\n\n  const fillForm = async () => {\n    if (!file || formFields.length === 0) {\n      setError('Please select a PDF file with form fields first');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      const form = pdfDoc.getForm();\n\n      // Fill form fields\n      formFields.forEach(fieldInfo => {\n        try {\n          const field = form.getField(fieldInfo.name);\n          const value = fieldValues[fieldInfo.name];\n          \n          if (fieldInfo.type === 'PDFTextField' && value) {\n            field.setText(String(value));\n          } else if (fieldInfo.type === 'PDFCheckBox') {\n            if (value) {\n              field.check();\n            } else {\n              field.uncheck();\n            }\n          } else if (fieldInfo.type === 'PDFRadioGroup' && value) {\n            field.select(value);\n          } else if (fieldInfo.type === 'PDFDropdown' && value) {\n            field.select(value);\n          }\n        } catch (err) {\n          console.warn(`Error filling field ${fieldInfo.name}:`, err);\n        }\n      });\n\n      // Flatten the form to make it non-editable (optional)\n      // form.flatten();\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      const fileName = file.name.replace('.pdf', '_filled.pdf');\n      saveAs(blob, fileName);\n      \n      toast({\n        title: \"Success!\",\n        description: \"PDF form has been filled successfully.\",\n      });\n    } catch (err) {\n      console.error('Error filling form:', err);\n      setError('Failed to fill PDF form. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const clearForm = () => {\n    const clearedValues = {};\n    formFields.forEach(field => {\n      clearedValues[field.name] = field.type === 'PDFCheckBox' ? false : '';\n    });\n    setFieldValues(clearedValues);\n  };\n\n  const renderFormField = (field) => {\n    const value = fieldValues[field.name] || '';\n    \n    switch (field.type) {\n      case 'PDFTextField':\n        return (\n          <Input\n            value={value}\n            onChange={(e) => handleFieldValueChange(field.name, e.target.value)}\n            className=\"bg-slate-800 border-slate-600 text-slate-100\"\n            placeholder={`Enter ${field.name}`}\n            data-testid={`input-${field.name}`}\n          />\n        );\n      \n      case 'PDFCheckBox':\n        return (\n          <Checkbox\n            checked={value}\n            onCheckedChange={(checked) => handleFieldValueChange(field.name, checked)}\n            className=\"border-slate-600\"\n            data-testid={`checkbox-${field.name}`}\n          />\n        );\n      \n      case 'PDFRadioGroup':\n        return (\n          <div className=\"space-y-2\">\n            {field.options?.map((option, index) => (\n              <div key={index} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  id={`${field.name}-${index}`}\n                  name={field.name}\n                  value={option}\n                  checked={value === option}\n                  onChange={(e) => handleFieldValueChange(field.name, e.target.value)}\n                  className=\"text-red-600\"\n                  data-testid={`radio-${field.name}-${index}`}\n                />\n                <label htmlFor={`${field.name}-${index}`} className=\"text-slate-300\">\n                  {option}\n                </label>\n              </div>\n            ))}\n          </div>\n        );\n      \n      case 'PDFDropdown':\n        return (\n          <select\n            value={value}\n            onChange={(e) => handleFieldValueChange(field.name, e.target.value)}\n            className=\"w-full bg-slate-800 border border-slate-600 text-slate-100 rounded-md px-3 py-2\"\n            data-testid={`select-${field.name}`}\n          >\n            <option value=\"\">Select an option</option>\n            {field.options?.map((option, index) => (\n              <option key={index} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        );\n      \n      default:\n        return (\n          <div className=\"text-slate-400 italic\">\n            Unsupported field type: {field.type}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"pt-16 min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-slate-100 mb-4\">\n              <i className=\"fas fa-edit text-red-400 mr-3\"></i>\n              PDF Form Filler\n            </h1>\n            <p className=\"text-xl text-slate-400\">\n              Fill PDF forms digitally with text, checkboxes, and selections\n            </p>\n          </div>\n\n          <Card className=\"glassmorphism border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Upload PDF Form</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Select a PDF file with fillable form fields\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"pdf-upload\" className=\"text-slate-300\">Choose PDF File</Label>\n                <Input\n                  id=\"pdf-upload\"\n                  type=\"file\"\n                  accept=\".pdf\"\n                  onChange={handleFileChange}\n                  className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                  data-testid=\"input-pdf-file\"\n                />\n              </div>\n\n              {error && (\n                <Alert className=\"border-red-500 bg-red-500/10\">\n                  <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {formFields.length > 0 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-lg font-semibold text-slate-100\">\n                      Form Fields ({formFields.length})\n                    </h3>\n                    <Button\n                      onClick={clearForm}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                      data-testid=\"button-clear-form\"\n                    >\n                      <i className=\"fas fa-eraser mr-2\"></i>\n                      Clear All\n                    </Button>\n                  </div>\n\n                  <div className=\"grid gap-4\">\n                    {formFields.map((field) => (\n                      <div key={field.id} className=\"space-y-2\">\n                        <Label className=\"text-slate-300 flex items-center gap-2\">\n                          {field.name}\n                          <span className=\"text-xs text-slate-500\">({field.type.replace('PDF', '')})</span>\n                        </Label>\n                        {renderFormField(field)}\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      onClick={fillForm}\n                      disabled={processing}\n                      className=\"bg-red-600 hover:bg-red-700 text-white\"\n                      data-testid=\"button-fill-form\"\n                    >\n                      {processing ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Filling Form...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-download mr-2\"></i>\n                          Download Filled PDF\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11596},"client/src/pages/tools/pdf/PDFMetadataEditor.jsx":{"content":"import { useState, useCallback } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\n\nexport default function PDFMetadataEditor() {\n  const [file, setFile] = useState(null);\n  const [metadata, setMetadata] = useState({\n    title: '',\n    author: '',\n    subject: '',\n    keywords: '',\n    creator: '',\n    producer: '',\n    creationDate: '',\n    modificationDate: ''\n  });\n  const [originalMetadata, setOriginalMetadata] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const { toast } = useToast();\n\n  const handleFileChange = useCallback(async (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setError('');\n      \n      try {\n        const arrayBuffer = await selectedFile.arrayBuffer();\n        const pdfDoc = await PDFDocument.load(arrayBuffer);\n        \n        // Extract existing metadata\n        const title = pdfDoc.getTitle() || '';\n        const author = pdfDoc.getAuthor() || '';\n        const subject = pdfDoc.getSubject() || '';\n        const keywords = pdfDoc.getKeywords() || '';\n        const creator = pdfDoc.getCreator() || '';\n        const producer = pdfDoc.getProducer() || '';\n        const creationDate = pdfDoc.getCreationDate()?.toISOString().split('T')[0] || '';\n        const modificationDate = pdfDoc.getModificationDate()?.toISOString().split('T')[0] || '';\n        \n        const extractedMetadata = {\n          title,\n          author,\n          subject,\n          keywords,\n          creator,\n          producer,\n          creationDate,\n          modificationDate\n        };\n        \n        setOriginalMetadata(extractedMetadata);\n        setMetadata(extractedMetadata);\n      } catch (err) {\n        console.error('Error extracting metadata:', err);\n        setError('Failed to extract PDF metadata. The file might be corrupted.');\n      }\n    } else {\n      setError('Please select a valid PDF file');\n    }\n  }, []);\n\n  const handleMetadataChange = (field, value) => {\n    setMetadata(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const updateMetadata = async () => {\n    if (!file) {\n      setError('Please select a PDF file first');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n\n      // Update metadata\n      if (metadata.title) pdfDoc.setTitle(metadata.title);\n      if (metadata.author) pdfDoc.setAuthor(metadata.author);\n      if (metadata.subject) pdfDoc.setSubject(metadata.subject);\n      if (metadata.keywords) pdfDoc.setKeywords(metadata.keywords);\n      if (metadata.creator) pdfDoc.setCreator(metadata.creator);\n      if (metadata.producer) pdfDoc.setProducer(metadata.producer);\n      \n      if (metadata.creationDate) {\n        pdfDoc.setCreationDate(new Date(metadata.creationDate));\n      }\n      \n      if (metadata.modificationDate) {\n        pdfDoc.setModificationDate(new Date(metadata.modificationDate));\n      } else {\n        pdfDoc.setModificationDate(new Date());\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      const fileName = file.name.replace('.pdf', '_metadata_updated.pdf');\n      saveAs(blob, fileName);\n      \n      toast({\n        title: \"Success!\",\n        description: \"PDF metadata has been updated successfully.\",\n      });\n    } catch (err) {\n      console.error('Error updating metadata:', err);\n      setError('Failed to update PDF metadata. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const resetMetadata = () => {\n    if (originalMetadata) {\n      setMetadata(originalMetadata);\n    }\n  };\n\n  const clearMetadata = () => {\n    setMetadata({\n      title: '',\n      author: '',\n      subject: '',\n      keywords: '',\n      creator: '',\n      producer: '',\n      creationDate: '',\n      modificationDate: ''\n    });\n  };\n\n  return (\n    <div className=\"pt-16 min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-slate-100 mb-4\">\n              <i className=\"fas fa-info-circle text-red-400 mr-3\"></i>\n              PDF Metadata Editor\n            </h1>\n            <p className=\"text-xl text-slate-400\">\n              Edit PDF metadata including title, author, and document properties\n            </p>\n          </div>\n\n          <Card className=\"glassmorphism border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Upload PDF File</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Select a PDF file to view and edit its metadata\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"pdf-upload\" className=\"text-slate-300\">Choose PDF File</Label>\n                <Input\n                  id=\"pdf-upload\"\n                  type=\"file\"\n                  accept=\".pdf\"\n                  onChange={handleFileChange}\n                  className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                  data-testid=\"input-pdf-file\"\n                />\n              </div>\n\n              {error && (\n                <Alert className=\"border-red-500 bg-red-500/10\">\n                  <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {file && originalMetadata && (\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"title\" className=\"text-slate-300\">Title</Label>\n                      <Input\n                        id=\"title\"\n                        value={metadata.title}\n                        onChange={(e) => handleMetadataChange('title', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        placeholder=\"Document title\"\n                        data-testid=\"input-title\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"author\" className=\"text-slate-300\">Author</Label>\n                      <Input\n                        id=\"author\"\n                        value={metadata.author}\n                        onChange={(e) => handleMetadataChange('author', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        placeholder=\"Document author\"\n                        data-testid=\"input-author\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"subject\" className=\"text-slate-300\">Subject</Label>\n                      <Input\n                        id=\"subject\"\n                        value={metadata.subject}\n                        onChange={(e) => handleMetadataChange('subject', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        placeholder=\"Document subject\"\n                        data-testid=\"input-subject\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"creator\" className=\"text-slate-300\">Creator</Label>\n                      <Input\n                        id=\"creator\"\n                        value={metadata.creator}\n                        onChange={(e) => handleMetadataChange('creator', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        placeholder=\"Application that created the document\"\n                        data-testid=\"input-creator\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"producer\" className=\"text-slate-300\">Producer</Label>\n                      <Input\n                        id=\"producer\"\n                        value={metadata.producer}\n                        onChange={(e) => handleMetadataChange('producer', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        placeholder=\"Application that produced the PDF\"\n                        data-testid=\"input-producer\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"creationDate\" className=\"text-slate-300\">Creation Date</Label>\n                      <Input\n                        id=\"creationDate\"\n                        type=\"date\"\n                        value={metadata.creationDate}\n                        onChange={(e) => handleMetadataChange('creationDate', e.target.value)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        data-testid=\"input-creation-date\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"keywords\" className=\"text-slate-300\">Keywords</Label>\n                    <Textarea\n                      id=\"keywords\"\n                      value={metadata.keywords}\n                      onChange={(e) => handleMetadataChange('keywords', e.target.value)}\n                      className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                      placeholder=\"Comma-separated keywords\"\n                      rows={3}\n                      data-testid=\"input-keywords\"\n                    />\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-4\">\n                    <Button\n                      onClick={updateMetadata}\n                      disabled={processing}\n                      className=\"bg-red-600 hover:bg-red-700 text-white\"\n                      data-testid=\"button-update-metadata\"\n                    >\n                      {processing ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-save mr-2\"></i>\n                          Update Metadata\n                        </>\n                      )}\n                    </Button>\n\n                    <Button\n                      onClick={resetMetadata}\n                      variant=\"outline\"\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                      data-testid=\"button-reset-metadata\"\n                    >\n                      <i className=\"fas fa-undo mr-2\"></i>\n                      Reset to Original\n                    </Button>\n\n                    <Button\n                      onClick={clearMetadata}\n                      variant=\"outline\"\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                      data-testid=\"button-clear-metadata\"\n                    >\n                      <i className=\"fas fa-trash mr-2\"></i>\n                      Clear All\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {originalMetadata && (\n            <Card className=\"glassmorphism border-slate-700 mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-slate-100\">Original Metadata</CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  The metadata that was extracted from the uploaded PDF\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-slate-400\">Title:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.title || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-slate-400\">Author:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.author || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-slate-400\">Subject:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.subject || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-slate-400\">Creator:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.creator || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-slate-400\">Producer:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.producer || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-slate-400\">Creation Date:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.creationDate || 'Not set'}</p>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <span className=\"text-slate-400\">Keywords:</span>\n                    <p className=\"text-slate-100\">{originalMetadata.keywords || 'Not set'}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14217},"client/src/pages/tools/pdf/PDFPageOrganizer.jsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { PDFDocument, degrees } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;\n\nexport default function PDFPageOrganizer() {\n  const [file, setFile] = useState(null);\n  const [pages, setPages] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [draggedIndex, setDraggedIndex] = useState(null);\n  const canvasRefs = useRef({});\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    await loadPDFPages(uploadedFile);\n  }, [toast]);\n\n  const loadPDFPages = async (pdfFile) => {\n    setLoading(true);\n    try {\n      const arrayBuffer = await pdfFile.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      const pageCount = pdf.numPages;\n      \n      const pageList = [];\n      for (let i = 1; i <= pageCount; i++) {\n        const page = await pdf.getPage(i);\n        const viewport = page.getViewport({ scale: 0.3 });\n        \n        // Create canvas for thumbnail\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        await page.render({\n          canvasContext: context,\n          viewport: viewport\n        }).promise;\n\n        pageList.push({\n          pageNumber: i,\n          originalIndex: i - 1,\n          rotation: 0,\n          thumbnail: canvas.toDataURL(),\n          selected: true,\n          width: viewport.width,\n          height: viewport.height\n        });\n      }\n      \n      setPages(pageList);\n      toast({\n        title: \"PDF loaded successfully\",\n        description: `Loaded ${pageCount} page(s) for organization.`,\n      });\n    } catch (error) {\n      console.error('Error loading PDF:', error);\n      toast({\n        title: \"Error loading PDF\",\n        description: \"Failed to load PDF pages. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDragStart = (e, index) => {\n    setDraggedIndex(index);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e, dropIndex) => {\n    e.preventDefault();\n    \n    if (draggedIndex === null || draggedIndex === dropIndex) {\n      setDraggedIndex(null);\n      return;\n    }\n\n    const newPages = [...pages];\n    const draggedPage = newPages[draggedIndex];\n    \n    // Remove dragged item\n    newPages.splice(draggedIndex, 1);\n    \n    // Insert at new position\n    newPages.splice(dropIndex, 0, draggedPage);\n    \n    setPages(newPages);\n    setDraggedIndex(null);\n  };\n\n  const rotatePage = (index, direction) => {\n    setPages(prev => prev.map((page, i) => {\n      if (i === index) {\n        const newRotation = direction === 'left' \n          ? (page.rotation - 90 + 360) % 360 \n          : (page.rotation + 90) % 360;\n        return { ...page, rotation: newRotation };\n      }\n      return page;\n    }));\n  };\n\n  const deletePage = (index) => {\n    setPages(prev => prev.filter((_, i) => i !== index));\n    toast({\n      title: \"Page deleted\",\n      description: \"Page has been removed from the document.\",\n    });\n  };\n\n  const duplicatePage = (index) => {\n    const pageToDuplicate = pages[index];\n    const duplicatedPage = {\n      ...pageToDuplicate,\n      pageNumber: pageToDuplicate.pageNumber + 0.1 // Unique identifier\n    };\n    \n    setPages(prev => {\n      const newPages = [...prev];\n      newPages.splice(index + 1, 0, duplicatedPage);\n      return newPages;\n    });\n    \n    toast({\n      title: \"Page duplicated\",\n      description: \"Page has been duplicated successfully.\",\n    });\n  };\n\n  const movePage = (fromIndex, direction) => {\n    if (\n      (direction === 'up' && fromIndex === 0) ||\n      (direction === 'down' && fromIndex === pages.length - 1)\n    ) {\n      return;\n    }\n\n    const newPages = [...pages];\n    const toIndex = direction === 'up' ? fromIndex - 1 : fromIndex + 1;\n    \n    [newPages[fromIndex], newPages[toIndex]] = [newPages[toIndex], newPages[fromIndex]];\n    setPages(newPages);\n  };\n\n  const selectAllPages = () => {\n    setPages(prev => prev.map(page => ({ ...page, selected: true })));\n  };\n\n  const deselectAllPages = () => {\n    setPages(prev => prev.map(page => ({ ...page, selected: false })));\n  };\n\n  const togglePageSelection = (index) => {\n    setPages(prev => prev.map((page, i) => \n      i === index ? { ...page, selected: !page.selected } : page\n    ));\n  };\n\n  const deleteSelectedPages = () => {\n    const selectedCount = pages.filter(page => page.selected).length;\n    if (selectedCount === pages.length) {\n      toast({\n        title: \"Cannot delete all pages\",\n        description: \"At least one page must remain in the document.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setPages(prev => prev.filter(page => !page.selected));\n    toast({\n      title: \"Selected pages deleted\",\n      description: `${selectedCount} page(s) have been removed.`,\n    });\n  };\n\n  const saveOrganizedPDF = async () => {\n    if (pages.length === 0) {\n      toast({\n        title: \"No pages to save\",\n        description: \"Please add at least one page to the document.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const originalPdf = await PDFDocument.load(arrayBuffer);\n      const newPdf = await PDFDocument.create();\n\n      for (const page of pages) {\n        // Copy the page from original PDF\n        const [copiedPage] = await newPdf.copyPages(originalPdf, [page.originalIndex]);\n        \n        // Apply rotation if any\n        if (page.rotation !== 0) {\n          copiedPage.setRotation(degrees(page.rotation));\n        }\n        \n        newPdf.addPage(copiedPage);\n      }\n\n      const pdfBytes = await newPdf.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      const filename = file.name.replace(/\\.pdf$/i, '_organized.pdf');\n      saveAs(blob, filename);\n\n      toast({\n        title: \"PDF organized successfully!\",\n        description: `Saved organized PDF with ${pages.length} page(s) as \"${filename}\".`,\n      });\n\n    } catch (error) {\n      console.error('Error saving organized PDF:', error);\n      toast({\n        title: \"Failed to save PDF\",\n        description: \"An error occurred while saving the organized PDF.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-sort text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to organize, reorder, and manage pages\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Loading State */}\n      {loading && (\n        <Card>\n          <CardContent className=\"py-8\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <i className=\"fas fa-spinner fa-spin text-blue-500\"></i>\n              <span>Loading PDF pages...</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Page Management Tools */}\n      {pages.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Page Management</CardTitle>\n            <CardDescription>\n              Organize your PDF pages with drag-and-drop, rotation, and selection tools\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={selectAllPages}\n                data-testid=\"button-select-all\"\n              >\n                <i className=\"fas fa-check-square mr-2\"></i>\n                Select All\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={deselectAllPages}\n                data-testid=\"button-deselect-all\"\n              >\n                <i className=\"fas fa-square mr-2\"></i>\n                Deselect All\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={deleteSelectedPages}\n                disabled={pages.filter(p => p.selected).length === 0 || pages.filter(p => p.selected).length === pages.length}\n                data-testid=\"button-delete-selected\"\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                Delete Selected\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground mb-4\">\n              <p>Drag and drop pages to reorder them. Use the controls below each page for rotation and other actions.</p>\n              <p>Total pages: {pages.length} | Selected: {pages.filter(p => p.selected).length}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Page Grid */}\n      {pages.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Page Organization</CardTitle>\n            <CardDescription>\n              Drag pages to reorder, rotate them, or delete unwanted pages\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4\">\n              {pages.map((page, index) => (\n                <div\n                  key={`${page.pageNumber}-${index}`}\n                  className={`relative border-2 rounded-lg p-2 cursor-move transition-all ${\n                    page.selected \n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                      : 'border-gray-200 dark:border-gray-700'\n                  } ${draggedIndex === index ? 'opacity-50' : ''}`}\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, index)}\n                  onDragOver={handleDragOver}\n                  onDrop={(e) => handleDrop(e, index)}\n                  data-testid={`page-${index}`}\n                >\n                  {/* Selection Checkbox */}\n                  <div className=\"absolute top-1 left-1 z-10\">\n                    <button\n                      onClick={() => togglePageSelection(index)}\n                      className={`w-5 h-5 rounded border-2 flex items-center justify-center ${\n                        page.selected \n                          ? 'bg-blue-500 border-blue-500 text-white' \n                          : 'bg-white border-gray-300'\n                      }`}\n                      data-testid={`checkbox-${index}`}\n                    >\n                      {page.selected && <i className=\"fas fa-check text-xs\"></i>}\n                    </button>\n                  </div>\n\n                  {/* Page Number */}\n                  <div className=\"absolute top-1 right-1 bg-black bg-opacity-70 text-white text-xs px-1 rounded\">\n                    {index + 1}\n                  </div>\n\n                  {/* Page Thumbnail */}\n                  <div \n                    className=\"mb-2 flex items-center justify-center bg-white rounded border\"\n                    style={{ \n                      transform: `rotate(${page.rotation}deg)`,\n                      minHeight: '120px'\n                    }}\n                  >\n                    <img\n                      src={page.thumbnail}\n                      alt={`Page ${page.pageNumber}`}\n                      className=\"max-w-full max-h-28 object-contain\"\n                    />\n                  </div>\n\n                  {/* Page Controls */}\n                  <div className=\"space-y-1\">\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => rotatePage(index, 'left')}\n                        data-testid={`rotate-left-${index}`}\n                      >\n                        <i className=\"fas fa-undo text-xs\"></i>\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => rotatePage(index, 'right')}\n                        data-testid={`rotate-right-${index}`}\n                      >\n                        <i className=\"fas fa-redo text-xs\"></i>\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => duplicatePage(index)}\n                        data-testid={`duplicate-${index}`}\n                      >\n                        <i className=\"fas fa-copy text-xs\"></i>\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => deletePage(index)}\n                        disabled={pages.length === 1}\n                        data-testid={`delete-${index}`}\n                      >\n                        <i className=\"fas fa-trash text-xs\"></i>\n                      </Button>\n                    </div>\n\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => movePage(index, 'up')}\n                        disabled={index === 0}\n                        data-testid={`move-up-${index}`}\n                      >\n                        <i className=\"fas fa-chevron-up text-xs\"></i>\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 px-1 py-1 h-6 text-xs\"\n                        onClick={() => movePage(index, 'down')}\n                        disabled={index === pages.length - 1}\n                        data-testid={`move-down-${index}`}\n                      >\n                        <i className=\"fas fa-chevron-down text-xs\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Save Button */}\n      {pages.length > 0 && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={saveOrganizedPDF}\n            disabled={processing}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-save\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Saving PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-save mr-2\"></i>\n                Save Organized PDF ({pages.length} pages)\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Organize PDF Pages</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Select your PDF file to load all pages</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Organize Pages</h4>\n                <p className=\"text-sm text-muted-foreground\">Drag and drop to reorder, rotate, duplicate, or delete pages</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Select and Manage</h4>\n                <p className=\"text-sm text-muted-foreground\">Use selection tools for bulk operations on multiple pages</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Save Result</h4>\n                <p className=\"text-sm text-muted-foreground\">Download your organized PDF with the new page order</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":19556},"client/src/pages/tools/pdf/PDFPasswordProtector.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { PDFDocument } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\n\nexport default function PDFPasswordProtector() {\n  const [file, setFile] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [encryptionLevel, setEncryptionLevel] = useState('standard');\n  const [permissions, setPermissions] = useState({\n    printing: true,\n    modification: false,\n    copying: false,\n    annotation: true\n  });\n  const [fileInfo, setFileInfo] = useState(null);\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    \n    // Get file information\n    try {\n      const arrayBuffer = await uploadedFile.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      \n      setFileInfo({\n        name: uploadedFile.name,\n        size: (uploadedFile.size / (1024 * 1024)).toFixed(2),\n        pages: pdfDoc.getPageCount()\n      });\n    } catch (error) {\n      console.error('Error reading PDF:', error);\n      toast({\n        title: \"Error reading PDF\",\n        description: \"Failed to read the PDF file. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  const generateStrongPassword = () => {\n    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n    let newPassword = '';\n    for (let i = 0; i < 12; i++) {\n      newPassword += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    setPassword(newPassword);\n    setConfirmPassword(newPassword);\n    \n    toast({\n      title: \"Strong password generated\",\n      description: \"A secure password has been generated. Make sure to save it safely!\",\n    });\n  };\n\n  const validatePassword = () => {\n    if (!password) {\n      toast({\n        title: \"Password required\",\n        description: \"Please enter a password to protect the PDF.\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure both password fields match.\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const protectPDF = async () => {\n    if (!file || !validatePassword()) return;\n\n    setProcessing(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      \n      // Load the PDF\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      \n      // Note: pdf-lib has limitations with password protection\n      // This is a simplified implementation that adds basic metadata\n      // For production use, you might need a more robust library\n      \n      // Add metadata indicating the document is protected\n      pdfDoc.setTitle(file.name + ' (Protected)');\n      pdfDoc.setCreator('ToolsUniverse PDF Protector');\n      pdfDoc.setProducer('ToolsUniverse');\n      pdfDoc.setCreationDate(new Date());\n      pdfDoc.setModificationDate(new Date());\n      \n      // Create a simple protection by embedding password in metadata\n      // Note: This is not actual encryption but a demonstration\n      const protectedData = {\n        passwordHash: btoa(password), // Base64 encode (not secure, for demo only)\n        permissions: permissions,\n        encryptionLevel: encryptionLevel,\n        protectedAt: new Date().toISOString()\n      };\n      \n      pdfDoc.setSubject(`Protected PDF - ${JSON.stringify(protectedData)}`);\n      \n      // Save the PDF\n      const pdfBytes = await pdfDoc.save();\n      \n      // For demonstration, we'll create a simple wrapper\n      // In a real implementation, you'd use proper encryption libraries\n      const protectedPdfBytes = await createProtectedPDF(pdfBytes, password, permissions);\n      \n      const blob = new Blob([protectedPdfBytes], { type: 'application/pdf' });\n      const filename = file.name.replace(/\\.pdf$/i, '_protected.pdf');\n      saveAs(blob, filename);\n\n      toast({\n        title: \"PDF protected successfully!\",\n        description: `PDF has been password protected and saved as \"${filename}\".`,\n      });\n\n      // Clear sensitive data\n      setPassword('');\n      setConfirmPassword('');\n\n    } catch (error) {\n      console.error('Error protecting PDF:', error);\n      toast({\n        title: \"Failed to protect PDF\",\n        description: \"An error occurred while protecting the PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Simplified protection (for demonstration)\n  const createProtectedPDF = async (pdfBytes, password, permissions) => {\n    // In a real implementation, you would use proper PDF encryption\n    // This is a simplified version for demonstration\n    \n    // Create a header with protection info\n    const protectionInfo = {\n      type: 'protected-pdf',\n      timestamp: Date.now(),\n      permissions: permissions\n    };\n    \n    const header = new TextEncoder().encode(JSON.stringify(protectionInfo));\n    const headerLength = new Uint32Array([header.length]);\n    \n    // Combine header length, header, and PDF data\n    const combinedArray = new Uint8Array(4 + header.length + pdfBytes.length);\n    combinedArray.set(new Uint8Array(headerLength.buffer), 0);\n    combinedArray.set(header, 4);\n    combinedArray.set(new Uint8Array(pdfBytes), 4 + header.length);\n    \n    return combinedArray;\n  };\n\n  const getPasswordStrength = (pwd) => {\n    if (!pwd) return { score: 0, text: 'No password', color: 'text-gray-400' };\n    \n    let score = 0;\n    if (pwd.length >= 8) score++;\n    if (pwd.length >= 12) score++;\n    if (/[a-z]/.test(pwd)) score++;\n    if (/[A-Z]/.test(pwd)) score++;\n    if (/\\d/.test(pwd)) score++;\n    if (/[^a-zA-Z\\d]/.test(pwd)) score++;\n    \n    if (score <= 2) return { score, text: 'Weak', color: 'text-red-500' };\n    if (score <= 4) return { score, text: 'Medium', color: 'text-yellow-500' };\n    return { score, text: 'Strong', color: 'text-green-500' };\n  };\n\n  const passwordStrength = getPasswordStrength(password);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-lock text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to add password protection\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n            \n            <Alert>\n              <i className=\"fas fa-shield-alt h-4 w-4\"></i>\n              <AlertDescription>\n                Your PDF files are processed locally in your browser. No files are uploaded to any server, ensuring complete privacy and security.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* File Information */}\n      {fileInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>File Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">Filename:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">File Size:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.size} MB</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">Pages:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.pages}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Password Settings */}\n      {file && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Password Protection Settings</CardTitle>\n            <CardDescription>\n              Configure password and security settings for your PDF\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"Enter password\"\n                    className=\"mt-1\"\n                    data-testid=\"input-password\"\n                  />\n                  {password && (\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <span className=\"text-xs\">Strength:</span>\n                      <span className={`text-xs font-medium ${passwordStrength.color}`}>\n                        {passwordStrength.text}\n                      </span>\n                      <div className=\"flex gap-1\">\n                        {[...Array(6)].map((_, i) => (\n                          <div\n                            key={i}\n                            className={`w-2 h-1 rounded ${\n                              i < passwordStrength.score ? 'bg-current' : 'bg-gray-300'\n                            } ${passwordStrength.color}`}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    placeholder=\"Confirm password\"\n                    className=\"mt-1\"\n                    data-testid=\"input-confirm-password\"\n                  />\n                  {confirmPassword && password !== confirmPassword && (\n                    <p className=\"text-xs text-red-500 mt-1\">Passwords do not match</p>\n                  )}\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={generateStrongPassword}\n                  className=\"w-full\"\n                  data-testid=\"button-generate-password\"\n                >\n                  <i className=\"fas fa-key mr-2\"></i>\n                  Generate Strong Password\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Encryption Level</Label>\n                  <Select value={encryptionLevel} onValueChange={setEncryptionLevel}>\n                    <SelectTrigger data-testid=\"select-encryption-level\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"standard\">Standard (128-bit)</SelectItem>\n                      <SelectItem value=\"high\">High Security (256-bit)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Document Permissions</Label>\n                  <div className=\"mt-2 space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"allow-printing\"\n                        checked={permissions.printing}\n                        onCheckedChange={(checked) => \n                          setPermissions(prev => ({ ...prev, printing: checked }))\n                        }\n                        data-testid=\"checkbox-printing\"\n                      />\n                      <Label htmlFor=\"allow-printing\" className=\"text-sm\">\n                        Allow printing\n                      </Label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"allow-modification\"\n                        checked={permissions.modification}\n                        onCheckedChange={(checked) => \n                          setPermissions(prev => ({ ...prev, modification: checked }))\n                        }\n                        data-testid=\"checkbox-modification\"\n                      />\n                      <Label htmlFor=\"allow-modification\" className=\"text-sm\">\n                        Allow document modification\n                      </Label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"allow-copying\"\n                        checked={permissions.copying}\n                        onCheckedChange={(checked) => \n                          setPermissions(prev => ({ ...prev, copying: checked }))\n                        }\n                        data-testid=\"checkbox-copying\"\n                      />\n                      <Label htmlFor=\"allow-copying\" className=\"text-sm\">\n                        Allow text copying\n                      </Label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"allow-annotation\"\n                        checked={permissions.annotation}\n                        onCheckedChange={(checked) => \n                          setPermissions(prev => ({ ...prev, annotation: checked }))\n                        }\n                        data-testid=\"checkbox-annotation\"\n                      />\n                      <Label htmlFor=\"allow-annotation\" className=\"text-sm\">\n                        Allow annotations and comments\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Protect Button */}\n      {file && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={protectPDF}\n            disabled={processing || !password || password !== confirmPassword}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-protect\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Protecting PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-lock mr-2\"></i>\n                Protect PDF with Password\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Protect PDF with Password</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF File</h4>\n                <p className=\"text-sm text-muted-foreground\">Select the PDF document you want to protect</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Set Password</h4>\n                <p className=\"text-sm text-muted-foreground\">Create a strong password or generate one automatically</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Configure Permissions</h4>\n                <p className=\"text-sm text-muted-foreground\">Set document permissions for printing, copying, and editing</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Protected PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your password-protected PDF document</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Notice */}\n      <Card className=\"border-green-200 dark:border-green-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-green-600 dark:text-green-500\">\n            <i className=\"fas fa-shield-alt\"></i>\n            Security Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm\">\n          <p>\n            <strong>Local Processing:</strong> All PDF protection happens in your browser. Your files and passwords never leave your device.\n          </p>\n          <p>\n            <strong>Strong Passwords:</strong> Use passwords with at least 8 characters, including uppercase, lowercase, numbers, and symbols.\n          </p>\n          <p>\n            <strong>Password Storage:</strong> Make sure to store your password safely. If lost, the PDF cannot be recovered.\n          </p>\n          <p>\n            <strong>Compatibility:</strong> Protected PDFs will work with most PDF viewers that support password protection.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20015},"client/src/pages/tools/pdf/PDFPasswordRemover.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { PDFDocument } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;\n\nexport default function PDFPasswordRemover() {\n  const [file, setFile] = useState(null);\n  const [password, setPassword] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [isPasswordProtected, setIsPasswordProtected] = useState(false);\n  const [fileInfo, setFileInfo] = useState(null);\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    setPassword('');\n    await checkPasswordProtection(uploadedFile);\n  }, [toast]);\n\n  const checkPasswordProtection = async (pdfFile) => {\n    try {\n      const arrayBuffer = await pdfFile.arrayBuffer();\n      \n      try {\n        // Try to load without password\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        setIsPasswordProtected(false);\n        setFileInfo({\n          name: pdfFile.name,\n          size: (pdfFile.size / (1024 * 1024)).toFixed(2),\n          pages: pdf.numPages,\n          passwordProtected: false\n        });\n        \n        toast({\n          title: \"PDF loaded successfully\",\n          description: \"This PDF is not password protected.\",\n        });\n      } catch (error) {\n        if (error.name === 'PasswordException') {\n          setIsPasswordProtected(true);\n          setFileInfo({\n            name: pdfFile.name,\n            size: (pdfFile.size / (1024 * 1024)).toFixed(2),\n            pages: 'Unknown',\n            passwordProtected: true\n          });\n        } else {\n          throw error;\n        }\n      }\n    } catch (error) {\n      console.error('Error checking PDF:', error);\n      toast({\n        title: \"Error loading PDF\",\n        description: \"Failed to load the PDF file. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const removePassword = async () => {\n    if (!file) return;\n\n    if (isPasswordProtected && !password.trim()) {\n      toast({\n        title: \"Password required\",\n        description: \"Please enter the password to unlock the PDF.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      \n      // First, verify password and load with PDF.js\n      let pdf;\n      try {\n        pdf = await pdfjsLib.getDocument({ \n          data: arrayBuffer, \n          password: isPasswordProtected ? password : undefined \n        }).promise;\n      } catch (error) {\n        if (error.name === 'PasswordException') {\n          toast({\n            title: \"Incorrect password\",\n            description: \"The password you entered is incorrect.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        throw error;\n      }\n\n      // Now create a new PDF without password using pdf-lib\n      const pdfDoc = await PDFDocument.load(arrayBuffer, { \n        password: isPasswordProtected ? password : undefined \n      });\n      \n      // Save without password protection\n      const pdfBytes = await pdfDoc.save();\n      \n      // Create blob and download\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      const filename = file.name.replace(/\\.pdf$/i, '_unlocked.pdf');\n      saveAs(blob, filename);\n\n      toast({\n        title: \"Password removed successfully!\",\n        description: `PDF has been unlocked and saved as \"${filename}\".`,\n      });\n\n      // Update file info\n      setFileInfo(prev => ({\n        ...prev,\n        pages: pdf.numPages,\n        passwordProtected: false\n      }));\n      setIsPasswordProtected(false);\n      setPassword('');\n\n    } catch (error) {\n      console.error('Error removing password:', error);\n      \n      let errorMessage = \"An error occurred while removing the password.\";\n      if (error.message.includes('password')) {\n        errorMessage = \"Incorrect password. Please check and try again.\";\n      } else if (error.message.includes('encrypted')) {\n        errorMessage = \"This PDF uses encryption that cannot be removed.\";\n      }\n      \n      toast({\n        title: \"Failed to remove password\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-unlock text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a password-protected PDF file to remove its password\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n            \n            <Alert>\n              <i className=\"fas fa-shield-alt h-4 w-4\"></i>\n              <AlertDescription>\n                Your PDF files are processed locally in your browser. No files are uploaded to any server, ensuring complete privacy and security.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* File Information */}\n      {fileInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>File Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Filename:</span>\n                  <span className=\"text-sm text-muted-foreground\">{fileInfo.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">File Size:</span>\n                  <span className=\"text-sm text-muted-foreground\">{fileInfo.size} MB</span>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Pages:</span>\n                  <span className=\"text-sm text-muted-foreground\">{fileInfo.pages}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Password Protected:</span>\n                  <span className={`text-sm ${fileInfo.passwordProtected ? 'text-red-500' : 'text-green-500'}`}>\n                    {fileInfo.passwordProtected ? 'Yes' : 'No'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Password Input */}\n      {isPasswordProtected && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Enter Password</CardTitle>\n            <CardDescription>\n              Please enter the password to unlock this PDF\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"pdf-password\">PDF Password</Label>\n                <Input\n                  id=\"pdf-password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter PDF password\"\n                  className=\"mt-1\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Remove Password Button */}\n      {file && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={removePassword}\n            disabled={processing || (isPasswordProtected && !password.trim())}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-remove-password\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Removing Password...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-unlock mr-2\"></i>\n                {isPasswordProtected ? 'Remove Password' : 'Download Unlocked PDF'}\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Remove PDF Password</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF File</h4>\n                <p className=\"text-sm text-muted-foreground\">Select your password-protected PDF document</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Enter Password</h4>\n                <p className=\"text-sm text-muted-foreground\">If required, enter the current password to unlock the PDF</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Remove Protection</h4>\n                <p className=\"text-sm text-muted-foreground\">Click to remove password protection from the PDF</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Unlocked PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your PDF file without password protection</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Notice */}\n      <Card className=\"border-yellow-200 dark:border-yellow-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-yellow-600 dark:text-yellow-500\">\n            <i className=\"fas fa-exclamation-triangle\"></i>\n            Security Notice\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm\">\n          <p>\n            <strong>Privacy:</strong> All PDF processing happens locally in your browser. Your files and passwords never leave your device.\n          </p>\n          <p>\n            <strong>Legal Use:</strong> Only remove passwords from PDFs you own or have permission to modify. Respect copyright and legal restrictions.\n          </p>\n          <p>\n            <strong>File Security:</strong> The unlocked PDF will be downloadable without any password protection. Store it securely if needed.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12970},"client/src/pages/tools/pdf/PDFSignature.jsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { PDFDocument, rgb } from 'pdf-lib';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { saveAs } from 'file-saver';\n\nexport default function PDFSignature() {\n  const [file, setFile] = useState(null);\n  const [signatureType, setSignatureType] = useState('draw');\n  const [drawnSignature, setDrawnSignature] = useState(null);\n  const [textSignature, setTextSignature] = useState('');\n  const [signatureImage, setSignatureImage] = useState(null);\n  const [position, setPosition] = useState({ x: 100, y: 100 });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const { toast } = useToast();\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setError('');\n    } else {\n      setError('Please select a valid PDF file');\n    }\n  }, []);\n\n  const handleImageUpload = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setSignatureImage(e.target.result);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setError('Please select a valid image file for signature');\n    }\n  }, []);\n\n  // Drawing functions\n  const startDrawing = (e) => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const ctx = canvas.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);\n  };\n\n  const draw = (e) => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const ctx = canvas.getContext('2d');\n    ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);\n    ctx.stroke();\n  };\n\n  const stopDrawing = () => {\n    if (isDrawing) {\n      setIsDrawing(false);\n      const canvas = canvasRef.current;\n      setDrawnSignature(canvas.toDataURL());\n    }\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setDrawnSignature(null);\n  };\n\n  const addSignatureToPDF = async () => {\n    if (!file) {\n      setError('Please select a PDF file first');\n      return;\n    }\n\n    let signatureData = null;\n    \n    if (signatureType === 'draw' && drawnSignature) {\n      signatureData = drawnSignature;\n    } else if (signatureType === 'image' && signatureImage) {\n      signatureData = signatureImage;\n    } else if (signatureType === 'text' && textSignature.trim()) {\n      // Create signature from text\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 100;\n      const ctx = canvas.getContext('2d');\n      \n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = 'black';\n      ctx.font = '36px cursive';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(textSignature, canvas.width / 2, canvas.height / 2);\n      \n      signatureData = canvas.toDataURL();\n    } else {\n      setError('Please create a signature first');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      \n      // Convert signature to image\n      const signatureImageBytes = await fetch(signatureData).then(res => res.arrayBuffer());\n      const signatureImg = await pdfDoc.embedPng(signatureImageBytes);\n      \n      // Get the first page (you can modify this to select specific pages)\n      const pages = pdfDoc.getPages();\n      const firstPage = pages[0];\n      \n      // Calculate signature dimensions\n      const signatureWidth = 150;\n      const signatureHeight = (signatureImg.height / signatureImg.width) * signatureWidth;\n      \n      // Add signature to page\n      firstPage.drawImage(signatureImg, {\n        x: position.x,\n        y: firstPage.getHeight() - position.y - signatureHeight,\n        width: signatureWidth,\n        height: signatureHeight,\n      });\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      const fileName = file.name.replace('.pdf', '_signed.pdf');\n      saveAs(blob, fileName);\n      \n      toast({\n        title: \"Success!\",\n        description: \"PDF has been signed successfully.\",\n      });\n    } catch (err) {\n      console.error('Error adding signature:', err);\n      setError('Failed to add signature to PDF. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"pt-16 min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-slate-100 mb-4\">\n              <i className=\"fas fa-signature text-red-400 mr-3\"></i>\n              PDF Digital Signature\n            </h1>\n            <p className=\"text-xl text-slate-400\">\n              Add digital signatures to PDF documents securely\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* PDF Upload */}\n            <Card className=\"glassmorphism border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-slate-100\">Upload PDF</CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Select the PDF file you want to sign\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"pdf-upload\" className=\"text-slate-300\">Choose PDF File</Label>\n                  <Input\n                    id=\"pdf-upload\"\n                    type=\"file\"\n                    accept=\".pdf\"\n                    onChange={handleFileChange}\n                    className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                    data-testid=\"input-pdf-file\"\n                  />\n                </div>\n\n                {file && (\n                  <div className=\"text-sm text-slate-300\">\n                    <i className=\"fas fa-file-pdf mr-2 text-red-400\"></i>\n                    {file.name}\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"position-x\" className=\"text-slate-300\">X Position</Label>\n                    <Input\n                      id=\"position-x\"\n                      type=\"number\"\n                      value={position.x}\n                      onChange={(e) => setPosition(prev => ({ ...prev, x: parseInt(e.target.value) }))}\n                      className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                      data-testid=\"input-x-position\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"position-y\" className=\"text-slate-300\">Y Position</Label>\n                    <Input\n                      id=\"position-y\"\n                      type=\"number\"\n                      value={position.y}\n                      onChange={(e) => setPosition(prev => ({ ...prev, y: parseInt(e.target.value) }))}\n                      className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                      data-testid=\"input-y-position\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Signature Creation */}\n            <Card className=\"glassmorphism border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-slate-100\">Create Signature</CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Draw, type, or upload your signature\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs value={signatureType} onValueChange={setSignatureType}>\n                  <TabsList className=\"grid w-full grid-cols-3 bg-slate-800\">\n                    <TabsTrigger value=\"draw\" className=\"data-[state=active]:bg-red-600\">Draw</TabsTrigger>\n                    <TabsTrigger value=\"text\" className=\"data-[state=active]:bg-red-600\">Type</TabsTrigger>\n                    <TabsTrigger value=\"image\" className=\"data-[state=active]:bg-red-600\">Upload</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"draw\" className=\"space-y-4\">\n                    <div className=\"border border-slate-600 rounded-lg p-4 bg-white\">\n                      <canvas\n                        ref={canvasRef}\n                        width={350}\n                        height={150}\n                        className=\"border border-gray-300 cursor-crosshair\"\n                        onMouseDown={startDrawing}\n                        onMouseMove={draw}\n                        onMouseUp={stopDrawing}\n                        onMouseLeave={stopDrawing}\n                        data-testid=\"canvas-signature\"\n                      />\n                    </div>\n                    <Button\n                      onClick={clearCanvas}\n                      variant=\"outline\"\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                      data-testid=\"button-clear-canvas\"\n                    >\n                      <i className=\"fas fa-eraser mr-2\"></i>\n                      Clear\n                    </Button>\n                  </TabsContent>\n\n                  <TabsContent value=\"text\" className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"signature-text\" className=\"text-slate-300\">Your Signature Text</Label>\n                      <Input\n                        id=\"signature-text\"\n                        value={textSignature}\n                        onChange={(e) => setTextSignature(e.target.value)}\n                        placeholder=\"Enter your name\"\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        data-testid=\"input-signature-text\"\n                      />\n                    </div>\n                    {textSignature && (\n                      <div className=\"p-4 bg-white rounded-lg border border-slate-600\">\n                        <div style={{ fontFamily: 'cursive', fontSize: '24px', textAlign: 'center' }}>\n                          {textSignature}\n                        </div>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"image\" className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"signature-image\" className=\"text-slate-300\">Upload Signature Image</Label>\n                      <Input\n                        id=\"signature-image\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"bg-slate-800 border-slate-600 text-slate-100\"\n                        data-testid=\"input-signature-image\"\n                      />\n                    </div>\n                    {signatureImage && (\n                      <div className=\"p-4 bg-white rounded-lg border border-slate-600\">\n                        <img\n                          src={signatureImage}\n                          alt=\"Signature\"\n                          className=\"max-w-full h-auto max-h-32 mx-auto\"\n                        />\n                      </div>\n                    )}\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n\n          {error && (\n            <Alert className=\"border-red-500 bg-red-500/10 mt-6\">\n              <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"text-center mt-8\">\n            <Button\n              onClick={addSignatureToPDF}\n              disabled={processing || !file}\n              className=\"bg-red-600 hover:bg-red-700 text-white px-8 py-3\"\n              data-testid=\"button-sign-pdf\"\n            >\n              {processing ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Signing PDF...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Sign and Download PDF\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13453},"client/src/pages/tools/pdf/PDFSplitter.jsx":{"content":"import { useState, useCallback } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\nexport default function PDFSplitter() {\n  const tool = getToolBySlug('pdf', 'split');\n  const [file, setFile] = useState(null);\n  const [splitType, setSplitType] = useState('pages'); // 'pages' or 'ranges'\n  const [pageRanges, setPageRanges] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [splitFiles, setSplitFiles] = useState([]);\n\n  const handleFileChange = useCallback((e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setError('');\n      setSplitFiles([]);\n    } else {\n      setError('Please select a valid PDF file');\n    }\n  }, []);\n\n  const downloadFile = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const splitIntoPages = async (pdfDoc, totalPages) => {\n    const files = [];\n    for (let i = 0; i < totalPages; i++) {\n      const newPdf = await PDFDocument.create();\n      const [page] = await newPdf.copyPages(pdfDoc, [i]);\n      newPdf.addPage(page);\n      const pdfBytes = await newPdf.save();\n      files.push({\n        name: `page_${i + 1}.pdf`,\n        blob: new Blob([pdfBytes], { type: 'application/pdf' }),\n        size: pdfBytes.length\n      });\n    }\n    return files;\n  };\n\n  const splitByRanges = async (pdfDoc, totalPages) => {\n    const files = [];\n    const ranges = pageRanges.split(',').map(range => range.trim());\n    \n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      let startPage, endPage;\n      \n      if (range.includes('-')) {\n        [startPage, endPage] = range.split('-').map(p => parseInt(p.trim()));\n      } else {\n        startPage = endPage = parseInt(range);\n      }\n      \n      if (startPage < 1 || endPage > totalPages || startPage > endPage) {\n        throw new Error(`Invalid range: ${range}`);\n      }\n      \n      const newPdf = await PDFDocument.create();\n      const pageIndices = [];\n      for (let j = startPage - 1; j < endPage; j++) {\n        pageIndices.push(j);\n      }\n      \n      const pages = await newPdf.copyPages(pdfDoc, pageIndices);\n      pages.forEach(page => newPdf.addPage(page));\n      \n      const pdfBytes = await newPdf.save();\n      files.push({\n        name: `pages_${startPage}-${endPage}.pdf`,\n        blob: new Blob([pdfBytes], { type: 'application/pdf' }),\n        size: pdfBytes.length\n      });\n    }\n    return files;\n  };\n\n  const handleSplit = async () => {\n    if (!file) {\n      setError('Please select a PDF file');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n    setSplitFiles([]);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      const totalPages = pdfDoc.getPageCount();\n\n      let files;\n      if (splitType === 'pages') {\n        files = await splitIntoPages(pdfDoc, totalPages);\n      } else {\n        if (!pageRanges) {\n          throw new Error('Please specify page ranges');\n        }\n        files = await splitByRanges(pdfDoc, totalPages);\n      }\n\n      setSplitFiles(files);\n    } catch (err) {\n      setError(err.message || 'Error splitting PDF');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const downloadAll = async () => {\n    if (splitFiles.length === 0) return;\n\n    // Create a zip file would require a zip library, for now download individually\n    splitFiles.forEach(file => {\n      downloadFile(file.blob, file.name);\n    });\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const toolContent = (\n    <div className=\"space-y-8\">\n\n      {/* Main Tool */}\n      <Card className=\"glassmorphism\">\n        <CardContent className=\"p-6 space-y-6\">\n          {/* File Upload */}\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"pdf-file\" className=\"text-base font-medium\">\n              Select PDF File\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"pdf-file\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileChange}\n                className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-50 file:text-red-700 hover:file:bg-red-100\"\n              />\n            </div>\n            {file && (\n              <div className=\"text-sm text-slate-600 dark:text-slate-300\">\n                Selected: {file.name} ({formatFileSize(file.size)})\n              </div>\n            )}\n          </div>\n\n          {/* Split Options */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-medium\">Split Method</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card \n                className={`cursor-pointer transition-all duration-200 ${\n                  splitType === 'pages' \n                    ? 'ring-2 ring-red-400 bg-red-50/50 dark:bg-red-900/10' \n                    : 'hover:bg-slate-50 dark:hover:bg-slate-800/50'\n                }`}\n                onClick={() => setSplitType('pages')}\n              >\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto mb-3\">\n                    <i className=\"fas fa-files-o text-red-600 dark:text-red-400\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Individual Pages</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n                    Split into separate files for each page\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card \n                className={`cursor-pointer transition-all duration-200 ${\n                  splitType === 'ranges' \n                    ? 'ring-2 ring-red-400 bg-red-50/50 dark:bg-red-900/10' \n                    : 'hover:bg-slate-50 dark:hover:bg-slate-800/50'\n                }`}\n                onClick={() => setSplitType('ranges')}\n              >\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto mb-3\">\n                    <i className=\"fas fa-layer-group text-red-600 dark:text-red-400\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Custom Ranges</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n                    Split by specific page ranges\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Range Input */}\n          {splitType === 'ranges' && (\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"page-ranges\" className=\"text-base font-medium\">\n                Page Ranges\n              </Label>\n              <Input\n                id=\"page-ranges\"\n                type=\"text\"\n                placeholder=\"e.g., 1-3, 5, 7-10\"\n                value={pageRanges}\n                onChange={(e) => setPageRanges(e.target.value)}\n              />\n              <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n                Enter page ranges separated by commas. Examples: \"1-3\" for pages 1 to 3, \"5\" for page 5 only\n              </p>\n            </div>\n          )}\n\n          {/* Error Display */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <i className=\"fas fa-exclamation-triangle w-4 h-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Button */}\n          <Button\n            onClick={handleSplit}\n            disabled={!file || processing}\n            className=\"w-full bg-red-500 hover:bg-red-600 text-white\"\n            size=\"lg\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner animate-spin mr-2\" />\n                Splitting PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-cut mr-2\" />\n                Split PDF\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {splitFiles.length > 0 && (\n        <Card className=\"glassmorphism\">\n          <CardContent className=\"p-6 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold flex items-center\">\n                <i className=\"fas fa-check-circle text-green-400 mr-2\" />\n                Split Complete ({splitFiles.length} files)\n              </h3>\n              <Button onClick={downloadAll} variant=\"outline\" size=\"sm\">\n                <i className=\"fas fa-download mr-2\" />\n                Download All\n              </Button>\n            </div>\n            \n            <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n              {splitFiles.map((file, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-slate-50 dark:bg-slate-800/50\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 rounded bg-red-100 dark:bg-red-900/30 flex items-center justify-center\">\n                      <i className=\"fas fa-file-pdf text-red-600 dark:text-red-400 text-sm\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{file.name}</p>\n                      <p className=\"text-sm text-slate-500\">{formatFileSize(file.size)}</p>\n                    </div>\n                  </div>\n                  <Button\n                    onClick={() => downloadFile(file.blob, file.name)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                  >\n                    <i className=\"fas fa-download\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-shield-alt text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Privacy First</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            All processing happens in your browser. Files never leave your device.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-bolt text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Lightning Fast</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Instantly split PDFs without waiting for uploads or processing queues.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-red-100 dark:bg-red-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-cogs text-red-600 dark:text-red-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Flexible Options</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Split by individual pages or custom ranges to meet your needs.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const howToSteps = [\n    {\n      title: 'Upload PDF',\n      description: 'Select the PDF file you want to split'\n    },\n    {\n      title: 'Choose Split Method',\n      description: 'Split by individual pages or custom page ranges'\n    },\n    {\n      title: 'Set Options',\n      description: 'Specify page ranges if using custom split method'\n    },\n    {\n      title: 'Download Files',\n      description: 'Get individual PDF files or download all at once'\n    }\n  ];\n\n  const benefits = [\n    'Split PDFs into individual pages',\n    'Custom page range extraction',\n    'Browser-based processing',\n    'No file size limitations',\n    'Instant results'\n  ];\n\n  const useCases = [\n    'Extract specific pages from documents',\n    'Share individual pages from reports',\n    'Create smaller files from large PDFs',\n    'Organize document sections',\n    'Prepare pages for editing'\n  ];\n\n  return (\n    <ToolShell \n      tool={tool} \n      howToSteps={howToSteps}\n      benefits={benefits}\n      useCases={useCases}\n    >\n      {toolContent}\n    </ToolShell>\n  );\n}","size_bytes":13659},"client/src/pages/tools/pdf/PDFTextExtractor.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { saveAs } from 'file-saver';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;\n\nexport default function PDFTextExtractor() {\n  const tool = getToolBySlug('pdf', 'extract-text');\n  const [file, setFile] = useState(null);\n  const [extracting, setExtracting] = useState(false);\n  const [extractedText, setExtractedText] = useState('');\n  const [extractionFormat, setExtractionFormat] = useState('plain');\n  const [pageRange, setPageRange] = useState('all');\n  const [customRange, setCustomRange] = useState('');\n  const [fileInfo, setFileInfo] = useState(null);\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    setExtractedText('');\n    await getFileInfo(uploadedFile);\n  }, [toast]);\n\n  const getFileInfo = async (pdfFile) => {\n    try {\n      const arrayBuffer = await pdfFile.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      \n      setFileInfo({\n        name: pdfFile.name,\n        size: (pdfFile.size / (1024 * 1024)).toFixed(2),\n        pages: pdf.numPages\n      });\n    } catch (error) {\n      console.error('Error reading PDF info:', error);\n    }\n  };\n\n  const parsePageRange = (range, totalPages) => {\n    if (!range.trim()) return [];\n    \n    const pages = new Set();\n    const parts = range.split(',');\n    \n    for (const part of parts) {\n      const trimmed = part.trim();\n      if (trimmed.includes('-')) {\n        const [start, end] = trimmed.split('-').map(n => parseInt(n.trim()));\n        if (start && end && start <= end && start >= 1 && end <= totalPages) {\n          for (let i = start; i <= end; i++) {\n            pages.add(i);\n          }\n        }\n      } else {\n        const pageNum = parseInt(trimmed);\n        if (pageNum >= 1 && pageNum <= totalPages) {\n          pages.add(pageNum);\n        }\n      }\n    }\n    \n    return Array.from(pages).sort((a, b) => a - b);\n  };\n\n  const extractText = async () => {\n    if (!file) return;\n\n    setExtracting(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      \n      let pagesToExtract = [];\n      if (pageRange === 'all') {\n        pagesToExtract = Array.from({ length: pdf.numPages }, (_, i) => i + 1);\n      } else if (pageRange === 'custom') {\n        pagesToExtract = parsePageRange(customRange, pdf.numPages);\n        if (pagesToExtract.length === 0) {\n          toast({\n            title: \"Invalid page range\",\n            description: \"Please enter a valid page range (e.g., 1-3, 5, 7-10).\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      let fullText = '';\n      let wordCount = 0;\n      let charCount = 0;\n\n      for (const pageNum of pagesToExtract) {\n        const page = await pdf.getPage(pageNum);\n        const textContent = await page.getTextContent();\n        \n        let pageText = '';\n        textContent.items.forEach((item) => {\n          pageText += item.str + ' ';\n        });\n        \n        if (extractionFormat === 'structured') {\n          fullText += `=== PAGE ${pageNum} ===\\n`;\n          fullText += pageText.trim() + '\\n\\n';\n        } else if (extractionFormat === 'lines') {\n          const lines = pageText.trim().split('\\n');\n          lines.forEach((line, index) => {\n            if (line.trim()) {\n              fullText += `Line ${index + 1}: ${line.trim()}\\n`;\n            }\n          });\n          fullText += '\\n';\n        } else {\n          fullText += pageText.trim() + '\\n\\n';\n        }\n        \n        // Count words and characters\n        const words = pageText.trim().split(/\\s+/).filter(word => word.length > 0);\n        wordCount += words.length;\n        charCount += pageText.length;\n      }\n\n      setExtractedText(fullText.trim());\n      \n      toast({\n        title: \"Text extracted successfully!\",\n        description: `Extracted ${wordCount.toLocaleString()} words from ${pagesToExtract.length} page(s).`,\n      });\n\n    } catch (error) {\n      console.error('Text extraction error:', error);\n      toast({\n        title: \"Extraction failed\",\n        description: \"Failed to extract text from PDF. The PDF might be password-protected or contain only images.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExtracting(false);\n    }\n  };\n\n  const downloadAsText = () => {\n    if (!extractedText) return;\n\n    const blob = new Blob([extractedText], { type: 'text/plain; charset=utf-8' });\n    const filename = file.name.replace(/\\.pdf$/i, '_extracted.txt');\n    saveAs(blob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const downloadAsJSON = () => {\n    if (!extractedText) return;\n\n    const jsonData = {\n      source: file.name,\n      extractedAt: new Date().toISOString(),\n      extractionFormat: extractionFormat,\n      pageRange: pageRange === 'all' ? 'all pages' : customRange,\n      content: extractedText,\n      statistics: {\n        characterCount: extractedText.length,\n        wordCount: extractedText.split(/\\s+/).filter(word => word.length > 0).length,\n        lineCount: extractedText.split('\\n').length\n      }\n    };\n\n    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });\n    const filename = file.name.replace(/\\.pdf$/i, '_extracted.json');\n    saveAs(blob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const copyToClipboard = async () => {\n    if (!extractedText) return;\n\n    try {\n      await navigator.clipboard.writeText(extractedText);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Text has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy text to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearText = () => {\n    setExtractedText('');\n  };\n\n  const getTextStatistics = () => {\n    if (!extractedText) return null;\n\n    const words = extractedText.split(/\\s+/).filter(word => word.length > 0);\n    const sentences = extractedText.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const paragraphs = extractedText.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\n\n    return {\n      characters: extractedText.length,\n      charactersNoSpaces: extractedText.replace(/\\s/g, '').length,\n      words: words.length,\n      sentences: sentences.length,\n      paragraphs: paragraphs.length,\n      averageWordsPerSentence: words.length / sentences.length || 0\n    };\n  };\n\n  const stats = getTextStatistics();\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-file-alt text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to extract text content with OCR support\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n            \n            <Alert>\n              <i className=\"fas fa-info-circle h-4 w-4\"></i>\n              <AlertDescription>\n                This tool extracts text from PDF files. Works best with text-based PDFs. Scanned documents may have limited extraction quality.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* File Information */}\n      {fileInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>File Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">Filename:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">File Size:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.size} MB</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium\">Pages:</span>\n                <span className=\"text-sm text-muted-foreground\">{fileInfo.pages}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Extraction Settings */}\n      {file && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Extraction Settings</CardTitle>\n            <CardDescription>\n              Configure how text should be extracted from the PDF\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Extraction Format</Label>\n                <Select value={extractionFormat} onValueChange={setExtractionFormat}>\n                  <SelectTrigger data-testid=\"select-extraction-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"plain\">Plain Text</SelectItem>\n                    <SelectItem value=\"structured\">Structured (with page headers)</SelectItem>\n                    <SelectItem value=\"lines\">Line by Line</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Page Range</Label>\n                <Select value={pageRange} onValueChange={setPageRange}>\n                  <SelectTrigger data-testid=\"select-page-range\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Pages</SelectItem>\n                    <SelectItem value=\"custom\">Custom Range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {pageRange === 'custom' && (\n              <div>\n                <Label htmlFor=\"custom-range\">Custom Page Range</Label>\n                <Input\n                  id=\"custom-range\"\n                  value={customRange}\n                  onChange={(e) => setCustomRange(e.target.value)}\n                  placeholder=\"e.g., 1-3, 5, 7-10\"\n                  className=\"mt-1\"\n                  data-testid=\"input-custom-range\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Use comma-separated values and ranges (e.g., 1-3, 5, 7-10)\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex justify-center\">\n              <Button\n                onClick={extractText}\n                disabled={extracting || (pageRange === 'custom' && !customRange.trim())}\n                size=\"lg\"\n                className=\"px-8\"\n                data-testid=\"button-extract\"\n              >\n                {extracting ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Extracting Text...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-file-export mr-2\"></i>\n                    Extract Text\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Text Statistics */}\n      {stats && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Text Statistics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">{stats.characters.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Characters</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">{stats.words.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Words</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-purple-600\">{stats.sentences.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Sentences</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-orange-600\">{stats.paragraphs.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Paragraphs</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-red-600\">{stats.charactersNoSpaces.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Chars (no spaces)</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-indigo-600\">{Math.round(stats.averageWordsPerSentence)}</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Words/Sentence</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Extracted Text */}\n      {extractedText && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Extracted Text</CardTitle>\n            <CardDescription>\n              Preview and download the extracted text content\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"max-h-96 overflow-y-auto p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border\">\n                <Textarea\n                  value={extractedText}\n                  onChange={(e) => setExtractedText(e.target.value)}\n                  className=\"min-h-80 resize-none border-none bg-transparent p-0 focus:ring-0\"\n                  placeholder=\"Extracted text will appear here...\"\n                  data-testid=\"textarea-extracted-text\"\n                />\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  onClick={downloadAsText}\n                  className=\"flex-1 min-w-[150px]\"\n                  data-testid=\"button-download-txt\"\n                >\n                  <i className=\"fas fa-file-alt mr-2\"></i>\n                  Download as TXT\n                </Button>\n                \n                <Button\n                  onClick={downloadAsJSON}\n                  variant=\"outline\"\n                  className=\"flex-1 min-w-[150px]\"\n                  data-testid=\"button-download-json\"\n                >\n                  <i className=\"fas fa-code mr-2\"></i>\n                  Download as JSON\n                </Button>\n                \n                <Button\n                  onClick={copyToClipboard}\n                  variant=\"outline\"\n                  className=\"flex-1 min-w-[150px]\"\n                  data-testid=\"button-copy\"\n                >\n                  <i className=\"fas fa-copy mr-2\"></i>\n                  Copy to Clipboard\n                </Button>\n                \n                <Button\n                  onClick={clearText}\n                  variant=\"outline\"\n                  className=\"flex-1 min-w-[150px]\"\n                  data-testid=\"button-clear\"\n                >\n                  <i className=\"fas fa-trash mr-2\"></i>\n                  Clear Text\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Extract PDF Text</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF File</h4>\n                <p className=\"text-sm text-muted-foreground\">Select the PDF document containing text you want to extract</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Configure Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Choose extraction format and specify which pages to process</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Extract Text</h4>\n                <p className=\"text-sm text-muted-foreground\">Click extract to process the PDF and retrieve all text content</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Use Extracted Text</h4>\n                <p className=\"text-sm text-muted-foreground\">Edit, copy, or download the text in various formats</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tips and Limitations */}\n      <Card className=\"border-yellow-200 dark:border-yellow-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-yellow-600 dark:text-yellow-500\">\n            <i className=\"fas fa-lightbulb\"></i>\n            Tips for Better Extraction\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm\">\n          <p>\n            <strong>Text-based PDFs:</strong> Works best with PDFs that contain selectable text rather than scanned images.\n          </p>\n          <p>\n            <strong>Complex Layouts:</strong> Tables and multi-column layouts may not preserve their structure in extracted text.\n          </p>\n          <p>\n            <strong>Fonts and Encoding:</strong> Some special characters or unusual fonts may not extract correctly.\n          </p>\n          <p>\n            <strong>Page Range:</strong> Extract specific pages to focus on relevant content and reduce processing time.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20766},"client/src/pages/tools/pdf/PDFToJPG.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport ToolShell from '../../../components/Tools/ToolShell';\nimport { getToolBySlug } from '../../../lib/toolsIndex';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;\n\nexport default function PDFToJPG() {\n  const tool = getToolBySlug('pdf', 'to-jpg');\n  const [file, setFile] = useState(null);\n  const [converting, setConverting] = useState(false);\n  const [pages, setPages] = useState([]);\n  const [quality, setQuality] = useState([90]);\n  const [resolution, setResolution] = useState('150');\n  const [format, setFormat] = useState('jpeg');\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    await loadPDFPages(uploadedFile);\n  }, [toast]);\n\n  const loadPDFPages = async (pdfFile) => {\n    try {\n      const arrayBuffer = await pdfFile.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      const pageCount = pdf.numPages;\n      \n      const pageList = [];\n      for (let i = 1; i <= pageCount; i++) {\n        pageList.push({\n          pageNumber: i,\n          selected: true\n        });\n      }\n      setPages(pageList);\n    } catch (error) {\n      toast({\n        title: \"Error loading PDF\",\n        description: \"Failed to load PDF pages. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const convertToImages = async () => {\n    if (!file || pages.length === 0) return;\n\n    setConverting(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      const selectedPages = pages.filter(page => page.selected);\n      \n      if (selectedPages.length === 0) {\n        toast({\n          title: \"No pages selected\",\n          description: \"Please select at least one page to convert.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const images = [];\n      const dpi = parseInt(resolution);\n      const scale = dpi / 72; // PDF default DPI is 72\n\n      for (const pageInfo of selectedPages) {\n        const page = await pdf.getPage(pageInfo.pageNumber);\n        const viewport = page.getViewport({ scale });\n        \n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        await page.render({\n          canvasContext: context,\n          viewport: viewport\n        }).promise;\n\n        // Convert canvas to blob\n        const blob = await new Promise(resolve => {\n          canvas.toBlob(resolve, `image/${format}`, quality[0] / 100);\n        });\n\n        images.push({\n          blob,\n          filename: `page-${pageInfo.pageNumber}.${format}`\n        });\n      }\n\n      // Download images\n      if (images.length === 1) {\n        saveAs(images[0].blob, images[0].filename);\n      } else {\n        // Create ZIP file for multiple images\n        const zip = new JSZip();\n        images.forEach(image => {\n          zip.file(image.filename, image.blob);\n        });\n        \n        const zipBlob = await zip.generateAsync({ type: 'blob' });\n        saveAs(zipBlob, `pdf-pages.zip`);\n      }\n\n      toast({\n        title: \"Conversion successful!\",\n        description: `Successfully converted ${images.length} page(s) to ${format.toUpperCase()}.`,\n      });\n\n    } catch (error) {\n      console.error('Conversion error:', error);\n      toast({\n        title: \"Conversion failed\",\n        description: \"An error occurred during conversion. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConverting(false);\n    }\n  };\n\n  const togglePageSelection = (pageNumber) => {\n    setPages(prev => prev.map(page => \n      page.pageNumber === pageNumber \n        ? { ...page, selected: !page.selected }\n        : page\n    ));\n  };\n\n  const selectAllPages = () => {\n    setPages(prev => prev.map(page => ({ ...page, selected: true })));\n  };\n\n  const deselectAllPages = () => {\n    setPages(prev => prev.map(page => ({ ...page, selected: false })));\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-file-image text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to convert pages to JPG images\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Conversion Settings */}\n      {file && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversion Settings</CardTitle>\n            <CardDescription>\n              Customize the output format and quality\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Output Format</Label>\n                <Select value={format} onValueChange={setFormat}>\n                  <SelectTrigger data-testid=\"select-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"jpeg\">JPEG</SelectItem>\n                    <SelectItem value=\"png\">PNG</SelectItem>\n                    <SelectItem value=\"webp\">WebP</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Resolution (DPI)</Label>\n                <Select value={resolution} onValueChange={setResolution}>\n                  <SelectTrigger data-testid=\"select-resolution\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"72\">72 DPI (Web)</SelectItem>\n                    <SelectItem value=\"150\">150 DPI (Standard)</SelectItem>\n                    <SelectItem value=\"300\">300 DPI (High Quality)</SelectItem>\n                    <SelectItem value=\"600\">600 DPI (Print Quality)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {format === 'jpeg' && (\n              <div>\n                <Label>JPEG Quality: {quality[0]}%</Label>\n                <Slider\n                  value={quality}\n                  onValueChange={setQuality}\n                  max={100}\n                  min={10}\n                  step={5}\n                  className=\"mt-2\"\n                  data-testid=\"slider-quality\"\n                />\n                <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                  <span>Lower size</span>\n                  <span>Higher quality</span>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Page Selection */}\n      {pages.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Select Pages</CardTitle>\n            <CardDescription>\n              Choose which pages to convert to images\n            </CardDescription>\n            <div className=\"flex gap-2 mt-4\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectAllPages}\n                data-testid=\"button-select-all\"\n              >\n                Select All\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={deselectAllPages}\n                data-testid=\"button-deselect-all\"\n              >\n                Deselect All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4\">\n              {pages.map((page) => (\n                <div\n                  key={page.pageNumber}\n                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all hover:shadow-md ${\n                    page.selected \n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                      : 'border-gray-200 dark:border-gray-700'\n                  }`}\n                  onClick={() => togglePageSelection(page.pageNumber)}\n                  data-testid={`page-${page.pageNumber}`}\n                >\n                  <div className=\"flex flex-col items-center\">\n                    <i className=\"fas fa-file-alt text-2xl mb-2 text-gray-400\"></i>\n                    <span className=\"text-sm font-medium\">Page {page.pageNumber}</span>\n                    {page.selected && (\n                      <i className=\"fas fa-check-circle text-blue-500 mt-1\"></i>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Convert Button */}\n      {file && pages.length > 0 && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={convertToImages}\n            disabled={converting || pages.filter(p => p.selected).length === 0}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-convert\"\n          >\n            {converting ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Converting...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-download mr-2\"></i>\n                Convert & Download\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Convert PDF to JPG</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF File</h4>\n                <p className=\"text-sm text-muted-foreground\">Select your PDF document from your device</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Select format, resolution, and quality preferences</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Select Pages</h4>\n                <p className=\"text-sm text-muted-foreground\">Choose which pages to convert to images</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Images</h4>\n                <p className=\"text-sm text-muted-foreground\">Get individual images or a ZIP file with all converted pages</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13507},"client/src/pages/tools/pdf/PDFToWord.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { saveAs } from 'file-saver';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;\n\nexport default function PDFToWord() {\n  const [file, setFile] = useState(null);\n  const [converting, setConverting] = useState(false);\n  const [outputFormat, setOutputFormat] = useState('docx');\n  const [extractedText, setExtractedText] = useState('');\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    setExtractedText('');\n  }, [toast]);\n\n  const extractTextFromPDF = async () => {\n    if (!file) return;\n\n    setConverting(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      let fullText = '';\n\n      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n        const page = await pdf.getPage(pageNum);\n        const textContent = await page.getTextContent();\n        \n        let pageText = '';\n        textContent.items.forEach((item) => {\n          pageText += item.str + ' ';\n        });\n        \n        fullText += `Page ${pageNum}:\\n${pageText.trim()}\\n\\n`;\n      }\n\n      setExtractedText(fullText);\n      \n      toast({\n        title: \"Text extracted successfully!\",\n        description: `Extracted text from ${pdf.numPages} page(s).`,\n      });\n\n    } catch (error) {\n      console.error('Text extraction error:', error);\n      toast({\n        title: \"Extraction failed\",\n        description: \"Failed to extract text from PDF. The PDF might be password-protected or contain only images.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConverting(false);\n    }\n  };\n\n  const downloadAsWord = () => {\n    if (!extractedText) return;\n\n    // Create a simple HTML document that Word can open\n    const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>PDF to Word Conversion</title>\n    <style>\n        body { font-family: 'Times New Roman', Times, serif; margin: 1in; line-height: 1.5; }\n        h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }\n        .page-break { page-break-before: always; }\n        .page-header { font-weight: bold; color: #666; margin-top: 20px; margin-bottom: 10px; }\n    </style>\n</head>\n<body>\n    <h1>PDF to Word Conversion</h1>\n    <p><strong>Original File:</strong> ${file.name}</p>\n    <p><strong>Conversion Date:</strong> ${new Date().toLocaleDateString()}</p>\n    <hr>\n    <div>\n        ${extractedText.split('\\n\\n').map(paragraph => {\n          if (paragraph.startsWith('Page ')) {\n            return `<div class=\"page-header\">${paragraph.split(':')[0]}</div><p>${paragraph.split(':').slice(1).join(':').trim()}</p>`;\n          }\n          return `<p>${paragraph}</p>`;\n        }).join('\\n')}\n    </div>\n</body>\n</html>`;\n\n    const blob = new Blob([htmlContent], { type: 'application/msword' });\n    const filename = file.name.replace(/\\.pdf$/i, '.doc');\n    saveAs(blob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const downloadAsText = () => {\n    if (!extractedText) return;\n\n    const blob = new Blob([extractedText], { type: 'text/plain' });\n    const filename = file.name.replace(/\\.pdf$/i, '.txt');\n    saveAs(blob, filename);\n\n    toast({\n      title: \"Download started\",\n      description: `Downloading ${filename}`,\n    });\n  };\n\n  const copyToClipboard = async () => {\n    if (!extractedText) return;\n\n    try {\n      await navigator.clipboard.writeText(extractedText);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Text has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy text to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-file-word text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to convert to Word document format\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n            \n            <Alert>\n              <i className=\"fas fa-info-circle h-4 w-4\"></i>\n              <AlertDescription>\n                This tool extracts text from PDF files. PDFs with images, complex layouts, or password protection may have limited conversion quality.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Conversion Settings */}\n      {file && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversion Options</CardTitle>\n            <CardDescription>\n              Choose your preferred output format\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Output Format</Label>\n              <Select value={outputFormat} onValueChange={setOutputFormat}>\n                <SelectTrigger data-testid=\"select-output-format\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"docx\">Word Document (.doc)</SelectItem>\n                  <SelectItem value=\"txt\">Plain Text (.txt)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-center\">\n              <Button\n                onClick={extractTextFromPDF}\n                disabled={converting}\n                size=\"lg\"\n                className=\"px-8\"\n                data-testid=\"button-extract\"\n              >\n                {converting ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Extracting Text...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-file-export mr-2\"></i>\n                    Extract Text from PDF\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Extracted Text Preview */}\n      {extractedText && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Extracted Text Preview</CardTitle>\n            <CardDescription>\n              Preview the extracted text before downloading\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"max-h-64 overflow-y-auto p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border\">\n                <pre className=\"text-sm whitespace-pre-wrap font-mono\">\n                  {extractedText.substring(0, 1000)}\n                  {extractedText.length > 1000 && '...\\n\\n[Text truncated in preview]'}\n                </pre>\n              </div>\n              \n              <div className=\"text-sm text-muted-foreground\">\n                <p>Total characters: {extractedText.length.toLocaleString()}</p>\n                <p>Total words: {extractedText.split(/\\s+/).filter(word => word.length > 0).length.toLocaleString()}</p>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {outputFormat === 'docx' ? (\n                  <Button\n                    onClick={downloadAsWord}\n                    className=\"flex-1 min-w-[200px]\"\n                    data-testid=\"button-download-word\"\n                  >\n                    <i className=\"fas fa-file-word mr-2\"></i>\n                    Download as Word Document\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={downloadAsText}\n                    className=\"flex-1 min-w-[200px]\"\n                    data-testid=\"button-download-text\"\n                  >\n                    <i className=\"fas fa-file-alt mr-2\"></i>\n                    Download as Text File\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={copyToClipboard}\n                  className=\"flex-1 min-w-[200px]\"\n                  data-testid=\"button-copy\"\n                >\n                  <i className=\"fas fa-copy mr-2\"></i>\n                  Copy to Clipboard\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Convert PDF to Word</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF File</h4>\n                <p className=\"text-sm text-muted-foreground\">Select the PDF document you want to convert</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Output Format</h4>\n                <p className=\"text-sm text-muted-foreground\">Select between Word document or plain text format</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Extract Text</h4>\n                <p className=\"text-sm text-muted-foreground\">Click to extract all text content from the PDF</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Result</h4>\n                <p className=\"text-sm text-muted-foreground\">Preview and download your converted document</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Limitations and Tips */}\n      <Card className=\"border-yellow-200 dark:border-yellow-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-yellow-600 dark:text-yellow-500\">\n            <i className=\"fas fa-exclamation-triangle\"></i>\n            Conversion Limitations\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm\">\n          <p>\n            <strong>Text-based PDFs:</strong> Works best with PDFs that contain selectable text.\n          </p>\n          <p>\n            <strong>Image-based PDFs:</strong> Scanned documents or PDFs with text as images may not convert well without OCR.\n          </p>\n          <p>\n            <strong>Complex Layouts:</strong> Tables, columns, and complex formatting may not be preserved perfectly.\n          </p>\n          <p>\n            <strong>Fonts and Styling:</strong> Original fonts and detailed formatting will be simplified in the Word output.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13391},"client/src/pages/tools/pdf/PDFWatermark.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { PDFDocument, rgb, degrees } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\n\nexport default function PDFWatermark() {\n  const [file, setFile] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [watermarkType, setWatermarkType] = useState('text');\n  \n  // Text watermark settings\n  const [watermarkText, setWatermarkText] = useState('CONFIDENTIAL');\n  const [fontSize, setFontSize] = useState([36]);\n  const [opacity, setOpacity] = useState([50]);\n  const [rotation, setRotation] = useState([45]);\n  const [textColor, setTextColor] = useState('#ff0000');\n  \n  // Position settings\n  const [position, setPosition] = useState('center');\n  const [xOffset, setXOffset] = useState([0]);\n  const [yOffset, setYOffset] = useState([0]);\n  \n  // Image watermark settings\n  const [imageFile, setImageFile] = useState(null);\n  const [imageOpacity, setImageOpacity] = useState([50]);\n  const [imageScale, setImageScale] = useState([100]);\n  \n  // Page settings\n  const [applyToPages, setApplyToPages] = useState('all');\n  const [pageRange, setPageRange] = useState('');\n\n  const { toast } = useToast();\n\n  const handleFileUpload = useCallback((event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    if (uploadedFile.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n  }, [toast]);\n\n  const handleImageUpload = useCallback((event) => {\n    const uploadedImage = event.target.files[0];\n    if (!uploadedImage) return;\n\n    if (!uploadedImage.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setImageFile(uploadedImage);\n  }, [toast]);\n\n  const hexToRgb = (hex) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16) / 255,\n      g: parseInt(result[2], 16) / 255,\n      b: parseInt(result[3], 16) / 255\n    } : { r: 1, g: 0, b: 0 };\n  };\n\n  const getPosition = (pageWidth, pageHeight, watermarkWidth, watermarkHeight) => {\n    const xOffsetValue = xOffset[0];\n    const yOffsetValue = yOffset[0];\n    \n    switch (position) {\n      case 'top-left':\n        return { x: 50 + xOffsetValue, y: pageHeight - 50 - watermarkHeight + yOffsetValue };\n      case 'top-center':\n        return { x: (pageWidth - watermarkWidth) / 2 + xOffsetValue, y: pageHeight - 50 - watermarkHeight + yOffsetValue };\n      case 'top-right':\n        return { x: pageWidth - 50 - watermarkWidth + xOffsetValue, y: pageHeight - 50 - watermarkHeight + yOffsetValue };\n      case 'center-left':\n        return { x: 50 + xOffsetValue, y: (pageHeight - watermarkHeight) / 2 + yOffsetValue };\n      case 'center':\n        return { x: (pageWidth - watermarkWidth) / 2 + xOffsetValue, y: (pageHeight - watermarkHeight) / 2 + yOffsetValue };\n      case 'center-right':\n        return { x: pageWidth - 50 - watermarkWidth + xOffsetValue, y: (pageHeight - watermarkHeight) / 2 + yOffsetValue };\n      case 'bottom-left':\n        return { x: 50 + xOffsetValue, y: 50 + yOffsetValue };\n      case 'bottom-center':\n        return { x: (pageWidth - watermarkWidth) / 2 + xOffsetValue, y: 50 + yOffsetValue };\n      case 'bottom-right':\n        return { x: pageWidth - 50 - watermarkWidth + xOffsetValue, y: 50 + yOffsetValue };\n      default:\n        return { x: (pageWidth - watermarkWidth) / 2 + xOffsetValue, y: (pageHeight - watermarkHeight) / 2 + yOffsetValue };\n    }\n  };\n\n  const parsePageRange = (range, totalPages) => {\n    if (!range.trim()) return [];\n    \n    const pages = new Set();\n    const parts = range.split(',');\n    \n    for (const part of parts) {\n      const trimmed = part.trim();\n      if (trimmed.includes('-')) {\n        const [start, end] = trimmed.split('-').map(n => parseInt(n.trim()));\n        if (start && end && start <= end && start >= 1 && end <= totalPages) {\n          for (let i = start; i <= end; i++) {\n            pages.add(i);\n          }\n        }\n      } else {\n        const pageNum = parseInt(trimmed);\n        if (pageNum >= 1 && pageNum <= totalPages) {\n          pages.add(pageNum);\n        }\n      }\n    }\n    \n    return Array.from(pages).sort((a, b) => a - b);\n  };\n\n  const addWatermark = async () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a PDF file first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (watermarkType === 'text' && !watermarkText.trim()) {\n      toast({\n        title: \"No watermark text\",\n        description: \"Please enter watermark text.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (watermarkType === 'image' && !imageFile) {\n      toast({\n        title: \"No image selected\",\n        description: \"Please select an image for the watermark.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      const pages = pdfDoc.getPages();\n      \n      // Determine which pages to apply watermark to\n      let targetPages = [];\n      if (applyToPages === 'all') {\n        targetPages = pages.map((_, index) => index);\n      } else if (applyToPages === 'range') {\n        const pageNumbers = parsePageRange(pageRange, pages.length);\n        targetPages = pageNumbers.map(num => num - 1); // Convert to 0-based index\n      }\n\n      if (targetPages.length === 0) {\n        toast({\n          title: \"No pages selected\",\n          description: \"Please specify valid pages to apply the watermark.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      let embeddedImage = null;\n      if (watermarkType === 'image') {\n        const imageBytes = await imageFile.arrayBuffer();\n        if (imageFile.type.includes('png')) {\n          embeddedImage = await pdfDoc.embedPng(imageBytes);\n        } else {\n          embeddedImage = await pdfDoc.embedJpg(imageBytes);\n        }\n      }\n\n      // Apply watermark to selected pages\n      for (const pageIndex of targetPages) {\n        const page = pages[pageIndex];\n        const { width: pageWidth, height: pageHeight } = page.getSize();\n\n        if (watermarkType === 'text') {\n          const color = hexToRgb(textColor);\n          const textWidth = watermarkText.length * fontSize[0] * 0.6; // Approximate text width\n          const textHeight = fontSize[0];\n          \n          const pos = getPosition(pageWidth, pageHeight, textWidth, textHeight);\n          \n          page.drawText(watermarkText, {\n            x: pos.x,\n            y: pos.y,\n            size: fontSize[0],\n            color: rgb(color.r, color.g, color.b),\n            opacity: opacity[0] / 100,\n            rotate: degrees(rotation[0])\n          });\n        } else if (watermarkType === 'image' && embeddedImage) {\n          const imageDims = embeddedImage.scale(imageScale[0] / 100);\n          const pos = getPosition(pageWidth, pageHeight, imageDims.width, imageDims.height);\n          \n          page.drawImage(embeddedImage, {\n            x: pos.x,\n            y: pos.y,\n            width: imageDims.width,\n            height: imageDims.height,\n            opacity: imageOpacity[0] / 100,\n            rotate: degrees(rotation[0])\n          });\n        }\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      const filename = file.name.replace(/\\.pdf$/i, '_watermarked.pdf');\n      saveAs(blob, filename);\n\n      toast({\n        title: \"Watermark added successfully!\",\n        description: `Watermark applied to ${targetPages.length} page(s). File saved as \"${filename}\".`,\n      });\n\n    } catch (error) {\n      console.error('Watermark error:', error);\n      toast({\n        title: \"Failed to add watermark\",\n        description: \"An error occurred while adding the watermark. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* File Upload */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-stamp text-red-400\"></i>\n            Upload PDF File\n          </CardTitle>\n          <CardDescription>\n            Select a PDF file to add watermark\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pdf-upload\">Choose PDF File</Label>\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handleFileUpload}\n                className=\"mt-1\"\n                data-testid=\"input-pdf-upload\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Watermark Settings */}\n      {file && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Watermark Settings</CardTitle>\n            <CardDescription>\n              Configure your watermark appearance and placement\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={watermarkType} onValueChange={setWatermarkType} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"text\" data-testid=\"tab-text\">Text Watermark</TabsTrigger>\n                <TabsTrigger value=\"image\" data-testid=\"tab-image\">Image Watermark</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"text\" className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"watermark-text\">Watermark Text</Label>\n                  <Textarea\n                    id=\"watermark-text\"\n                    value={watermarkText}\n                    onChange={(e) => setWatermarkText(e.target.value)}\n                    placeholder=\"Enter watermark text\"\n                    className=\"mt-1\"\n                    data-testid=\"input-watermark-text\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Font Size: {fontSize[0]}px</Label>\n                    <Slider\n                      value={fontSize}\n                      onValueChange={setFontSize}\n                      max={100}\n                      min={8}\n                      step={2}\n                      className=\"mt-2\"\n                      data-testid=\"slider-font-size\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"text-color\">Text Color</Label>\n                    <Input\n                      id=\"text-color\"\n                      type=\"color\"\n                      value={textColor}\n                      onChange={(e) => setTextColor(e.target.value)}\n                      className=\"mt-1 h-10\"\n                      data-testid=\"input-text-color\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"image\" className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"image-upload\">Watermark Image</Label>\n                  <Input\n                    id=\"image-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                    className=\"mt-1\"\n                    data-testid=\"input-image-upload\"\n                  />\n                  {imageFile && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Selected: {imageFile.name}\n                    </p>\n                  )}\n                </div>\n\n                {watermarkType === 'image' && (\n                  <div>\n                    <Label>Image Scale: {imageScale[0]}%</Label>\n                    <Slider\n                      value={imageScale}\n                      onValueChange={setImageScale}\n                      max={200}\n                      min={10}\n                      step={5}\n                      className=\"mt-2\"\n                      data-testid=\"slider-image-scale\"\n                    />\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n\n            {/* Common Settings */}\n            <div className=\"space-y-6 border-t pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Opacity: {watermarkType === 'text' ? opacity[0] : imageOpacity[0]}%</Label>\n                  <Slider\n                    value={watermarkType === 'text' ? opacity : imageOpacity}\n                    onValueChange={watermarkType === 'text' ? setOpacity : setImageOpacity}\n                    max={100}\n                    min={10}\n                    step={5}\n                    className=\"mt-2\"\n                    data-testid=\"slider-opacity\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Rotation: {rotation[0]}¬∞</Label>\n                  <Slider\n                    value={rotation}\n                    onValueChange={setRotation}\n                    max={360}\n                    min={0}\n                    step={15}\n                    className=\"mt-2\"\n                    data-testid=\"slider-rotation\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Position</Label>\n                <Select value={position} onValueChange={setPosition}>\n                  <SelectTrigger className=\"mt-1\" data-testid=\"select-position\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"top-left\">Top Left</SelectItem>\n                    <SelectItem value=\"top-center\">Top Center</SelectItem>\n                    <SelectItem value=\"top-right\">Top Right</SelectItem>\n                    <SelectItem value=\"center-left\">Center Left</SelectItem>\n                    <SelectItem value=\"center\">Center</SelectItem>\n                    <SelectItem value=\"center-right\">Center Right</SelectItem>\n                    <SelectItem value=\"bottom-left\">Bottom Left</SelectItem>\n                    <SelectItem value=\"bottom-center\">Bottom Center</SelectItem>\n                    <SelectItem value=\"bottom-right\">Bottom Right</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>X Offset: {xOffset[0]}px</Label>\n                  <Slider\n                    value={xOffset}\n                    onValueChange={setXOffset}\n                    max={200}\n                    min={-200}\n                    step={10}\n                    className=\"mt-2\"\n                    data-testid=\"slider-x-offset\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Y Offset: {yOffset[0]}px</Label>\n                  <Slider\n                    value={yOffset}\n                    onValueChange={setYOffset}\n                    max={200}\n                    min={-200}\n                    step={10}\n                    className=\"mt-2\"\n                    data-testid=\"slider-y-offset\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Page Selection */}\n            <div className=\"space-y-4 border-t pt-6\">\n              <div>\n                <Label>Apply to Pages</Label>\n                <Select value={applyToPages} onValueChange={setApplyToPages}>\n                  <SelectTrigger className=\"mt-1\" data-testid=\"select-apply-pages\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Pages</SelectItem>\n                    <SelectItem value=\"range\">Page Range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {applyToPages === 'range' && (\n                <div>\n                  <Label htmlFor=\"page-range\">Page Range</Label>\n                  <Input\n                    id=\"page-range\"\n                    value={pageRange}\n                    onChange={(e) => setPageRange(e.target.value)}\n                    placeholder=\"e.g., 1-3, 5, 7-10\"\n                    className=\"mt-1\"\n                    data-testid=\"input-page-range\"\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Use comma-separated values and ranges (e.g., 1-3, 5, 7-10)\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add Watermark Button */}\n      {file && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={addWatermark}\n            disabled={processing || (watermarkType === 'text' && !watermarkText.trim()) || (watermarkType === 'image' && !imageFile)}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-add-watermark\"\n          >\n            {processing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Adding Watermark...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-stamp mr-2\"></i>\n                Add Watermark\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Add PDF Watermark</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Upload PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Select your PDF document to add watermark</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Watermark Type</h4>\n                <p className=\"text-sm text-muted-foreground\">Select text or image watermark and configure settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Customize Appearance</h4>\n                <p className=\"text-sm text-muted-foreground\">Adjust opacity, rotation, position, and other settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download Watermarked PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Get your PDF with the applied watermark</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":21003},"client/src/pages/tools/pdf/WordToPDF.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { PDFDocument, rgb, StandardFonts } from 'pdf-lib';\nimport { saveAs } from 'file-saver';\nimport mammoth from 'mammoth';\n\nexport default function WordToPDF() {\n  const [file, setFile] = useState(null);\n  const [converting, setConverting] = useState(false);\n  const [textContent, setTextContent] = useState('');\n  const [conversionMethod, setConversionMethod] = useState('file');\n  const [manualText, setManualText] = useState('');\n  const [pageSize, setPageSize] = useState('A4');\n  const [fontSize, setFontSize] = useState('12');\n  const { toast } = useToast();\n\n  const pageSizes = {\n    'A4': { width: 595, height: 842 },\n    'A3': { width: 842, height: 1191 },\n    'A5': { width: 420, height: 595 },\n    'Letter': { width: 612, height: 792 },\n    'Legal': { width: 612, height: 1008 }\n  };\n\n  const handleFileUpload = useCallback(async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    const fileType = uploadedFile.type;\n    const validTypes = [\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx\n      'application/msword', // .doc\n      'text/plain', // .txt\n      'text/rtf', // .rtf\n      'application/rtf'\n    ];\n\n    if (!validTypes.includes(fileType) && !uploadedFile.name.match(/\\.(docx|doc|txt|rtf)$/i)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a Word document (.docx, .doc), text file (.txt), or RTF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFile(uploadedFile);\n    await extractTextFromFile(uploadedFile);\n  }, [toast]);\n\n  const extractTextFromFile = async (file) => {\n    try {\n      if (file.name.endsWith('.docx')) {\n        // Extract text from DOCX using mammoth\n        const arrayBuffer = await file.arrayBuffer();\n        const result = await mammoth.extractRawText({ arrayBuffer });\n        setTextContent(result.value);\n      } else if (file.name.endsWith('.txt') || file.type === 'text/plain') {\n        // Read plain text file\n        const text = await file.text();\n        setTextContent(text);\n      } else if (file.name.endsWith('.rtf') || file.type.includes('rtf')) {\n        // Basic RTF text extraction (removes RTF codes)\n        const text = await file.text();\n        const plainText = text.replace(/\\\\[a-z0-9]+\\s?/gi, '').replace(/[{}]/g, '').trim();\n        setTextContent(plainText);\n      } else {\n        // Fallback: try to read as text\n        const text = await file.text();\n        setTextContent(text);\n      }\n\n      toast({\n        title: \"File loaded successfully\",\n        description: \"Text content extracted and ready for PDF conversion.\",\n      });\n    } catch (error) {\n      console.error('Text extraction error:', error);\n      toast({\n        title: \"Extraction failed\",\n        description: \"Failed to extract text from the file. Please try a different file or use manual text input.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const wrapText = (text, maxWidth, fontSize, font) => {\n    const words = text.split(' ');\n    const lines = [];\n    let currentLine = '';\n\n    for (const word of words) {\n      const testLine = currentLine + (currentLine ? ' ' : '') + word;\n      const textWidth = font.widthOfTextAtSize(testLine, fontSize);\n      \n      if (textWidth > maxWidth && currentLine) {\n        lines.push(currentLine);\n        currentLine = word;\n      } else {\n        currentLine = testLine;\n      }\n    }\n    \n    if (currentLine) {\n      lines.push(currentLine);\n    }\n    \n    return lines;\n  };\n\n  const createPDF = async () => {\n    const textToConvert = conversionMethod === 'file' ? textContent : manualText;\n    \n    if (!textToConvert.trim()) {\n      toast({\n        title: \"No content to convert\",\n        description: \"Please provide text content to convert to PDF.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setConverting(true);\n    try {\n      const pdfDoc = await PDFDocument.create();\n      const font = await pdfDoc.embedFont(StandardFonts.TimesRoman);\n      const fontBold = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);\n      \n      const { width: pageWidth, height: pageHeight } = pageSizes[pageSize];\n      const margin = 72; // 1 inch margin\n      const maxWidth = pageWidth - (margin * 2);\n      const fontSizeNum = parseInt(fontSize);\n      const lineHeight = fontSizeNum * 1.2;\n      \n      let yPosition = pageHeight - margin;\n      let currentPage = pdfDoc.addPage([pageWidth, pageHeight]);\n      \n      // Split text into paragraphs\n      const paragraphs = textToConvert.split(/\\n\\s*\\n/);\n      \n      for (const paragraph of paragraphs) {\n        if (!paragraph.trim()) continue;\n        \n        // Check if this looks like a heading (short line, all caps, or starts with number)\n        const isHeading = paragraph.length < 50 && \n          (paragraph === paragraph.toUpperCase() || /^\\d+\\.?\\s/.test(paragraph));\n        \n        const currentFont = isHeading ? fontBold : font;\n        const currentFontSize = isHeading ? fontSizeNum + 2 : fontSizeNum;\n        \n        // Wrap text to fit page width\n        const lines = wrapText(paragraph.trim(), maxWidth, currentFontSize, currentFont);\n        \n        for (const line of lines) {\n          // Check if we need a new page\n          if (yPosition < margin + lineHeight) {\n            currentPage = pdfDoc.addPage([pageWidth, pageHeight]);\n            yPosition = pageHeight - margin;\n          }\n          \n          currentPage.drawText(line, {\n            x: margin,\n            y: yPosition,\n            size: currentFontSize,\n            font: currentFont,\n            color: rgb(0, 0, 0),\n          });\n          \n          yPosition -= lineHeight;\n        }\n        \n        // Add extra space after paragraph\n        yPosition -= lineHeight * 0.5;\n      }\n      \n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      let filename;\n      if (conversionMethod === 'file' && file) {\n        filename = file.name.replace(/\\.[^/.]+$/, '.pdf');\n      } else {\n        filename = 'document.pdf';\n      }\n      \n      saveAs(blob, filename);\n      \n      toast({\n        title: \"PDF created successfully!\",\n        description: `Document converted to PDF: ${filename}`,\n      });\n      \n    } catch (error) {\n      console.error('PDF creation error:', error);\n      toast({\n        title: \"Conversion failed\",\n        description: \"An error occurred while creating the PDF.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConverting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Conversion Method Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-file-pdf text-red-400\"></i>\n            Word to PDF Converter\n          </CardTitle>\n          <CardDescription>\n            Convert Word documents or text to PDF format\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Conversion Method</Label>\n              <Select value={conversionMethod} onValueChange={setConversionMethod}>\n                <SelectTrigger data-testid=\"select-conversion-method\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"file\">Upload File</SelectItem>\n                  <SelectItem value=\"text\">Type/Paste Text</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* File Upload */}\n      {conversionMethod === 'file' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Document</CardTitle>\n            <CardDescription>\n              Select a Word document, text file, or RTF file\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"file-upload\">Choose Document</Label>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".docx,.doc,.txt,.rtf\"\n                  onChange={handleFileUpload}\n                  className=\"mt-1\"\n                  data-testid=\"input-file-upload\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Supports: .docx, .doc, .txt, .rtf files\n                </p>\n              </div>\n              \n              {textContent && (\n                <Alert>\n                  <i className=\"fas fa-check-circle h-4 w-4\"></i>\n                  <AlertDescription>\n                    Text extracted successfully! {textContent.length.toLocaleString()} characters ready for conversion.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Manual Text Input */}\n      {conversionMethod === 'text' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Enter Text Content</CardTitle>\n            <CardDescription>\n              Type or paste your text content below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"manual-text\">Document Content</Label>\n                <Textarea\n                  id=\"manual-text\"\n                  value={manualText}\n                  onChange={(e) => setManualText(e.target.value)}\n                  placeholder=\"Type or paste your document content here...\"\n                  className=\"mt-1 min-h-64\"\n                  data-testid=\"textarea-manual-text\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {manualText.length.toLocaleString()} characters\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* PDF Settings */}\n      {((conversionMethod === 'file' && textContent) || (conversionMethod === 'text' && manualText)) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>PDF Settings</CardTitle>\n            <CardDescription>\n              Customize your PDF output preferences\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Page Size</Label>\n                <Select value={pageSize} onValueChange={setPageSize}>\n                  <SelectTrigger data-testid=\"select-page-size\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"A4\">A4 (210 √ó 297 mm)</SelectItem>\n                    <SelectItem value=\"A3\">A3 (297 √ó 420 mm)</SelectItem>\n                    <SelectItem value=\"A5\">A5 (148 √ó 210 mm)</SelectItem>\n                    <SelectItem value=\"Letter\">Letter (8.5 √ó 11 in)</SelectItem>\n                    <SelectItem value=\"Legal\">Legal (8.5 √ó 14 in)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Font Size</Label>\n                <Select value={fontSize} onValueChange={setFontSize}>\n                  <SelectTrigger data-testid=\"select-font-size\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"10\">10pt</SelectItem>\n                    <SelectItem value=\"11\">11pt</SelectItem>\n                    <SelectItem value=\"12\">12pt</SelectItem>\n                    <SelectItem value=\"14\">14pt</SelectItem>\n                    <SelectItem value=\"16\">16pt</SelectItem>\n                    <SelectItem value=\"18\">18pt</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Text Preview */}\n      {((conversionMethod === 'file' && textContent) || (conversionMethod === 'text' && manualText)) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Content Preview</CardTitle>\n            <CardDescription>\n              Preview of the text that will be converted to PDF\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"max-h-48 overflow-y-auto p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border\">\n              <pre className=\"text-sm whitespace-pre-wrap\">\n                {(conversionMethod === 'file' ? textContent : manualText).substring(0, 1000)}\n                {(conversionMethod === 'file' ? textContent : manualText).length > 1000 && '...\\n\\n[Text truncated in preview]'}\n              </pre>\n            </div>\n            \n            <div className=\"mt-4 text-sm text-muted-foreground\">\n              <p>Characters: {(conversionMethod === 'file' ? textContent : manualText).length.toLocaleString()}</p>\n              <p>Estimated pages: ~{Math.ceil((conversionMethod === 'file' ? textContent : manualText).length / 2000)}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Convert Button */}\n      {((conversionMethod === 'file' && textContent) || (conversionMethod === 'text' && manualText)) && (\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={createPDF}\n            disabled={converting}\n            size=\"lg\"\n            className=\"px-8\"\n            data-testid=\"button-convert\"\n          >\n            {converting ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Creating PDF...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-file-pdf mr-2\"></i>\n                Convert to PDF\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Convert to PDF</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Choose Input Method</h4>\n                <p className=\"text-sm text-muted-foreground\">Upload a document file or type/paste text directly</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Customize Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">Select page size, font size, and other formatting options</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Preview Content</h4>\n                <p className=\"text-sm text-muted-foreground\">Review the text content before conversion</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">4</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Download PDF</h4>\n                <p className=\"text-sm text-muted-foreground\">Click convert to generate and download your PDF</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17152},"client/src/pages/tools/text/CaseConverter.jsx":{"content":"import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function CaseConverter() {\n  const [inputText, setInputText] = useState('');\n  const [results, setResults] = useState({});\n  const { toast } = useToast();\n\n  const convertCases = useCallback((text) => {\n    if (!text.trim()) {\n      setResults({});\n      return;\n    }\n\n    const conversions = {\n      uppercase: text.toUpperCase(),\n      lowercase: text.toLowerCase(),\n      titleCase: text.replace(/\\w\\S*/g, (txt) => \n        txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n      ),\n      sentenceCase: text.charAt(0).toUpperCase() + text.slice(1).toLowerCase(),\n      camelCase: text\n        .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => \n          index === 0 ? word.toLowerCase() : word.toUpperCase()\n        )\n        .replace(/\\s+/g, ''),\n      pascalCase: text\n        .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word) => word.toUpperCase())\n        .replace(/\\s+/g, ''),\n      snakeCase: text\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, '_')\n        .replace(/[^\\w_]/g, ''),\n      kebabCase: text\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, '-')\n        .replace(/[^\\w-]/g, ''),\n      constantCase: text\n        .trim()\n        .toUpperCase()\n        .replace(/\\s+/g, '_')\n        .replace(/[^\\w_]/g, ''),\n      dotCase: text\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, '.')\n        .replace(/[^\\w.]/g, ''),\n      pathCase: text\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, '/')\n        .replace(/[^\\w/]/g, ''),\n      alternatingCase: text\n        .split('')\n        .map((char, index) => \n          index % 2 === 0 ? char.toLowerCase() : char.toUpperCase()\n        )\n        .join(''),\n      inverseCase: text\n        .split('')\n        .map(char => \n          char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()\n        )\n        .join(''),\n      capitalizeWords: text.replace(/\\b\\w/g, char => char.toUpperCase())\n    };\n\n    setResults(conversions);\n  }, []);\n\n  const handleInputChange = (e) => {\n    const text = e.target.value;\n    setInputText(text);\n    convertCases(text);\n  };\n\n  const copyToClipboard = async (text, caseName) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: `${caseName} copied to clipboard`,\n        duration: 2000,\n      });\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n        duration: 2000,\n      });\n    }\n  };\n\n  const clearAll = () => {\n    setInputText('');\n    setResults({});\n  };\n\n  const caseOptions = [\n    {\n      key: 'uppercase',\n      name: 'UPPERCASE',\n      description: 'All letters in uppercase',\n      icon: 'fas fa-arrow-up'\n    },\n    {\n      key: 'lowercase',\n      name: 'lowercase',\n      description: 'All letters in lowercase',\n      icon: 'fas fa-arrow-down'\n    },\n    {\n      key: 'titleCase',\n      name: 'Title Case',\n      description: 'First letter of each word capitalized',\n      icon: 'fas fa-heading'\n    },\n    {\n      key: 'sentenceCase',\n      name: 'Sentence case',\n      description: 'First letter capitalized',\n      icon: 'fas fa-font'\n    },\n    {\n      key: 'camelCase',\n      name: 'camelCase',\n      description: 'Words joined, first lowercase, rest capitalized',\n      icon: 'fas fa-code'\n    },\n    {\n      key: 'pascalCase',\n      name: 'PascalCase',\n      description: 'Words joined, all first letters capitalized',\n      icon: 'fas fa-code'\n    },\n    {\n      key: 'snakeCase',\n      name: 'snake_case',\n      description: 'Words separated by underscores, lowercase',\n      icon: 'fas fa-minus'\n    },\n    {\n      key: 'kebabCase',\n      name: 'kebab-case',\n      description: 'Words separated by hyphens, lowercase',\n      icon: 'fas fa-minus'\n    },\n    {\n      key: 'constantCase',\n      name: 'CONSTANT_CASE',\n      description: 'Words separated by underscores, uppercase',\n      icon: 'fas fa-minus'\n    },\n    {\n      key: 'dotCase',\n      name: 'dot.case',\n      description: 'Words separated by dots, lowercase',\n      icon: 'fas fa-circle'\n    },\n    {\n      key: 'pathCase',\n      name: 'path/case',\n      description: 'Words separated by forward slashes',\n      icon: 'fas fa-slash-forward'\n    },\n    {\n      key: 'alternatingCase',\n      name: 'aLtErNaTiNg CaSe',\n      description: 'Alternating uppercase and lowercase letters',\n      icon: 'fas fa-exchange-alt'\n    },\n    {\n      key: 'inverseCase',\n      name: 'iNVERSE cASE',\n      description: 'Inverts the case of each letter',\n      icon: 'fas fa-sync-alt'\n    },\n    {\n      key: 'capitalizeWords',\n      name: 'Capitalize Words',\n      description: 'First letter of each word capitalized, rest unchanged',\n      icon: 'fas fa-text-width'\n    }\n  ];\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-blue-500/10 mb-6\">\n          <i className=\"fas fa-text-height text-2xl text-blue-400\"></i>\n        </div>\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent\">\n          Case Converter\n        </h1>\n        <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-2xl mx-auto\">\n          Convert text between different cases including camelCase, snake_case, kebab-case, and more.\n        </p>\n      </div>\n\n      {/* Input Section */}\n      <Card className=\"glassmorphism\">\n        <CardContent className=\"p-6 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"input-text\" className=\"text-base font-medium\">\n              Enter Your Text\n            </Label>\n            {inputText && (\n              <Button\n                onClick={clearAll}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-slate-500 hover:text-slate-700\"\n              >\n                <i className=\"fas fa-times mr-2\" />\n                Clear\n              </Button>\n            )}\n          </div>\n          <Textarea\n            id=\"input-text\"\n            placeholder=\"Type or paste your text here...\"\n            value={inputText}\n            onChange={handleInputChange}\n            className=\"min-h-[120px] resize-none\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Results Section */}\n      {Object.keys(results).length > 0 && (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bold text-center\">Converted Text</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {caseOptions.map((option) => {\n              const convertedText = results[option.key];\n              if (!convertedText) return null;\n\n              return (\n                <Card key={option.key} className=\"glassmorphism hover:scale-105 transition-transform duration-200\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 rounded-lg bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center\">\n                          <i className={`${option.icon} text-blue-600 dark:text-blue-400 text-sm`} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-sm\">{option.name}</h3>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                            {option.description}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        onClick={() => copyToClipboard(convertedText, option.name)}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <i className=\"fas fa-copy text-slate-500 hover:text-blue-500\" />\n                      </Button>\n                    </div>\n                    <div className=\"p-3 rounded-lg bg-slate-50 dark:bg-slate-800/50 border\">\n                      <p className=\"text-sm font-mono break-all\">\n                        {convertedText}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!inputText && (\n        <Card className=\"glassmorphism\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 rounded-2xl bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-keyboard text-2xl text-blue-600 dark:text-blue-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Ready to Convert</h3>\n            <p className=\"text-slate-600 dark:text-slate-300\">\n              Enter some text above to see it converted into different cases.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-bolt text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h3 className=\"font-semibold\">Instant Conversion</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            All conversions happen in real-time as you type.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-copy text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h3 className=\"font-semibold\">One-Click Copy</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Copy any converted text to clipboard with a single click.\n          </p>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-12 h-12 rounded-lg bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-list text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h3 className=\"font-semibold\">14 Case Types</h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n            Supports all common programming and writing case formats.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11109}}}